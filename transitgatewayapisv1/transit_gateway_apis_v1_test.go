/**
 * (C) Copyright IBM Corp. 2024.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package transitgatewayapisv1_test

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/http/httptest"
	"os"
	"time"

	"github.com/IBM/go-sdk-core/v5/core"
	"github.com/go-openapi/strfmt"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	"github.ibm.com/IBM/networking-go-sdk/transitgatewayapisv1"
)

var _ = Describe(`TransitGatewayApisV1`, func() {
	var testServer *httptest.Server
	Describe(`Service constructor tests`, func() {
		version := "testString"
		It(`Instantiate service client`, func() {
			transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
				Version: core.StringPtr(version),
			})
			Expect(transitGatewayApisService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
				URL: "{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})
			Expect(transitGatewayApisService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
				URL: "https://transitgatewayapisv1/api",
				Version: core.StringPtr(version),
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(transitGatewayApisService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Validation Error`, func() {
			transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{})
			Expect(transitGatewayApisService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		version := "testString"
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"TRANSIT_GATEWAY_APIS_URL": "https://transitgatewayapisv1/api",
				"TRANSIT_GATEWAY_APIS_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1UsingExternalConfig(&transitgatewayapisv1.TransitGatewayApisV1Options{
					Version: core.StringPtr(version),
				})
				Expect(transitGatewayApisService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := transitGatewayApisService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != transitGatewayApisService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(transitGatewayApisService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(transitGatewayApisService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1UsingExternalConfig(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL: "https://testService/api",
					Version: core.StringPtr(version),
				})
				Expect(transitGatewayApisService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := transitGatewayApisService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != transitGatewayApisService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(transitGatewayApisService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(transitGatewayApisService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1UsingExternalConfig(&transitgatewayapisv1.TransitGatewayApisV1Options{
					Version: core.StringPtr(version),
				})
				err := transitGatewayApisService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := transitGatewayApisService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != transitGatewayApisService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(transitGatewayApisService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(transitGatewayApisService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"TRANSIT_GATEWAY_APIS_URL": "https://transitgatewayapisv1/api",
				"TRANSIT_GATEWAY_APIS_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1UsingExternalConfig(&transitgatewayapisv1.TransitGatewayApisV1Options{
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(transitGatewayApisService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"TRANSIT_GATEWAY_APIS_AUTH_TYPE":   "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1UsingExternalConfig(&transitgatewayapisv1.TransitGatewayApisV1Options{
				URL: "{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(transitGatewayApisService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = transitgatewayapisv1.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`ListCustomerAccountsOps(listCustomerAccountsOpsOptions *ListCustomerAccountsOpsOptions) - Operation response error`, func() {
		version := "testString"
		listCustomerAccountsOpsPath := "/ops/customer_accounts"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listCustomerAccountsOpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(50))}))
					Expect(req.URL.Query()["location_name"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListCustomerAccountsOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListCustomerAccountsOpsOptions model
				listCustomerAccountsOpsOptionsModel := new(transitgatewayapisv1.ListCustomerAccountsOpsOptions)
				listCustomerAccountsOpsOptionsModel.Start = core.StringPtr("testString")
				listCustomerAccountsOpsOptionsModel.Limit = core.Int64Ptr(int64(50))
				listCustomerAccountsOpsOptionsModel.LocationName = core.StringPtr("testString")
				listCustomerAccountsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.ListCustomerAccountsOps(listCustomerAccountsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.ListCustomerAccountsOps(listCustomerAccountsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListCustomerAccountsOps(listCustomerAccountsOpsOptions *ListCustomerAccountsOpsOptions)`, func() {
		version := "testString"
		listCustomerAccountsOpsPath := "/ops/customer_accounts"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listCustomerAccountsOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(50))}))
					Expect(req.URL.Query()["location_name"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"customer_accounts": [{"ibmcloud_account_id": "28e4d90ac7504be694471ee66e70d0d5", "softlayer_account_ids": ["2027758"]}], "customer_accounts_errored": ["28e4d90ac7504be694471ee66e70d0d5"], "first": {"href": "https://internal.transit.cloud.ibm.com/v1/ops/customer_accounts"}, "limit": 50, "next": {"href": "https://internal.transit.cloud.ibm.com/v1/ops/customer_accounts?start=N2VlOWQxODM0ZTNjZmNhZmMyN2Q3NzZkMzE3NDMwZWY=", "start": "N2VlOWQxODM0ZTNjZmNhZmMyN2Q3NzZkMzE3NDMwZWY="}, "total_count": 1840}`)
				}))
			})
			It(`Invoke ListCustomerAccountsOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the ListCustomerAccountsOpsOptions model
				listCustomerAccountsOpsOptionsModel := new(transitgatewayapisv1.ListCustomerAccountsOpsOptions)
				listCustomerAccountsOpsOptionsModel.Start = core.StringPtr("testString")
				listCustomerAccountsOpsOptionsModel.Limit = core.Int64Ptr(int64(50))
				listCustomerAccountsOpsOptionsModel.LocationName = core.StringPtr("testString")
				listCustomerAccountsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.ListCustomerAccountsOpsWithContext(ctx, listCustomerAccountsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.ListCustomerAccountsOps(listCustomerAccountsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.ListCustomerAccountsOpsWithContext(ctx, listCustomerAccountsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listCustomerAccountsOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(50))}))
					Expect(req.URL.Query()["location_name"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"customer_accounts": [{"ibmcloud_account_id": "28e4d90ac7504be694471ee66e70d0d5", "softlayer_account_ids": ["2027758"]}], "customer_accounts_errored": ["28e4d90ac7504be694471ee66e70d0d5"], "first": {"href": "https://internal.transit.cloud.ibm.com/v1/ops/customer_accounts"}, "limit": 50, "next": {"href": "https://internal.transit.cloud.ibm.com/v1/ops/customer_accounts?start=N2VlOWQxODM0ZTNjZmNhZmMyN2Q3NzZkMzE3NDMwZWY=", "start": "N2VlOWQxODM0ZTNjZmNhZmMyN2Q3NzZkMzE3NDMwZWY="}, "total_count": 1840}`)
				}))
			})
			It(`Invoke ListCustomerAccountsOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.ListCustomerAccountsOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListCustomerAccountsOpsOptions model
				listCustomerAccountsOpsOptionsModel := new(transitgatewayapisv1.ListCustomerAccountsOpsOptions)
				listCustomerAccountsOpsOptionsModel.Start = core.StringPtr("testString")
				listCustomerAccountsOpsOptionsModel.Limit = core.Int64Ptr(int64(50))
				listCustomerAccountsOpsOptionsModel.LocationName = core.StringPtr("testString")
				listCustomerAccountsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.ListCustomerAccountsOps(listCustomerAccountsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListCustomerAccountsOps with error: Operation request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListCustomerAccountsOpsOptions model
				listCustomerAccountsOpsOptionsModel := new(transitgatewayapisv1.ListCustomerAccountsOpsOptions)
				listCustomerAccountsOpsOptionsModel.Start = core.StringPtr("testString")
				listCustomerAccountsOpsOptionsModel.Limit = core.Int64Ptr(int64(50))
				listCustomerAccountsOpsOptionsModel.LocationName = core.StringPtr("testString")
				listCustomerAccountsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.ListCustomerAccountsOps(listCustomerAccountsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListCustomerAccountsOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListCustomerAccountsOpsOptions model
				listCustomerAccountsOpsOptionsModel := new(transitgatewayapisv1.ListCustomerAccountsOpsOptions)
				listCustomerAccountsOpsOptionsModel.Start = core.StringPtr("testString")
				listCustomerAccountsOpsOptionsModel.Limit = core.Int64Ptr(int64(50))
				listCustomerAccountsOpsOptionsModel.LocationName = core.StringPtr("testString")
				listCustomerAccountsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.ListCustomerAccountsOps(listCustomerAccountsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetCustomerAccountsOps(getCustomerAccountsOpsOptions *GetCustomerAccountsOpsOptions) - Operation response error`, func() {
		version := "testString"
		getCustomerAccountsOpsPath := "/ops/customer_accounts/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCustomerAccountsOpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetCustomerAccountsOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetCustomerAccountsOpsOptions model
				getCustomerAccountsOpsOptionsModel := new(transitgatewayapisv1.GetCustomerAccountsOpsOptions)
				getCustomerAccountsOpsOptionsModel.CustomerAccountID = core.StringPtr("testString")
				getCustomerAccountsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.GetCustomerAccountsOps(getCustomerAccountsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.GetCustomerAccountsOps(getCustomerAccountsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetCustomerAccountsOps(getCustomerAccountsOpsOptions *GetCustomerAccountsOpsOptions)`, func() {
		version := "testString"
		getCustomerAccountsOpsPath := "/ops/customer_accounts/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCustomerAccountsOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"ibmcloud_account_id": "28e4d90ac7504be694471ee66e70d0d5", "softlayer_account_ids": ["2027758"]}`)
				}))
			})
			It(`Invoke GetCustomerAccountsOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the GetCustomerAccountsOpsOptions model
				getCustomerAccountsOpsOptionsModel := new(transitgatewayapisv1.GetCustomerAccountsOpsOptions)
				getCustomerAccountsOpsOptionsModel.CustomerAccountID = core.StringPtr("testString")
				getCustomerAccountsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.GetCustomerAccountsOpsWithContext(ctx, getCustomerAccountsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.GetCustomerAccountsOps(getCustomerAccountsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.GetCustomerAccountsOpsWithContext(ctx, getCustomerAccountsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCustomerAccountsOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"ibmcloud_account_id": "28e4d90ac7504be694471ee66e70d0d5", "softlayer_account_ids": ["2027758"]}`)
				}))
			})
			It(`Invoke GetCustomerAccountsOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.GetCustomerAccountsOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetCustomerAccountsOpsOptions model
				getCustomerAccountsOpsOptionsModel := new(transitgatewayapisv1.GetCustomerAccountsOpsOptions)
				getCustomerAccountsOpsOptionsModel.CustomerAccountID = core.StringPtr("testString")
				getCustomerAccountsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.GetCustomerAccountsOps(getCustomerAccountsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetCustomerAccountsOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetCustomerAccountsOpsOptions model
				getCustomerAccountsOpsOptionsModel := new(transitgatewayapisv1.GetCustomerAccountsOpsOptions)
				getCustomerAccountsOpsOptionsModel.CustomerAccountID = core.StringPtr("testString")
				getCustomerAccountsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.GetCustomerAccountsOps(getCustomerAccountsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetCustomerAccountsOpsOptions model with no property values
				getCustomerAccountsOpsOptionsModelNew := new(transitgatewayapisv1.GetCustomerAccountsOpsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.GetCustomerAccountsOps(getCustomerAccountsOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetCustomerAccountsOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetCustomerAccountsOpsOptions model
				getCustomerAccountsOpsOptionsModel := new(transitgatewayapisv1.GetCustomerAccountsOpsOptions)
				getCustomerAccountsOpsOptionsModel.CustomerAccountID = core.StringPtr("testString")
				getCustomerAccountsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.GetCustomerAccountsOps(getCustomerAccountsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateTransitAccountActionsOps(createTransitAccountActionsOpsOptions *CreateTransitAccountActionsOpsOptions) - Operation response error`, func() {
		version := "testString"
		createTransitAccountActionsOpsPath := "/ops/customer_accounts/testString/actions"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createTransitAccountActionsOpsPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateTransitAccountActionsOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateTransitAccountActionsOpsOptions model
				createTransitAccountActionsOpsOptionsModel := new(transitgatewayapisv1.CreateTransitAccountActionsOpsOptions)
				createTransitAccountActionsOpsOptionsModel.CustomerAccountID = core.StringPtr("testString")
				createTransitAccountActionsOpsOptionsModel.Action = core.StringPtr("audit")
				createTransitAccountActionsOpsOptionsModel.EntryCrn = core.StringPtr("crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4")
				createTransitAccountActionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.CreateTransitAccountActionsOps(createTransitAccountActionsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.CreateTransitAccountActionsOps(createTransitAccountActionsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateTransitAccountActionsOps(createTransitAccountActionsOpsOptions *CreateTransitAccountActionsOpsOptions)`, func() {
		version := "testString"
		createTransitAccountActionsOpsPath := "/ops/customer_accounts/testString/actions"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createTransitAccountActionsOpsPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"rc_extra": [{"gateway_crn": "crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4"}], "rc_missing": [{"gateway_crn": "crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4"}], "rc_response": "Resource Controller entry created successfully.", "success": true}`)
				}))
			})
			It(`Invoke CreateTransitAccountActionsOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the CreateTransitAccountActionsOpsOptions model
				createTransitAccountActionsOpsOptionsModel := new(transitgatewayapisv1.CreateTransitAccountActionsOpsOptions)
				createTransitAccountActionsOpsOptionsModel.CustomerAccountID = core.StringPtr("testString")
				createTransitAccountActionsOpsOptionsModel.Action = core.StringPtr("audit")
				createTransitAccountActionsOpsOptionsModel.EntryCrn = core.StringPtr("crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4")
				createTransitAccountActionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.CreateTransitAccountActionsOpsWithContext(ctx, createTransitAccountActionsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.CreateTransitAccountActionsOps(createTransitAccountActionsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.CreateTransitAccountActionsOpsWithContext(ctx, createTransitAccountActionsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createTransitAccountActionsOpsPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"rc_extra": [{"gateway_crn": "crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4"}], "rc_missing": [{"gateway_crn": "crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4"}], "rc_response": "Resource Controller entry created successfully.", "success": true}`)
				}))
			})
			It(`Invoke CreateTransitAccountActionsOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.CreateTransitAccountActionsOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateTransitAccountActionsOpsOptions model
				createTransitAccountActionsOpsOptionsModel := new(transitgatewayapisv1.CreateTransitAccountActionsOpsOptions)
				createTransitAccountActionsOpsOptionsModel.CustomerAccountID = core.StringPtr("testString")
				createTransitAccountActionsOpsOptionsModel.Action = core.StringPtr("audit")
				createTransitAccountActionsOpsOptionsModel.EntryCrn = core.StringPtr("crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4")
				createTransitAccountActionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.CreateTransitAccountActionsOps(createTransitAccountActionsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateTransitAccountActionsOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateTransitAccountActionsOpsOptions model
				createTransitAccountActionsOpsOptionsModel := new(transitgatewayapisv1.CreateTransitAccountActionsOpsOptions)
				createTransitAccountActionsOpsOptionsModel.CustomerAccountID = core.StringPtr("testString")
				createTransitAccountActionsOpsOptionsModel.Action = core.StringPtr("audit")
				createTransitAccountActionsOpsOptionsModel.EntryCrn = core.StringPtr("crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4")
				createTransitAccountActionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.CreateTransitAccountActionsOps(createTransitAccountActionsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateTransitAccountActionsOpsOptions model with no property values
				createTransitAccountActionsOpsOptionsModelNew := new(transitgatewayapisv1.CreateTransitAccountActionsOpsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.CreateTransitAccountActionsOps(createTransitAccountActionsOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke CreateTransitAccountActionsOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateTransitAccountActionsOpsOptions model
				createTransitAccountActionsOpsOptionsModel := new(transitgatewayapisv1.CreateTransitAccountActionsOpsOptions)
				createTransitAccountActionsOpsOptionsModel.CustomerAccountID = core.StringPtr("testString")
				createTransitAccountActionsOpsOptionsModel.Action = core.StringPtr("audit")
				createTransitAccountActionsOpsOptionsModel.EntryCrn = core.StringPtr("crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4")
				createTransitAccountActionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.CreateTransitAccountActionsOps(createTransitAccountActionsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListCustomerAccountsFeatures(listCustomerAccountsFeaturesOptions *ListCustomerAccountsFeaturesOptions) - Operation response error`, func() {
		version := "testString"
		listCustomerAccountsFeaturesPath := "/ops/customer_accounts/testString/features"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listCustomerAccountsFeaturesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListCustomerAccountsFeatures with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListCustomerAccountsFeaturesOptions model
				listCustomerAccountsFeaturesOptionsModel := new(transitgatewayapisv1.ListCustomerAccountsFeaturesOptions)
				listCustomerAccountsFeaturesOptionsModel.CustomerAccountID = core.StringPtr("testString")
				listCustomerAccountsFeaturesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.ListCustomerAccountsFeatures(listCustomerAccountsFeaturesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.ListCustomerAccountsFeatures(listCustomerAccountsFeaturesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListCustomerAccountsFeatures(listCustomerAccountsFeaturesOptions *ListCustomerAccountsFeaturesOptions)`, func() {
		version := "testString"
		listCustomerAccountsFeaturesPath := "/ops/customer_accounts/testString/features"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listCustomerAccountsFeaturesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"features": [{"generally_available": false, "name": "gateway_v2", "account_ids": ["abcbd7fa2bc3406ea70ba4ade8123456"], "created_at": "2019-01-01T12:00:00.000Z", "database_id": 234, "denylist_account_ids": ["cccfa2bc3406ea70ba4ade0000001"], "updated_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListCustomerAccountsFeatures successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the ListCustomerAccountsFeaturesOptions model
				listCustomerAccountsFeaturesOptionsModel := new(transitgatewayapisv1.ListCustomerAccountsFeaturesOptions)
				listCustomerAccountsFeaturesOptionsModel.CustomerAccountID = core.StringPtr("testString")
				listCustomerAccountsFeaturesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.ListCustomerAccountsFeaturesWithContext(ctx, listCustomerAccountsFeaturesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.ListCustomerAccountsFeatures(listCustomerAccountsFeaturesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.ListCustomerAccountsFeaturesWithContext(ctx, listCustomerAccountsFeaturesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listCustomerAccountsFeaturesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"features": [{"generally_available": false, "name": "gateway_v2", "account_ids": ["abcbd7fa2bc3406ea70ba4ade8123456"], "created_at": "2019-01-01T12:00:00.000Z", "database_id": 234, "denylist_account_ids": ["cccfa2bc3406ea70ba4ade0000001"], "updated_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListCustomerAccountsFeatures successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.ListCustomerAccountsFeatures(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListCustomerAccountsFeaturesOptions model
				listCustomerAccountsFeaturesOptionsModel := new(transitgatewayapisv1.ListCustomerAccountsFeaturesOptions)
				listCustomerAccountsFeaturesOptionsModel.CustomerAccountID = core.StringPtr("testString")
				listCustomerAccountsFeaturesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.ListCustomerAccountsFeatures(listCustomerAccountsFeaturesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListCustomerAccountsFeatures with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListCustomerAccountsFeaturesOptions model
				listCustomerAccountsFeaturesOptionsModel := new(transitgatewayapisv1.ListCustomerAccountsFeaturesOptions)
				listCustomerAccountsFeaturesOptionsModel.CustomerAccountID = core.StringPtr("testString")
				listCustomerAccountsFeaturesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.ListCustomerAccountsFeatures(listCustomerAccountsFeaturesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListCustomerAccountsFeaturesOptions model with no property values
				listCustomerAccountsFeaturesOptionsModelNew := new(transitgatewayapisv1.ListCustomerAccountsFeaturesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.ListCustomerAccountsFeatures(listCustomerAccountsFeaturesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListCustomerAccountsFeatures successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListCustomerAccountsFeaturesOptions model
				listCustomerAccountsFeaturesOptionsModel := new(transitgatewayapisv1.ListCustomerAccountsFeaturesOptions)
				listCustomerAccountsFeaturesOptionsModel.CustomerAccountID = core.StringPtr("testString")
				listCustomerAccountsFeaturesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.ListCustomerAccountsFeatures(listCustomerAccountsFeaturesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListGatewayLocations(listGatewayLocationsOptions *ListGatewayLocationsOptions) - Operation response error`, func() {
		version := "testString"
		listGatewayLocationsPath := "/locations"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listGatewayLocationsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListGatewayLocations with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListGatewayLocationsOptions model
				listGatewayLocationsOptionsModel := new(transitgatewayapisv1.ListGatewayLocationsOptions)
				listGatewayLocationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.ListGatewayLocations(listGatewayLocationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.ListGatewayLocations(listGatewayLocationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListGatewayLocations(listGatewayLocationsOptions *ListGatewayLocationsOptions)`, func() {
		version := "testString"
		listGatewayLocationsPath := "/locations"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listGatewayLocationsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"locations": [{"billing_location": "us", "name": "us-south", "type": "region"}]}`)
				}))
			})
			It(`Invoke ListGatewayLocations successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the ListGatewayLocationsOptions model
				listGatewayLocationsOptionsModel := new(transitgatewayapisv1.ListGatewayLocationsOptions)
				listGatewayLocationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.ListGatewayLocationsWithContext(ctx, listGatewayLocationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.ListGatewayLocations(listGatewayLocationsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.ListGatewayLocationsWithContext(ctx, listGatewayLocationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listGatewayLocationsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"locations": [{"billing_location": "us", "name": "us-south", "type": "region"}]}`)
				}))
			})
			It(`Invoke ListGatewayLocations successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.ListGatewayLocations(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListGatewayLocationsOptions model
				listGatewayLocationsOptionsModel := new(transitgatewayapisv1.ListGatewayLocationsOptions)
				listGatewayLocationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.ListGatewayLocations(listGatewayLocationsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListGatewayLocations with error: Operation request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListGatewayLocationsOptions model
				listGatewayLocationsOptionsModel := new(transitgatewayapisv1.ListGatewayLocationsOptions)
				listGatewayLocationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.ListGatewayLocations(listGatewayLocationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListGatewayLocations successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListGatewayLocationsOptions model
				listGatewayLocationsOptionsModel := new(transitgatewayapisv1.ListGatewayLocationsOptions)
				listGatewayLocationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.ListGatewayLocations(listGatewayLocationsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetGatewayLocation(getGatewayLocationOptions *GetGatewayLocationOptions) - Operation response error`, func() {
		version := "testString"
		getGatewayLocationPath := "/locations/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getGatewayLocationPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetGatewayLocation with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetGatewayLocationOptions model
				getGatewayLocationOptionsModel := new(transitgatewayapisv1.GetGatewayLocationOptions)
				getGatewayLocationOptionsModel.Name = core.StringPtr("testString")
				getGatewayLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.GetGatewayLocation(getGatewayLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.GetGatewayLocation(getGatewayLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetGatewayLocation(getGatewayLocationOptions *GetGatewayLocationOptions)`, func() {
		version := "testString"
		getGatewayLocationPath := "/locations/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getGatewayLocationPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"billing_location": "us", "name": "us-south", "type": "region", "local_connection_locations": [{"display_name": "Dallas", "name": "us-south", "supported_connection_types": ["SupportedConnectionTypes"], "type": "region"}], "zones": [{"zones": [{"name": "us-south-1"}]}]}`)
				}))
			})
			It(`Invoke GetGatewayLocation successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the GetGatewayLocationOptions model
				getGatewayLocationOptionsModel := new(transitgatewayapisv1.GetGatewayLocationOptions)
				getGatewayLocationOptionsModel.Name = core.StringPtr("testString")
				getGatewayLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.GetGatewayLocationWithContext(ctx, getGatewayLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.GetGatewayLocation(getGatewayLocationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.GetGatewayLocationWithContext(ctx, getGatewayLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getGatewayLocationPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"billing_location": "us", "name": "us-south", "type": "region", "local_connection_locations": [{"display_name": "Dallas", "name": "us-south", "supported_connection_types": ["SupportedConnectionTypes"], "type": "region"}], "zones": [{"zones": [{"name": "us-south-1"}]}]}`)
				}))
			})
			It(`Invoke GetGatewayLocation successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.GetGatewayLocation(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetGatewayLocationOptions model
				getGatewayLocationOptionsModel := new(transitgatewayapisv1.GetGatewayLocationOptions)
				getGatewayLocationOptionsModel.Name = core.StringPtr("testString")
				getGatewayLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.GetGatewayLocation(getGatewayLocationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetGatewayLocation with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetGatewayLocationOptions model
				getGatewayLocationOptionsModel := new(transitgatewayapisv1.GetGatewayLocationOptions)
				getGatewayLocationOptionsModel.Name = core.StringPtr("testString")
				getGatewayLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.GetGatewayLocation(getGatewayLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetGatewayLocationOptions model with no property values
				getGatewayLocationOptionsModelNew := new(transitgatewayapisv1.GetGatewayLocationOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.GetGatewayLocation(getGatewayLocationOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetGatewayLocation successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetGatewayLocationOptions model
				getGatewayLocationOptionsModel := new(transitgatewayapisv1.GetGatewayLocationOptions)
				getGatewayLocationOptionsModel.Name = core.StringPtr("testString")
				getGatewayLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.GetGatewayLocation(getGatewayLocationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListGatewayLocationsOps(listGatewayLocationsOpsOptions *ListGatewayLocationsOpsOptions) - Operation response error`, func() {
		version := "testString"
		listGatewayLocationsOpsPath := "/ops/locations"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listGatewayLocationsOpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListGatewayLocationsOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListGatewayLocationsOpsOptions model
				listGatewayLocationsOpsOptionsModel := new(transitgatewayapisv1.ListGatewayLocationsOpsOptions)
				listGatewayLocationsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.ListGatewayLocationsOps(listGatewayLocationsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.ListGatewayLocationsOps(listGatewayLocationsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListGatewayLocationsOps(listGatewayLocationsOpsOptions *ListGatewayLocationsOpsOptions)`, func() {
		version := "testString"
		listGatewayLocationsOpsPath := "/ops/locations"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listGatewayLocationsOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"locations": [{"billing_location": "us", "created_at": "2019-01-01T12:00:00.000Z", "database_id": 234, "hidden": false, "name": "us-south", "type": "region", "updated_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListGatewayLocationsOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the ListGatewayLocationsOpsOptions model
				listGatewayLocationsOpsOptionsModel := new(transitgatewayapisv1.ListGatewayLocationsOpsOptions)
				listGatewayLocationsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.ListGatewayLocationsOpsWithContext(ctx, listGatewayLocationsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.ListGatewayLocationsOps(listGatewayLocationsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.ListGatewayLocationsOpsWithContext(ctx, listGatewayLocationsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listGatewayLocationsOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"locations": [{"billing_location": "us", "created_at": "2019-01-01T12:00:00.000Z", "database_id": 234, "hidden": false, "name": "us-south", "type": "region", "updated_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListGatewayLocationsOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.ListGatewayLocationsOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListGatewayLocationsOpsOptions model
				listGatewayLocationsOpsOptionsModel := new(transitgatewayapisv1.ListGatewayLocationsOpsOptions)
				listGatewayLocationsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.ListGatewayLocationsOps(listGatewayLocationsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListGatewayLocationsOps with error: Operation request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListGatewayLocationsOpsOptions model
				listGatewayLocationsOpsOptionsModel := new(transitgatewayapisv1.ListGatewayLocationsOpsOptions)
				listGatewayLocationsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.ListGatewayLocationsOps(listGatewayLocationsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListGatewayLocationsOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListGatewayLocationsOpsOptions model
				listGatewayLocationsOpsOptionsModel := new(transitgatewayapisv1.ListGatewayLocationsOpsOptions)
				listGatewayLocationsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.ListGatewayLocationsOps(listGatewayLocationsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateGatewayLocation(createGatewayLocationOptions *CreateGatewayLocationOptions) - Operation response error`, func() {
		version := "testString"
		createGatewayLocationPath := "/ops/locations"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createGatewayLocationPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateGatewayLocation with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateGatewayLocationOptions model
				createGatewayLocationOptionsModel := new(transitgatewayapisv1.CreateGatewayLocationOptions)
				createGatewayLocationOptionsModel.BillingLocation = core.StringPtr("us")
				createGatewayLocationOptionsModel.Name = core.StringPtr("us-south")
				createGatewayLocationOptionsModel.Type = core.StringPtr("region")
				createGatewayLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.CreateGatewayLocation(createGatewayLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.CreateGatewayLocation(createGatewayLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateGatewayLocation(createGatewayLocationOptions *CreateGatewayLocationOptions)`, func() {
		version := "testString"
		createGatewayLocationPath := "/ops/locations"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createGatewayLocationPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"billing_location": "us", "created_at": "2019-01-01T12:00:00.000Z", "database_id": 234, "hidden": false, "name": "us-south", "type": "region", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke CreateGatewayLocation successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the CreateGatewayLocationOptions model
				createGatewayLocationOptionsModel := new(transitgatewayapisv1.CreateGatewayLocationOptions)
				createGatewayLocationOptionsModel.BillingLocation = core.StringPtr("us")
				createGatewayLocationOptionsModel.Name = core.StringPtr("us-south")
				createGatewayLocationOptionsModel.Type = core.StringPtr("region")
				createGatewayLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.CreateGatewayLocationWithContext(ctx, createGatewayLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.CreateGatewayLocation(createGatewayLocationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.CreateGatewayLocationWithContext(ctx, createGatewayLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createGatewayLocationPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"billing_location": "us", "created_at": "2019-01-01T12:00:00.000Z", "database_id": 234, "hidden": false, "name": "us-south", "type": "region", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke CreateGatewayLocation successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.CreateGatewayLocation(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateGatewayLocationOptions model
				createGatewayLocationOptionsModel := new(transitgatewayapisv1.CreateGatewayLocationOptions)
				createGatewayLocationOptionsModel.BillingLocation = core.StringPtr("us")
				createGatewayLocationOptionsModel.Name = core.StringPtr("us-south")
				createGatewayLocationOptionsModel.Type = core.StringPtr("region")
				createGatewayLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.CreateGatewayLocation(createGatewayLocationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateGatewayLocation with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateGatewayLocationOptions model
				createGatewayLocationOptionsModel := new(transitgatewayapisv1.CreateGatewayLocationOptions)
				createGatewayLocationOptionsModel.BillingLocation = core.StringPtr("us")
				createGatewayLocationOptionsModel.Name = core.StringPtr("us-south")
				createGatewayLocationOptionsModel.Type = core.StringPtr("region")
				createGatewayLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.CreateGatewayLocation(createGatewayLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateGatewayLocationOptions model with no property values
				createGatewayLocationOptionsModelNew := new(transitgatewayapisv1.CreateGatewayLocationOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.CreateGatewayLocation(createGatewayLocationOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateGatewayLocation successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateGatewayLocationOptions model
				createGatewayLocationOptionsModel := new(transitgatewayapisv1.CreateGatewayLocationOptions)
				createGatewayLocationOptionsModel.BillingLocation = core.StringPtr("us")
				createGatewayLocationOptionsModel.Name = core.StringPtr("us-south")
				createGatewayLocationOptionsModel.Type = core.StringPtr("region")
				createGatewayLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.CreateGatewayLocation(createGatewayLocationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteGatewayLocation(deleteGatewayLocationOptions *DeleteGatewayLocationOptions)`, func() {
		version := "testString"
		deleteGatewayLocationPath := "/ops/locations/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteGatewayLocationPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteGatewayLocation successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := transitGatewayApisService.DeleteGatewayLocation(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteGatewayLocationOptions model
				deleteGatewayLocationOptionsModel := new(transitgatewayapisv1.DeleteGatewayLocationOptions)
				deleteGatewayLocationOptionsModel.LocationName = core.StringPtr("testString")
				deleteGatewayLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = transitGatewayApisService.DeleteGatewayLocation(deleteGatewayLocationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteGatewayLocation with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the DeleteGatewayLocationOptions model
				deleteGatewayLocationOptionsModel := new(transitgatewayapisv1.DeleteGatewayLocationOptions)
				deleteGatewayLocationOptionsModel.LocationName = core.StringPtr("testString")
				deleteGatewayLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := transitGatewayApisService.DeleteGatewayLocation(deleteGatewayLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteGatewayLocationOptions model with no property values
				deleteGatewayLocationOptionsModelNew := new(transitgatewayapisv1.DeleteGatewayLocationOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = transitGatewayApisService.DeleteGatewayLocation(deleteGatewayLocationOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetGatewayLocationOps(getGatewayLocationOpsOptions *GetGatewayLocationOpsOptions) - Operation response error`, func() {
		version := "testString"
		getGatewayLocationOpsPath := "/ops/locations/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getGatewayLocationOpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetGatewayLocationOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetGatewayLocationOpsOptions model
				getGatewayLocationOpsOptionsModel := new(transitgatewayapisv1.GetGatewayLocationOpsOptions)
				getGatewayLocationOpsOptionsModel.LocationName = core.StringPtr("testString")
				getGatewayLocationOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.GetGatewayLocationOps(getGatewayLocationOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.GetGatewayLocationOps(getGatewayLocationOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetGatewayLocationOps(getGatewayLocationOpsOptions *GetGatewayLocationOpsOptions)`, func() {
		version := "testString"
		getGatewayLocationOpsPath := "/ops/locations/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getGatewayLocationOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"billing_location": "us", "created_at": "2019-01-01T12:00:00.000Z", "database_id": 234, "hidden": false, "name": "us-south", "type": "region", "updated_at": "2019-01-01T12:00:00.000Z", "zones": [{"zones": [{"name": "us-south-1"}]}]}`)
				}))
			})
			It(`Invoke GetGatewayLocationOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the GetGatewayLocationOpsOptions model
				getGatewayLocationOpsOptionsModel := new(transitgatewayapisv1.GetGatewayLocationOpsOptions)
				getGatewayLocationOpsOptionsModel.LocationName = core.StringPtr("testString")
				getGatewayLocationOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.GetGatewayLocationOpsWithContext(ctx, getGatewayLocationOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.GetGatewayLocationOps(getGatewayLocationOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.GetGatewayLocationOpsWithContext(ctx, getGatewayLocationOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getGatewayLocationOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"billing_location": "us", "created_at": "2019-01-01T12:00:00.000Z", "database_id": 234, "hidden": false, "name": "us-south", "type": "region", "updated_at": "2019-01-01T12:00:00.000Z", "zones": [{"zones": [{"name": "us-south-1"}]}]}`)
				}))
			})
			It(`Invoke GetGatewayLocationOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.GetGatewayLocationOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetGatewayLocationOpsOptions model
				getGatewayLocationOpsOptionsModel := new(transitgatewayapisv1.GetGatewayLocationOpsOptions)
				getGatewayLocationOpsOptionsModel.LocationName = core.StringPtr("testString")
				getGatewayLocationOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.GetGatewayLocationOps(getGatewayLocationOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetGatewayLocationOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetGatewayLocationOpsOptions model
				getGatewayLocationOpsOptionsModel := new(transitgatewayapisv1.GetGatewayLocationOpsOptions)
				getGatewayLocationOpsOptionsModel.LocationName = core.StringPtr("testString")
				getGatewayLocationOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.GetGatewayLocationOps(getGatewayLocationOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetGatewayLocationOpsOptions model with no property values
				getGatewayLocationOpsOptionsModelNew := new(transitgatewayapisv1.GetGatewayLocationOpsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.GetGatewayLocationOps(getGatewayLocationOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetGatewayLocationOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetGatewayLocationOpsOptions model
				getGatewayLocationOpsOptionsModel := new(transitgatewayapisv1.GetGatewayLocationOpsOptions)
				getGatewayLocationOpsOptionsModel.LocationName = core.StringPtr("testString")
				getGatewayLocationOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.GetGatewayLocationOps(getGatewayLocationOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateGatewayLocation(updateGatewayLocationOptions *UpdateGatewayLocationOptions) - Operation response error`, func() {
		version := "testString"
		updateGatewayLocationPath := "/ops/locations/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateGatewayLocationPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateGatewayLocation with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the UpdateGatewayLocationOptions model
				updateGatewayLocationOptionsModel := new(transitgatewayapisv1.UpdateGatewayLocationOptions)
				updateGatewayLocationOptionsModel.LocationName = core.StringPtr("testString")
				updateGatewayLocationOptionsModel.BillingLocation = core.StringPtr("us")
				updateGatewayLocationOptionsModel.Hidden = core.BoolPtr(false)
				updateGatewayLocationOptionsModel.Name = core.StringPtr("us-south")
				updateGatewayLocationOptionsModel.Type = core.StringPtr("region")
				updateGatewayLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.UpdateGatewayLocation(updateGatewayLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.UpdateGatewayLocation(updateGatewayLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateGatewayLocation(updateGatewayLocationOptions *UpdateGatewayLocationOptions)`, func() {
		version := "testString"
		updateGatewayLocationPath := "/ops/locations/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateGatewayLocationPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"billing_location": "us", "created_at": "2019-01-01T12:00:00.000Z", "database_id": 234, "hidden": false, "name": "us-south", "type": "region", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke UpdateGatewayLocation successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the UpdateGatewayLocationOptions model
				updateGatewayLocationOptionsModel := new(transitgatewayapisv1.UpdateGatewayLocationOptions)
				updateGatewayLocationOptionsModel.LocationName = core.StringPtr("testString")
				updateGatewayLocationOptionsModel.BillingLocation = core.StringPtr("us")
				updateGatewayLocationOptionsModel.Hidden = core.BoolPtr(false)
				updateGatewayLocationOptionsModel.Name = core.StringPtr("us-south")
				updateGatewayLocationOptionsModel.Type = core.StringPtr("region")
				updateGatewayLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.UpdateGatewayLocationWithContext(ctx, updateGatewayLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.UpdateGatewayLocation(updateGatewayLocationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.UpdateGatewayLocationWithContext(ctx, updateGatewayLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateGatewayLocationPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"billing_location": "us", "created_at": "2019-01-01T12:00:00.000Z", "database_id": 234, "hidden": false, "name": "us-south", "type": "region", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke UpdateGatewayLocation successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.UpdateGatewayLocation(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateGatewayLocationOptions model
				updateGatewayLocationOptionsModel := new(transitgatewayapisv1.UpdateGatewayLocationOptions)
				updateGatewayLocationOptionsModel.LocationName = core.StringPtr("testString")
				updateGatewayLocationOptionsModel.BillingLocation = core.StringPtr("us")
				updateGatewayLocationOptionsModel.Hidden = core.BoolPtr(false)
				updateGatewayLocationOptionsModel.Name = core.StringPtr("us-south")
				updateGatewayLocationOptionsModel.Type = core.StringPtr("region")
				updateGatewayLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.UpdateGatewayLocation(updateGatewayLocationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateGatewayLocation with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the UpdateGatewayLocationOptions model
				updateGatewayLocationOptionsModel := new(transitgatewayapisv1.UpdateGatewayLocationOptions)
				updateGatewayLocationOptionsModel.LocationName = core.StringPtr("testString")
				updateGatewayLocationOptionsModel.BillingLocation = core.StringPtr("us")
				updateGatewayLocationOptionsModel.Hidden = core.BoolPtr(false)
				updateGatewayLocationOptionsModel.Name = core.StringPtr("us-south")
				updateGatewayLocationOptionsModel.Type = core.StringPtr("region")
				updateGatewayLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.UpdateGatewayLocation(updateGatewayLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateGatewayLocationOptions model with no property values
				updateGatewayLocationOptionsModelNew := new(transitgatewayapisv1.UpdateGatewayLocationOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.UpdateGatewayLocation(updateGatewayLocationOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateGatewayLocation successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the UpdateGatewayLocationOptions model
				updateGatewayLocationOptionsModel := new(transitgatewayapisv1.UpdateGatewayLocationOptions)
				updateGatewayLocationOptionsModel.LocationName = core.StringPtr("testString")
				updateGatewayLocationOptionsModel.BillingLocation = core.StringPtr("us")
				updateGatewayLocationOptionsModel.Hidden = core.BoolPtr(false)
				updateGatewayLocationOptionsModel.Name = core.StringPtr("us-south")
				updateGatewayLocationOptionsModel.Type = core.StringPtr("region")
				updateGatewayLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.UpdateGatewayLocation(updateGatewayLocationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListDataCentersOps(listDataCentersOpsOptions *ListDataCentersOpsOptions) - Operation response error`, func() {
		version := "testString"
		listDataCentersOpsPath := "/ops/locations/testString/data_centers"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listDataCentersOpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListDataCentersOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListDataCentersOpsOptions model
				listDataCentersOpsOptionsModel := new(transitgatewayapisv1.ListDataCentersOpsOptions)
				listDataCentersOpsOptionsModel.LocationName = core.StringPtr("testString")
				listDataCentersOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.ListDataCentersOps(listDataCentersOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.ListDataCentersOps(listDataCentersOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListDataCentersOps(listDataCentersOpsOptions *ListDataCentersOpsOptions)`, func() {
		version := "testString"
		listDataCentersOpsPath := "/ops/locations/testString/data_centers"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listDataCentersOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"data_centers": [{"created_at": "2019-01-01T12:00:00.000Z", "hidden": false, "name": "dal10", "target_device_quantity": 2, "tgr_bgp_asn": 4201065540, "updated_at": "2019-01-01T12:00:00.000Z", "zone_name": "us-south-1"}]}`)
				}))
			})
			It(`Invoke ListDataCentersOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the ListDataCentersOpsOptions model
				listDataCentersOpsOptionsModel := new(transitgatewayapisv1.ListDataCentersOpsOptions)
				listDataCentersOpsOptionsModel.LocationName = core.StringPtr("testString")
				listDataCentersOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.ListDataCentersOpsWithContext(ctx, listDataCentersOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.ListDataCentersOps(listDataCentersOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.ListDataCentersOpsWithContext(ctx, listDataCentersOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listDataCentersOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"data_centers": [{"created_at": "2019-01-01T12:00:00.000Z", "hidden": false, "name": "dal10", "target_device_quantity": 2, "tgr_bgp_asn": 4201065540, "updated_at": "2019-01-01T12:00:00.000Z", "zone_name": "us-south-1"}]}`)
				}))
			})
			It(`Invoke ListDataCentersOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.ListDataCentersOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListDataCentersOpsOptions model
				listDataCentersOpsOptionsModel := new(transitgatewayapisv1.ListDataCentersOpsOptions)
				listDataCentersOpsOptionsModel.LocationName = core.StringPtr("testString")
				listDataCentersOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.ListDataCentersOps(listDataCentersOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListDataCentersOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListDataCentersOpsOptions model
				listDataCentersOpsOptionsModel := new(transitgatewayapisv1.ListDataCentersOpsOptions)
				listDataCentersOpsOptionsModel.LocationName = core.StringPtr("testString")
				listDataCentersOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.ListDataCentersOps(listDataCentersOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListDataCentersOpsOptions model with no property values
				listDataCentersOpsOptionsModelNew := new(transitgatewayapisv1.ListDataCentersOpsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.ListDataCentersOps(listDataCentersOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListDataCentersOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListDataCentersOpsOptions model
				listDataCentersOpsOptionsModel := new(transitgatewayapisv1.ListDataCentersOpsOptions)
				listDataCentersOpsOptionsModel.LocationName = core.StringPtr("testString")
				listDataCentersOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.ListDataCentersOps(listDataCentersOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateDataCenterOps(createDataCenterOpsOptions *CreateDataCenterOpsOptions) - Operation response error`, func() {
		version := "testString"
		createDataCenterOpsPath := "/ops/locations/testString/data_centers"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createDataCenterOpsPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateDataCenterOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateDataCenterOpsOptions model
				createDataCenterOpsOptionsModel := new(transitgatewayapisv1.CreateDataCenterOpsOptions)
				createDataCenterOpsOptionsModel.LocationName = core.StringPtr("testString")
				createDataCenterOpsOptionsModel.Hidden = core.BoolPtr(false)
				createDataCenterOpsOptionsModel.Name = core.StringPtr("dal10")
				createDataCenterOpsOptionsModel.TargetDeviceQuantity = core.Int64Ptr(int64(2))
				createDataCenterOpsOptionsModel.TgrBgpAsn = core.Int64Ptr(int64(4201065540))
				createDataCenterOpsOptionsModel.ZoneName = core.StringPtr("us-south-1")
				createDataCenterOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.CreateDataCenterOps(createDataCenterOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.CreateDataCenterOps(createDataCenterOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateDataCenterOps(createDataCenterOpsOptions *CreateDataCenterOpsOptions)`, func() {
		version := "testString"
		createDataCenterOpsPath := "/ops/locations/testString/data_centers"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createDataCenterOpsPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "hidden": false, "name": "dal10", "target_device_quantity": 2, "tgr_bgp_asn": 4201065540, "updated_at": "2019-01-01T12:00:00.000Z", "zone_name": "us-south-1"}`)
				}))
			})
			It(`Invoke CreateDataCenterOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the CreateDataCenterOpsOptions model
				createDataCenterOpsOptionsModel := new(transitgatewayapisv1.CreateDataCenterOpsOptions)
				createDataCenterOpsOptionsModel.LocationName = core.StringPtr("testString")
				createDataCenterOpsOptionsModel.Hidden = core.BoolPtr(false)
				createDataCenterOpsOptionsModel.Name = core.StringPtr("dal10")
				createDataCenterOpsOptionsModel.TargetDeviceQuantity = core.Int64Ptr(int64(2))
				createDataCenterOpsOptionsModel.TgrBgpAsn = core.Int64Ptr(int64(4201065540))
				createDataCenterOpsOptionsModel.ZoneName = core.StringPtr("us-south-1")
				createDataCenterOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.CreateDataCenterOpsWithContext(ctx, createDataCenterOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.CreateDataCenterOps(createDataCenterOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.CreateDataCenterOpsWithContext(ctx, createDataCenterOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createDataCenterOpsPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "hidden": false, "name": "dal10", "target_device_quantity": 2, "tgr_bgp_asn": 4201065540, "updated_at": "2019-01-01T12:00:00.000Z", "zone_name": "us-south-1"}`)
				}))
			})
			It(`Invoke CreateDataCenterOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.CreateDataCenterOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateDataCenterOpsOptions model
				createDataCenterOpsOptionsModel := new(transitgatewayapisv1.CreateDataCenterOpsOptions)
				createDataCenterOpsOptionsModel.LocationName = core.StringPtr("testString")
				createDataCenterOpsOptionsModel.Hidden = core.BoolPtr(false)
				createDataCenterOpsOptionsModel.Name = core.StringPtr("dal10")
				createDataCenterOpsOptionsModel.TargetDeviceQuantity = core.Int64Ptr(int64(2))
				createDataCenterOpsOptionsModel.TgrBgpAsn = core.Int64Ptr(int64(4201065540))
				createDataCenterOpsOptionsModel.ZoneName = core.StringPtr("us-south-1")
				createDataCenterOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.CreateDataCenterOps(createDataCenterOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateDataCenterOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateDataCenterOpsOptions model
				createDataCenterOpsOptionsModel := new(transitgatewayapisv1.CreateDataCenterOpsOptions)
				createDataCenterOpsOptionsModel.LocationName = core.StringPtr("testString")
				createDataCenterOpsOptionsModel.Hidden = core.BoolPtr(false)
				createDataCenterOpsOptionsModel.Name = core.StringPtr("dal10")
				createDataCenterOpsOptionsModel.TargetDeviceQuantity = core.Int64Ptr(int64(2))
				createDataCenterOpsOptionsModel.TgrBgpAsn = core.Int64Ptr(int64(4201065540))
				createDataCenterOpsOptionsModel.ZoneName = core.StringPtr("us-south-1")
				createDataCenterOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.CreateDataCenterOps(createDataCenterOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateDataCenterOpsOptions model with no property values
				createDataCenterOpsOptionsModelNew := new(transitgatewayapisv1.CreateDataCenterOpsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.CreateDataCenterOps(createDataCenterOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateDataCenterOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateDataCenterOpsOptions model
				createDataCenterOpsOptionsModel := new(transitgatewayapisv1.CreateDataCenterOpsOptions)
				createDataCenterOpsOptionsModel.LocationName = core.StringPtr("testString")
				createDataCenterOpsOptionsModel.Hidden = core.BoolPtr(false)
				createDataCenterOpsOptionsModel.Name = core.StringPtr("dal10")
				createDataCenterOpsOptionsModel.TargetDeviceQuantity = core.Int64Ptr(int64(2))
				createDataCenterOpsOptionsModel.TgrBgpAsn = core.Int64Ptr(int64(4201065540))
				createDataCenterOpsOptionsModel.ZoneName = core.StringPtr("us-south-1")
				createDataCenterOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.CreateDataCenterOps(createDataCenterOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteDataCenterOps(deleteDataCenterOpsOptions *DeleteDataCenterOpsOptions)`, func() {
		version := "testString"
		deleteDataCenterOpsPath := "/ops/locations/testString/data_centers/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteDataCenterOpsPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteDataCenterOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := transitGatewayApisService.DeleteDataCenterOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteDataCenterOpsOptions model
				deleteDataCenterOpsOptionsModel := new(transitgatewayapisv1.DeleteDataCenterOpsOptions)
				deleteDataCenterOpsOptionsModel.LocationName = core.StringPtr("testString")
				deleteDataCenterOpsOptionsModel.DataCenterName = core.StringPtr("testString")
				deleteDataCenterOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = transitGatewayApisService.DeleteDataCenterOps(deleteDataCenterOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteDataCenterOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the DeleteDataCenterOpsOptions model
				deleteDataCenterOpsOptionsModel := new(transitgatewayapisv1.DeleteDataCenterOpsOptions)
				deleteDataCenterOpsOptionsModel.LocationName = core.StringPtr("testString")
				deleteDataCenterOpsOptionsModel.DataCenterName = core.StringPtr("testString")
				deleteDataCenterOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := transitGatewayApisService.DeleteDataCenterOps(deleteDataCenterOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteDataCenterOpsOptions model with no property values
				deleteDataCenterOpsOptionsModelNew := new(transitgatewayapisv1.DeleteDataCenterOpsOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = transitGatewayApisService.DeleteDataCenterOps(deleteDataCenterOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateDataCenterOps(updateDataCenterOpsOptions *UpdateDataCenterOpsOptions) - Operation response error`, func() {
		version := "testString"
		updateDataCenterOpsPath := "/ops/locations/testString/data_centers/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateDataCenterOpsPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateDataCenterOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the UpdateDataCenterOpsOptions model
				updateDataCenterOpsOptionsModel := new(transitgatewayapisv1.UpdateDataCenterOpsOptions)
				updateDataCenterOpsOptionsModel.LocationName = core.StringPtr("testString")
				updateDataCenterOpsOptionsModel.DataCenterName = core.StringPtr("testString")
				updateDataCenterOpsOptionsModel.Hidden = core.BoolPtr(false)
				updateDataCenterOpsOptionsModel.TargetDeviceQuantity = core.Int64Ptr(int64(2))
				updateDataCenterOpsOptionsModel.TgrBgpAsn = core.Int64Ptr(int64(4201065540))
				updateDataCenterOpsOptionsModel.ZoneName = core.StringPtr("us-south-1")
				updateDataCenterOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.UpdateDataCenterOps(updateDataCenterOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.UpdateDataCenterOps(updateDataCenterOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateDataCenterOps(updateDataCenterOpsOptions *UpdateDataCenterOpsOptions)`, func() {
		version := "testString"
		updateDataCenterOpsPath := "/ops/locations/testString/data_centers/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateDataCenterOpsPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "hidden": false, "name": "dal10", "target_device_quantity": 2, "tgr_bgp_asn": 4201065540, "updated_at": "2019-01-01T12:00:00.000Z", "zone_name": "us-south-1"}`)
				}))
			})
			It(`Invoke UpdateDataCenterOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the UpdateDataCenterOpsOptions model
				updateDataCenterOpsOptionsModel := new(transitgatewayapisv1.UpdateDataCenterOpsOptions)
				updateDataCenterOpsOptionsModel.LocationName = core.StringPtr("testString")
				updateDataCenterOpsOptionsModel.DataCenterName = core.StringPtr("testString")
				updateDataCenterOpsOptionsModel.Hidden = core.BoolPtr(false)
				updateDataCenterOpsOptionsModel.TargetDeviceQuantity = core.Int64Ptr(int64(2))
				updateDataCenterOpsOptionsModel.TgrBgpAsn = core.Int64Ptr(int64(4201065540))
				updateDataCenterOpsOptionsModel.ZoneName = core.StringPtr("us-south-1")
				updateDataCenterOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.UpdateDataCenterOpsWithContext(ctx, updateDataCenterOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.UpdateDataCenterOps(updateDataCenterOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.UpdateDataCenterOpsWithContext(ctx, updateDataCenterOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateDataCenterOpsPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "hidden": false, "name": "dal10", "target_device_quantity": 2, "tgr_bgp_asn": 4201065540, "updated_at": "2019-01-01T12:00:00.000Z", "zone_name": "us-south-1"}`)
				}))
			})
			It(`Invoke UpdateDataCenterOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.UpdateDataCenterOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateDataCenterOpsOptions model
				updateDataCenterOpsOptionsModel := new(transitgatewayapisv1.UpdateDataCenterOpsOptions)
				updateDataCenterOpsOptionsModel.LocationName = core.StringPtr("testString")
				updateDataCenterOpsOptionsModel.DataCenterName = core.StringPtr("testString")
				updateDataCenterOpsOptionsModel.Hidden = core.BoolPtr(false)
				updateDataCenterOpsOptionsModel.TargetDeviceQuantity = core.Int64Ptr(int64(2))
				updateDataCenterOpsOptionsModel.TgrBgpAsn = core.Int64Ptr(int64(4201065540))
				updateDataCenterOpsOptionsModel.ZoneName = core.StringPtr("us-south-1")
				updateDataCenterOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.UpdateDataCenterOps(updateDataCenterOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateDataCenterOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the UpdateDataCenterOpsOptions model
				updateDataCenterOpsOptionsModel := new(transitgatewayapisv1.UpdateDataCenterOpsOptions)
				updateDataCenterOpsOptionsModel.LocationName = core.StringPtr("testString")
				updateDataCenterOpsOptionsModel.DataCenterName = core.StringPtr("testString")
				updateDataCenterOpsOptionsModel.Hidden = core.BoolPtr(false)
				updateDataCenterOpsOptionsModel.TargetDeviceQuantity = core.Int64Ptr(int64(2))
				updateDataCenterOpsOptionsModel.TgrBgpAsn = core.Int64Ptr(int64(4201065540))
				updateDataCenterOpsOptionsModel.ZoneName = core.StringPtr("us-south-1")
				updateDataCenterOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.UpdateDataCenterOps(updateDataCenterOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateDataCenterOpsOptions model with no property values
				updateDataCenterOpsOptionsModelNew := new(transitgatewayapisv1.UpdateDataCenterOpsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.UpdateDataCenterOps(updateDataCenterOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateDataCenterOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the UpdateDataCenterOpsOptions model
				updateDataCenterOpsOptionsModel := new(transitgatewayapisv1.UpdateDataCenterOpsOptions)
				updateDataCenterOpsOptionsModel.LocationName = core.StringPtr("testString")
				updateDataCenterOpsOptionsModel.DataCenterName = core.StringPtr("testString")
				updateDataCenterOpsOptionsModel.Hidden = core.BoolPtr(false)
				updateDataCenterOpsOptionsModel.TargetDeviceQuantity = core.Int64Ptr(int64(2))
				updateDataCenterOpsOptionsModel.TgrBgpAsn = core.Int64Ptr(int64(4201065540))
				updateDataCenterOpsOptionsModel.ZoneName = core.StringPtr("us-south-1")
				updateDataCenterOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.UpdateDataCenterOps(updateDataCenterOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListGatewayLocationDevices(listGatewayLocationDevicesOptions *ListGatewayLocationDevicesOptions) - Operation response error`, func() {
		version := "testString"
		listGatewayLocationDevicesPath := "/ops/locations/testString/gateway_devices"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listGatewayLocationDevicesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListGatewayLocationDevices with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListGatewayLocationDevicesOptions model
				listGatewayLocationDevicesOptionsModel := new(transitgatewayapisv1.ListGatewayLocationDevicesOptions)
				listGatewayLocationDevicesOptionsModel.LocationName = core.StringPtr("testString")
				listGatewayLocationDevicesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.ListGatewayLocationDevices(listGatewayLocationDevicesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.ListGatewayLocationDevices(listGatewayLocationDevicesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListGatewayLocationDevices(listGatewayLocationDevicesOptions *ListGatewayLocationDevicesOptions)`, func() {
		version := "testString"
		listGatewayLocationDevicesPath := "/ops/locations/testString/gateway_devices"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listGatewayLocationDevicesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"gateway_devices": [{"data_center": "dal10", "gateway_location": "us-south", "hostname": "tsr01dal01.softlayer.local", "created_at": "2017-07-21T17:32:28.000Z", "database_id": 234, "id": "ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "status": "up", "sync_status": "in_progress", "updated_at": "2017-07-21T17:32:28.000Z"}]}`)
				}))
			})
			It(`Invoke ListGatewayLocationDevices successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the ListGatewayLocationDevicesOptions model
				listGatewayLocationDevicesOptionsModel := new(transitgatewayapisv1.ListGatewayLocationDevicesOptions)
				listGatewayLocationDevicesOptionsModel.LocationName = core.StringPtr("testString")
				listGatewayLocationDevicesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.ListGatewayLocationDevicesWithContext(ctx, listGatewayLocationDevicesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.ListGatewayLocationDevices(listGatewayLocationDevicesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.ListGatewayLocationDevicesWithContext(ctx, listGatewayLocationDevicesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listGatewayLocationDevicesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"gateway_devices": [{"data_center": "dal10", "gateway_location": "us-south", "hostname": "tsr01dal01.softlayer.local", "created_at": "2017-07-21T17:32:28.000Z", "database_id": 234, "id": "ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "status": "up", "sync_status": "in_progress", "updated_at": "2017-07-21T17:32:28.000Z"}]}`)
				}))
			})
			It(`Invoke ListGatewayLocationDevices successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.ListGatewayLocationDevices(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListGatewayLocationDevicesOptions model
				listGatewayLocationDevicesOptionsModel := new(transitgatewayapisv1.ListGatewayLocationDevicesOptions)
				listGatewayLocationDevicesOptionsModel.LocationName = core.StringPtr("testString")
				listGatewayLocationDevicesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.ListGatewayLocationDevices(listGatewayLocationDevicesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListGatewayLocationDevices with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListGatewayLocationDevicesOptions model
				listGatewayLocationDevicesOptionsModel := new(transitgatewayapisv1.ListGatewayLocationDevicesOptions)
				listGatewayLocationDevicesOptionsModel.LocationName = core.StringPtr("testString")
				listGatewayLocationDevicesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.ListGatewayLocationDevices(listGatewayLocationDevicesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListGatewayLocationDevicesOptions model with no property values
				listGatewayLocationDevicesOptionsModelNew := new(transitgatewayapisv1.ListGatewayLocationDevicesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.ListGatewayLocationDevices(listGatewayLocationDevicesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListGatewayLocationDevices successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListGatewayLocationDevicesOptions model
				listGatewayLocationDevicesOptionsModel := new(transitgatewayapisv1.ListGatewayLocationDevicesOptions)
				listGatewayLocationDevicesOptionsModel.LocationName = core.StringPtr("testString")
				listGatewayLocationDevicesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.ListGatewayLocationDevices(listGatewayLocationDevicesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListLocationLocalConnectionLocationsOps(listLocationLocalConnectionLocationsOpsOptions *ListLocationLocalConnectionLocationsOpsOptions) - Operation response error`, func() {
		version := "testString"
		listLocationLocalConnectionLocationsOpsPath := "/ops/locations/testString/local_connection_locations"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listLocationLocalConnectionLocationsOpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListLocationLocalConnectionLocationsOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListLocationLocalConnectionLocationsOpsOptions model
				listLocationLocalConnectionLocationsOpsOptionsModel := new(transitgatewayapisv1.ListLocationLocalConnectionLocationsOpsOptions)
				listLocationLocalConnectionLocationsOpsOptionsModel.LocationName = core.StringPtr("testString")
				listLocationLocalConnectionLocationsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.ListLocationLocalConnectionLocationsOps(listLocationLocalConnectionLocationsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.ListLocationLocalConnectionLocationsOps(listLocationLocalConnectionLocationsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListLocationLocalConnectionLocationsOps(listLocationLocalConnectionLocationsOpsOptions *ListLocationLocalConnectionLocationsOpsOptions)`, func() {
		version := "testString"
		listLocationLocalConnectionLocationsOpsPath := "/ops/locations/testString/local_connection_locations"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listLocationLocalConnectionLocationsOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"local_connection_locations": [{"display_name": "Dallas", "name": "us-south", "supported_connection_types": ["SupportedConnectionTypes"], "type": "region", "created_at": "2019-01-01T12:00:00.000Z", "database_id": 234, "updated_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListLocationLocalConnectionLocationsOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the ListLocationLocalConnectionLocationsOpsOptions model
				listLocationLocalConnectionLocationsOpsOptionsModel := new(transitgatewayapisv1.ListLocationLocalConnectionLocationsOpsOptions)
				listLocationLocalConnectionLocationsOpsOptionsModel.LocationName = core.StringPtr("testString")
				listLocationLocalConnectionLocationsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.ListLocationLocalConnectionLocationsOpsWithContext(ctx, listLocationLocalConnectionLocationsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.ListLocationLocalConnectionLocationsOps(listLocationLocalConnectionLocationsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.ListLocationLocalConnectionLocationsOpsWithContext(ctx, listLocationLocalConnectionLocationsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listLocationLocalConnectionLocationsOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"local_connection_locations": [{"display_name": "Dallas", "name": "us-south", "supported_connection_types": ["SupportedConnectionTypes"], "type": "region", "created_at": "2019-01-01T12:00:00.000Z", "database_id": 234, "updated_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListLocationLocalConnectionLocationsOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.ListLocationLocalConnectionLocationsOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListLocationLocalConnectionLocationsOpsOptions model
				listLocationLocalConnectionLocationsOpsOptionsModel := new(transitgatewayapisv1.ListLocationLocalConnectionLocationsOpsOptions)
				listLocationLocalConnectionLocationsOpsOptionsModel.LocationName = core.StringPtr("testString")
				listLocationLocalConnectionLocationsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.ListLocationLocalConnectionLocationsOps(listLocationLocalConnectionLocationsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListLocationLocalConnectionLocationsOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListLocationLocalConnectionLocationsOpsOptions model
				listLocationLocalConnectionLocationsOpsOptionsModel := new(transitgatewayapisv1.ListLocationLocalConnectionLocationsOpsOptions)
				listLocationLocalConnectionLocationsOpsOptionsModel.LocationName = core.StringPtr("testString")
				listLocationLocalConnectionLocationsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.ListLocationLocalConnectionLocationsOps(listLocationLocalConnectionLocationsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListLocationLocalConnectionLocationsOpsOptions model with no property values
				listLocationLocalConnectionLocationsOpsOptionsModelNew := new(transitgatewayapisv1.ListLocationLocalConnectionLocationsOpsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.ListLocationLocalConnectionLocationsOps(listLocationLocalConnectionLocationsOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListLocationLocalConnectionLocationsOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListLocationLocalConnectionLocationsOpsOptions model
				listLocationLocalConnectionLocationsOpsOptionsModel := new(transitgatewayapisv1.ListLocationLocalConnectionLocationsOpsOptions)
				listLocationLocalConnectionLocationsOpsOptionsModel.LocationName = core.StringPtr("testString")
				listLocationLocalConnectionLocationsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.ListLocationLocalConnectionLocationsOps(listLocationLocalConnectionLocationsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateGatewayLocationLocalLocation(createGatewayLocationLocalLocationOptions *CreateGatewayLocationLocalLocationOptions) - Operation response error`, func() {
		version := "testString"
		createGatewayLocationLocalLocationPath := "/ops/locations/testString/local_connection_locations"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createGatewayLocationLocalLocationPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateGatewayLocationLocalLocation with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateGatewayLocationLocalLocationOptions model
				createGatewayLocationLocalLocationOptionsModel := new(transitgatewayapisv1.CreateGatewayLocationLocalLocationOptions)
				createGatewayLocationLocalLocationOptionsModel.LocationName = core.StringPtr("testString")
				createGatewayLocationLocalLocationOptionsModel.DisplayName = core.StringPtr("Dallas")
				createGatewayLocationLocalLocationOptionsModel.Name = core.StringPtr("us-south")
				createGatewayLocationLocalLocationOptionsModel.SupportedConnectionTypes = []string{"classic", "vpc", "directlink", "gre_tunnel", "power_virtual_server", "unbound_gre_tunnel"}
				createGatewayLocationLocalLocationOptionsModel.Type = core.StringPtr("region")
				createGatewayLocationLocalLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.CreateGatewayLocationLocalLocation(createGatewayLocationLocalLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.CreateGatewayLocationLocalLocation(createGatewayLocationLocalLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateGatewayLocationLocalLocation(createGatewayLocationLocalLocationOptions *CreateGatewayLocationLocalLocationOptions)`, func() {
		version := "testString"
		createGatewayLocationLocalLocationPath := "/ops/locations/testString/local_connection_locations"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createGatewayLocationLocalLocationPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"display_name": "Dallas", "name": "us-south", "supported_connection_types": ["SupportedConnectionTypes"], "type": "region", "created_at": "2019-01-01T12:00:00.000Z", "database_id": 234, "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke CreateGatewayLocationLocalLocation successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the CreateGatewayLocationLocalLocationOptions model
				createGatewayLocationLocalLocationOptionsModel := new(transitgatewayapisv1.CreateGatewayLocationLocalLocationOptions)
				createGatewayLocationLocalLocationOptionsModel.LocationName = core.StringPtr("testString")
				createGatewayLocationLocalLocationOptionsModel.DisplayName = core.StringPtr("Dallas")
				createGatewayLocationLocalLocationOptionsModel.Name = core.StringPtr("us-south")
				createGatewayLocationLocalLocationOptionsModel.SupportedConnectionTypes = []string{"classic", "vpc", "directlink", "gre_tunnel", "power_virtual_server", "unbound_gre_tunnel"}
				createGatewayLocationLocalLocationOptionsModel.Type = core.StringPtr("region")
				createGatewayLocationLocalLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.CreateGatewayLocationLocalLocationWithContext(ctx, createGatewayLocationLocalLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.CreateGatewayLocationLocalLocation(createGatewayLocationLocalLocationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.CreateGatewayLocationLocalLocationWithContext(ctx, createGatewayLocationLocalLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createGatewayLocationLocalLocationPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"display_name": "Dallas", "name": "us-south", "supported_connection_types": ["SupportedConnectionTypes"], "type": "region", "created_at": "2019-01-01T12:00:00.000Z", "database_id": 234, "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke CreateGatewayLocationLocalLocation successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.CreateGatewayLocationLocalLocation(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateGatewayLocationLocalLocationOptions model
				createGatewayLocationLocalLocationOptionsModel := new(transitgatewayapisv1.CreateGatewayLocationLocalLocationOptions)
				createGatewayLocationLocalLocationOptionsModel.LocationName = core.StringPtr("testString")
				createGatewayLocationLocalLocationOptionsModel.DisplayName = core.StringPtr("Dallas")
				createGatewayLocationLocalLocationOptionsModel.Name = core.StringPtr("us-south")
				createGatewayLocationLocalLocationOptionsModel.SupportedConnectionTypes = []string{"classic", "vpc", "directlink", "gre_tunnel", "power_virtual_server", "unbound_gre_tunnel"}
				createGatewayLocationLocalLocationOptionsModel.Type = core.StringPtr("region")
				createGatewayLocationLocalLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.CreateGatewayLocationLocalLocation(createGatewayLocationLocalLocationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateGatewayLocationLocalLocation with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateGatewayLocationLocalLocationOptions model
				createGatewayLocationLocalLocationOptionsModel := new(transitgatewayapisv1.CreateGatewayLocationLocalLocationOptions)
				createGatewayLocationLocalLocationOptionsModel.LocationName = core.StringPtr("testString")
				createGatewayLocationLocalLocationOptionsModel.DisplayName = core.StringPtr("Dallas")
				createGatewayLocationLocalLocationOptionsModel.Name = core.StringPtr("us-south")
				createGatewayLocationLocalLocationOptionsModel.SupportedConnectionTypes = []string{"classic", "vpc", "directlink", "gre_tunnel", "power_virtual_server", "unbound_gre_tunnel"}
				createGatewayLocationLocalLocationOptionsModel.Type = core.StringPtr("region")
				createGatewayLocationLocalLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.CreateGatewayLocationLocalLocation(createGatewayLocationLocalLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateGatewayLocationLocalLocationOptions model with no property values
				createGatewayLocationLocalLocationOptionsModelNew := new(transitgatewayapisv1.CreateGatewayLocationLocalLocationOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.CreateGatewayLocationLocalLocation(createGatewayLocationLocalLocationOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateGatewayLocationLocalLocation successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateGatewayLocationLocalLocationOptions model
				createGatewayLocationLocalLocationOptionsModel := new(transitgatewayapisv1.CreateGatewayLocationLocalLocationOptions)
				createGatewayLocationLocalLocationOptionsModel.LocationName = core.StringPtr("testString")
				createGatewayLocationLocalLocationOptionsModel.DisplayName = core.StringPtr("Dallas")
				createGatewayLocationLocalLocationOptionsModel.Name = core.StringPtr("us-south")
				createGatewayLocationLocalLocationOptionsModel.SupportedConnectionTypes = []string{"classic", "vpc", "directlink", "gre_tunnel", "power_virtual_server", "unbound_gre_tunnel"}
				createGatewayLocationLocalLocationOptionsModel.Type = core.StringPtr("region")
				createGatewayLocationLocalLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.CreateGatewayLocationLocalLocation(createGatewayLocationLocalLocationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteGatewayLocationLocalLocation(deleteGatewayLocationLocalLocationOptions *DeleteGatewayLocationLocalLocationOptions)`, func() {
		version := "testString"
		deleteGatewayLocationLocalLocationPath := "/ops/locations/testString/local_connection_locations/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteGatewayLocationLocalLocationPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteGatewayLocationLocalLocation successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := transitGatewayApisService.DeleteGatewayLocationLocalLocation(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteGatewayLocationLocalLocationOptions model
				deleteGatewayLocationLocalLocationOptionsModel := new(transitgatewayapisv1.DeleteGatewayLocationLocalLocationOptions)
				deleteGatewayLocationLocalLocationOptionsModel.LocationName = core.StringPtr("testString")
				deleteGatewayLocationLocalLocationOptionsModel.LocalLocationName = core.StringPtr("testString")
				deleteGatewayLocationLocalLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = transitGatewayApisService.DeleteGatewayLocationLocalLocation(deleteGatewayLocationLocalLocationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteGatewayLocationLocalLocation with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the DeleteGatewayLocationLocalLocationOptions model
				deleteGatewayLocationLocalLocationOptionsModel := new(transitgatewayapisv1.DeleteGatewayLocationLocalLocationOptions)
				deleteGatewayLocationLocalLocationOptionsModel.LocationName = core.StringPtr("testString")
				deleteGatewayLocationLocalLocationOptionsModel.LocalLocationName = core.StringPtr("testString")
				deleteGatewayLocationLocalLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := transitGatewayApisService.DeleteGatewayLocationLocalLocation(deleteGatewayLocationLocalLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteGatewayLocationLocalLocationOptions model with no property values
				deleteGatewayLocationLocalLocationOptionsModelNew := new(transitgatewayapisv1.DeleteGatewayLocationLocalLocationOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = transitGatewayApisService.DeleteGatewayLocationLocalLocation(deleteGatewayLocationLocalLocationOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetGatewayLocationLocalLocation(getGatewayLocationLocalLocationOptions *GetGatewayLocationLocalLocationOptions) - Operation response error`, func() {
		version := "testString"
		getGatewayLocationLocalLocationPath := "/ops/locations/testString/local_connection_locations/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getGatewayLocationLocalLocationPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetGatewayLocationLocalLocation with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetGatewayLocationLocalLocationOptions model
				getGatewayLocationLocalLocationOptionsModel := new(transitgatewayapisv1.GetGatewayLocationLocalLocationOptions)
				getGatewayLocationLocalLocationOptionsModel.LocationName = core.StringPtr("testString")
				getGatewayLocationLocalLocationOptionsModel.LocalLocationName = core.StringPtr("testString")
				getGatewayLocationLocalLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.GetGatewayLocationLocalLocation(getGatewayLocationLocalLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.GetGatewayLocationLocalLocation(getGatewayLocationLocalLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetGatewayLocationLocalLocation(getGatewayLocationLocalLocationOptions *GetGatewayLocationLocalLocationOptions)`, func() {
		version := "testString"
		getGatewayLocationLocalLocationPath := "/ops/locations/testString/local_connection_locations/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getGatewayLocationLocalLocationPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"display_name": "Dallas", "name": "us-south", "supported_connection_types": ["SupportedConnectionTypes"], "type": "region", "created_at": "2019-01-01T12:00:00.000Z", "database_id": 234, "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke GetGatewayLocationLocalLocation successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the GetGatewayLocationLocalLocationOptions model
				getGatewayLocationLocalLocationOptionsModel := new(transitgatewayapisv1.GetGatewayLocationLocalLocationOptions)
				getGatewayLocationLocalLocationOptionsModel.LocationName = core.StringPtr("testString")
				getGatewayLocationLocalLocationOptionsModel.LocalLocationName = core.StringPtr("testString")
				getGatewayLocationLocalLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.GetGatewayLocationLocalLocationWithContext(ctx, getGatewayLocationLocalLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.GetGatewayLocationLocalLocation(getGatewayLocationLocalLocationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.GetGatewayLocationLocalLocationWithContext(ctx, getGatewayLocationLocalLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getGatewayLocationLocalLocationPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"display_name": "Dallas", "name": "us-south", "supported_connection_types": ["SupportedConnectionTypes"], "type": "region", "created_at": "2019-01-01T12:00:00.000Z", "database_id": 234, "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke GetGatewayLocationLocalLocation successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.GetGatewayLocationLocalLocation(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetGatewayLocationLocalLocationOptions model
				getGatewayLocationLocalLocationOptionsModel := new(transitgatewayapisv1.GetGatewayLocationLocalLocationOptions)
				getGatewayLocationLocalLocationOptionsModel.LocationName = core.StringPtr("testString")
				getGatewayLocationLocalLocationOptionsModel.LocalLocationName = core.StringPtr("testString")
				getGatewayLocationLocalLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.GetGatewayLocationLocalLocation(getGatewayLocationLocalLocationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetGatewayLocationLocalLocation with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetGatewayLocationLocalLocationOptions model
				getGatewayLocationLocalLocationOptionsModel := new(transitgatewayapisv1.GetGatewayLocationLocalLocationOptions)
				getGatewayLocationLocalLocationOptionsModel.LocationName = core.StringPtr("testString")
				getGatewayLocationLocalLocationOptionsModel.LocalLocationName = core.StringPtr("testString")
				getGatewayLocationLocalLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.GetGatewayLocationLocalLocation(getGatewayLocationLocalLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetGatewayLocationLocalLocationOptions model with no property values
				getGatewayLocationLocalLocationOptionsModelNew := new(transitgatewayapisv1.GetGatewayLocationLocalLocationOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.GetGatewayLocationLocalLocation(getGatewayLocationLocalLocationOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetGatewayLocationLocalLocation successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetGatewayLocationLocalLocationOptions model
				getGatewayLocationLocalLocationOptionsModel := new(transitgatewayapisv1.GetGatewayLocationLocalLocationOptions)
				getGatewayLocationLocalLocationOptionsModel.LocationName = core.StringPtr("testString")
				getGatewayLocationLocalLocationOptionsModel.LocalLocationName = core.StringPtr("testString")
				getGatewayLocationLocalLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.GetGatewayLocationLocalLocation(getGatewayLocationLocalLocationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateGatewayLocationLocalLocation(updateGatewayLocationLocalLocationOptions *UpdateGatewayLocationLocalLocationOptions) - Operation response error`, func() {
		version := "testString"
		updateGatewayLocationLocalLocationPath := "/ops/locations/testString/local_connection_locations/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateGatewayLocationLocalLocationPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateGatewayLocationLocalLocation with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the UpdateGatewayLocationLocalLocationOptions model
				updateGatewayLocationLocalLocationOptionsModel := new(transitgatewayapisv1.UpdateGatewayLocationLocalLocationOptions)
				updateGatewayLocationLocalLocationOptionsModel.LocationName = core.StringPtr("testString")
				updateGatewayLocationLocalLocationOptionsModel.LocalLocationName = core.StringPtr("testString")
				updateGatewayLocationLocalLocationOptionsModel.DisplayName = core.StringPtr("Dallas")
				updateGatewayLocationLocalLocationOptionsModel.Name = core.StringPtr("us-south")
				updateGatewayLocationLocalLocationOptionsModel.SupportedConnectionTypes = []string{"classic", "vpc", "directlink", "gre_tunnel", "power_virtual_server", "unbound_gre_tunnel"}
				updateGatewayLocationLocalLocationOptionsModel.Type = core.StringPtr("region")
				updateGatewayLocationLocalLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.UpdateGatewayLocationLocalLocation(updateGatewayLocationLocalLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.UpdateGatewayLocationLocalLocation(updateGatewayLocationLocalLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateGatewayLocationLocalLocation(updateGatewayLocationLocalLocationOptions *UpdateGatewayLocationLocalLocationOptions)`, func() {
		version := "testString"
		updateGatewayLocationLocalLocationPath := "/ops/locations/testString/local_connection_locations/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateGatewayLocationLocalLocationPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"display_name": "Dallas", "name": "us-south", "supported_connection_types": ["SupportedConnectionTypes"], "type": "region", "created_at": "2019-01-01T12:00:00.000Z", "database_id": 234, "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke UpdateGatewayLocationLocalLocation successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the UpdateGatewayLocationLocalLocationOptions model
				updateGatewayLocationLocalLocationOptionsModel := new(transitgatewayapisv1.UpdateGatewayLocationLocalLocationOptions)
				updateGatewayLocationLocalLocationOptionsModel.LocationName = core.StringPtr("testString")
				updateGatewayLocationLocalLocationOptionsModel.LocalLocationName = core.StringPtr("testString")
				updateGatewayLocationLocalLocationOptionsModel.DisplayName = core.StringPtr("Dallas")
				updateGatewayLocationLocalLocationOptionsModel.Name = core.StringPtr("us-south")
				updateGatewayLocationLocalLocationOptionsModel.SupportedConnectionTypes = []string{"classic", "vpc", "directlink", "gre_tunnel", "power_virtual_server", "unbound_gre_tunnel"}
				updateGatewayLocationLocalLocationOptionsModel.Type = core.StringPtr("region")
				updateGatewayLocationLocalLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.UpdateGatewayLocationLocalLocationWithContext(ctx, updateGatewayLocationLocalLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.UpdateGatewayLocationLocalLocation(updateGatewayLocationLocalLocationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.UpdateGatewayLocationLocalLocationWithContext(ctx, updateGatewayLocationLocalLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateGatewayLocationLocalLocationPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"display_name": "Dallas", "name": "us-south", "supported_connection_types": ["SupportedConnectionTypes"], "type": "region", "created_at": "2019-01-01T12:00:00.000Z", "database_id": 234, "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke UpdateGatewayLocationLocalLocation successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.UpdateGatewayLocationLocalLocation(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateGatewayLocationLocalLocationOptions model
				updateGatewayLocationLocalLocationOptionsModel := new(transitgatewayapisv1.UpdateGatewayLocationLocalLocationOptions)
				updateGatewayLocationLocalLocationOptionsModel.LocationName = core.StringPtr("testString")
				updateGatewayLocationLocalLocationOptionsModel.LocalLocationName = core.StringPtr("testString")
				updateGatewayLocationLocalLocationOptionsModel.DisplayName = core.StringPtr("Dallas")
				updateGatewayLocationLocalLocationOptionsModel.Name = core.StringPtr("us-south")
				updateGatewayLocationLocalLocationOptionsModel.SupportedConnectionTypes = []string{"classic", "vpc", "directlink", "gre_tunnel", "power_virtual_server", "unbound_gre_tunnel"}
				updateGatewayLocationLocalLocationOptionsModel.Type = core.StringPtr("region")
				updateGatewayLocationLocalLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.UpdateGatewayLocationLocalLocation(updateGatewayLocationLocalLocationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateGatewayLocationLocalLocation with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the UpdateGatewayLocationLocalLocationOptions model
				updateGatewayLocationLocalLocationOptionsModel := new(transitgatewayapisv1.UpdateGatewayLocationLocalLocationOptions)
				updateGatewayLocationLocalLocationOptionsModel.LocationName = core.StringPtr("testString")
				updateGatewayLocationLocalLocationOptionsModel.LocalLocationName = core.StringPtr("testString")
				updateGatewayLocationLocalLocationOptionsModel.DisplayName = core.StringPtr("Dallas")
				updateGatewayLocationLocalLocationOptionsModel.Name = core.StringPtr("us-south")
				updateGatewayLocationLocalLocationOptionsModel.SupportedConnectionTypes = []string{"classic", "vpc", "directlink", "gre_tunnel", "power_virtual_server", "unbound_gre_tunnel"}
				updateGatewayLocationLocalLocationOptionsModel.Type = core.StringPtr("region")
				updateGatewayLocationLocalLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.UpdateGatewayLocationLocalLocation(updateGatewayLocationLocalLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateGatewayLocationLocalLocationOptions model with no property values
				updateGatewayLocationLocalLocationOptionsModelNew := new(transitgatewayapisv1.UpdateGatewayLocationLocalLocationOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.UpdateGatewayLocationLocalLocation(updateGatewayLocationLocalLocationOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateGatewayLocationLocalLocation successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the UpdateGatewayLocationLocalLocationOptions model
				updateGatewayLocationLocalLocationOptionsModel := new(transitgatewayapisv1.UpdateGatewayLocationLocalLocationOptions)
				updateGatewayLocationLocalLocationOptionsModel.LocationName = core.StringPtr("testString")
				updateGatewayLocationLocalLocationOptionsModel.LocalLocationName = core.StringPtr("testString")
				updateGatewayLocationLocalLocationOptionsModel.DisplayName = core.StringPtr("Dallas")
				updateGatewayLocationLocalLocationOptionsModel.Name = core.StringPtr("us-south")
				updateGatewayLocationLocalLocationOptionsModel.SupportedConnectionTypes = []string{"classic", "vpc", "directlink", "gre_tunnel", "power_virtual_server", "unbound_gre_tunnel"}
				updateGatewayLocationLocalLocationOptionsModel.Type = core.StringPtr("region")
				updateGatewayLocationLocalLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.UpdateGatewayLocationLocalLocation(updateGatewayLocationLocalLocationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListZonesOps(listZonesOpsOptions *ListZonesOpsOptions) - Operation response error`, func() {
		version := "testString"
		listZonesOpsPath := "/ops/locations/testString/zones"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listZonesOpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListZonesOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListZonesOpsOptions model
				listZonesOpsOptionsModel := new(transitgatewayapisv1.ListZonesOpsOptions)
				listZonesOpsOptionsModel.LocationName = core.StringPtr("testString")
				listZonesOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.ListZonesOps(listZonesOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.ListZonesOps(listZonesOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListZonesOps(listZonesOpsOptions *ListZonesOpsOptions)`, func() {
		version := "testString"
		listZonesOpsPath := "/ops/locations/testString/zones"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listZonesOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"zones": [{"created_at": "2019-01-01T12:00:00.000Z", "hidden": false, "name": "us-south-1", "target_device_quantity": 2, "tgr_bgp_asn": 4201065540, "updated_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListZonesOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the ListZonesOpsOptions model
				listZonesOpsOptionsModel := new(transitgatewayapisv1.ListZonesOpsOptions)
				listZonesOpsOptionsModel.LocationName = core.StringPtr("testString")
				listZonesOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.ListZonesOpsWithContext(ctx, listZonesOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.ListZonesOps(listZonesOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.ListZonesOpsWithContext(ctx, listZonesOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listZonesOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"zones": [{"created_at": "2019-01-01T12:00:00.000Z", "hidden": false, "name": "us-south-1", "target_device_quantity": 2, "tgr_bgp_asn": 4201065540, "updated_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListZonesOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.ListZonesOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListZonesOpsOptions model
				listZonesOpsOptionsModel := new(transitgatewayapisv1.ListZonesOpsOptions)
				listZonesOpsOptionsModel.LocationName = core.StringPtr("testString")
				listZonesOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.ListZonesOps(listZonesOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListZonesOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListZonesOpsOptions model
				listZonesOpsOptionsModel := new(transitgatewayapisv1.ListZonesOpsOptions)
				listZonesOpsOptionsModel.LocationName = core.StringPtr("testString")
				listZonesOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.ListZonesOps(listZonesOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListZonesOpsOptions model with no property values
				listZonesOpsOptionsModelNew := new(transitgatewayapisv1.ListZonesOpsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.ListZonesOps(listZonesOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListZonesOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListZonesOpsOptions model
				listZonesOpsOptionsModel := new(transitgatewayapisv1.ListZonesOpsOptions)
				listZonesOpsOptionsModel.LocationName = core.StringPtr("testString")
				listZonesOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.ListZonesOps(listZonesOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateZoneOps(createZoneOpsOptions *CreateZoneOpsOptions) - Operation response error`, func() {
		version := "testString"
		createZoneOpsPath := "/ops/locations/testString/zones"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createZoneOpsPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateZoneOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateZoneOpsOptions model
				createZoneOpsOptionsModel := new(transitgatewayapisv1.CreateZoneOpsOptions)
				createZoneOpsOptionsModel.LocationName = core.StringPtr("testString")
				createZoneOpsOptionsModel.Hidden = core.BoolPtr(false)
				createZoneOpsOptionsModel.Name = core.StringPtr("us-south-1")
				createZoneOpsOptionsModel.TgrBgpAsn = core.Int64Ptr(int64(4201065540))
				createZoneOpsOptionsModel.TargetDeviceQuantity = core.Int64Ptr(int64(2))
				createZoneOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.CreateZoneOps(createZoneOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.CreateZoneOps(createZoneOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateZoneOps(createZoneOpsOptions *CreateZoneOpsOptions)`, func() {
		version := "testString"
		createZoneOpsPath := "/ops/locations/testString/zones"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createZoneOpsPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "hidden": false, "name": "us-south-1", "target_device_quantity": 2, "tgr_bgp_asn": 4201065540, "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke CreateZoneOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the CreateZoneOpsOptions model
				createZoneOpsOptionsModel := new(transitgatewayapisv1.CreateZoneOpsOptions)
				createZoneOpsOptionsModel.LocationName = core.StringPtr("testString")
				createZoneOpsOptionsModel.Hidden = core.BoolPtr(false)
				createZoneOpsOptionsModel.Name = core.StringPtr("us-south-1")
				createZoneOpsOptionsModel.TgrBgpAsn = core.Int64Ptr(int64(4201065540))
				createZoneOpsOptionsModel.TargetDeviceQuantity = core.Int64Ptr(int64(2))
				createZoneOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.CreateZoneOpsWithContext(ctx, createZoneOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.CreateZoneOps(createZoneOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.CreateZoneOpsWithContext(ctx, createZoneOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createZoneOpsPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "hidden": false, "name": "us-south-1", "target_device_quantity": 2, "tgr_bgp_asn": 4201065540, "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke CreateZoneOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.CreateZoneOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateZoneOpsOptions model
				createZoneOpsOptionsModel := new(transitgatewayapisv1.CreateZoneOpsOptions)
				createZoneOpsOptionsModel.LocationName = core.StringPtr("testString")
				createZoneOpsOptionsModel.Hidden = core.BoolPtr(false)
				createZoneOpsOptionsModel.Name = core.StringPtr("us-south-1")
				createZoneOpsOptionsModel.TgrBgpAsn = core.Int64Ptr(int64(4201065540))
				createZoneOpsOptionsModel.TargetDeviceQuantity = core.Int64Ptr(int64(2))
				createZoneOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.CreateZoneOps(createZoneOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateZoneOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateZoneOpsOptions model
				createZoneOpsOptionsModel := new(transitgatewayapisv1.CreateZoneOpsOptions)
				createZoneOpsOptionsModel.LocationName = core.StringPtr("testString")
				createZoneOpsOptionsModel.Hidden = core.BoolPtr(false)
				createZoneOpsOptionsModel.Name = core.StringPtr("us-south-1")
				createZoneOpsOptionsModel.TgrBgpAsn = core.Int64Ptr(int64(4201065540))
				createZoneOpsOptionsModel.TargetDeviceQuantity = core.Int64Ptr(int64(2))
				createZoneOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.CreateZoneOps(createZoneOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateZoneOpsOptions model with no property values
				createZoneOpsOptionsModelNew := new(transitgatewayapisv1.CreateZoneOpsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.CreateZoneOps(createZoneOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateZoneOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateZoneOpsOptions model
				createZoneOpsOptionsModel := new(transitgatewayapisv1.CreateZoneOpsOptions)
				createZoneOpsOptionsModel.LocationName = core.StringPtr("testString")
				createZoneOpsOptionsModel.Hidden = core.BoolPtr(false)
				createZoneOpsOptionsModel.Name = core.StringPtr("us-south-1")
				createZoneOpsOptionsModel.TgrBgpAsn = core.Int64Ptr(int64(4201065540))
				createZoneOpsOptionsModel.TargetDeviceQuantity = core.Int64Ptr(int64(2))
				createZoneOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.CreateZoneOps(createZoneOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteZoneOps(deleteZoneOpsOptions *DeleteZoneOpsOptions)`, func() {
		version := "testString"
		deleteZoneOpsPath := "/ops/locations/testString/zones/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteZoneOpsPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteZoneOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := transitGatewayApisService.DeleteZoneOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteZoneOpsOptions model
				deleteZoneOpsOptionsModel := new(transitgatewayapisv1.DeleteZoneOpsOptions)
				deleteZoneOpsOptionsModel.LocationName = core.StringPtr("testString")
				deleteZoneOpsOptionsModel.ZoneName = core.StringPtr("testString")
				deleteZoneOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = transitGatewayApisService.DeleteZoneOps(deleteZoneOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteZoneOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the DeleteZoneOpsOptions model
				deleteZoneOpsOptionsModel := new(transitgatewayapisv1.DeleteZoneOpsOptions)
				deleteZoneOpsOptionsModel.LocationName = core.StringPtr("testString")
				deleteZoneOpsOptionsModel.ZoneName = core.StringPtr("testString")
				deleteZoneOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := transitGatewayApisService.DeleteZoneOps(deleteZoneOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteZoneOpsOptions model with no property values
				deleteZoneOpsOptionsModelNew := new(transitgatewayapisv1.DeleteZoneOpsOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = transitGatewayApisService.DeleteZoneOps(deleteZoneOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateZoneOps(updateZoneOpsOptions *UpdateZoneOpsOptions) - Operation response error`, func() {
		version := "testString"
		updateZoneOpsPath := "/ops/locations/testString/zones/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateZoneOpsPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateZoneOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the UpdateZoneOpsOptions model
				updateZoneOpsOptionsModel := new(transitgatewayapisv1.UpdateZoneOpsOptions)
				updateZoneOpsOptionsModel.LocationName = core.StringPtr("testString")
				updateZoneOpsOptionsModel.ZoneName = core.StringPtr("testString")
				updateZoneOpsOptionsModel.Hidden = core.BoolPtr(false)
				updateZoneOpsOptionsModel.TargetDeviceQuantity = core.Int64Ptr(int64(2))
				updateZoneOpsOptionsModel.TgrBgpAsn = core.Int64Ptr(int64(4201065540))
				updateZoneOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.UpdateZoneOps(updateZoneOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.UpdateZoneOps(updateZoneOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateZoneOps(updateZoneOpsOptions *UpdateZoneOpsOptions)`, func() {
		version := "testString"
		updateZoneOpsPath := "/ops/locations/testString/zones/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateZoneOpsPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "hidden": false, "name": "us-south-1", "target_device_quantity": 2, "tgr_bgp_asn": 4201065540, "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke UpdateZoneOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the UpdateZoneOpsOptions model
				updateZoneOpsOptionsModel := new(transitgatewayapisv1.UpdateZoneOpsOptions)
				updateZoneOpsOptionsModel.LocationName = core.StringPtr("testString")
				updateZoneOpsOptionsModel.ZoneName = core.StringPtr("testString")
				updateZoneOpsOptionsModel.Hidden = core.BoolPtr(false)
				updateZoneOpsOptionsModel.TargetDeviceQuantity = core.Int64Ptr(int64(2))
				updateZoneOpsOptionsModel.TgrBgpAsn = core.Int64Ptr(int64(4201065540))
				updateZoneOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.UpdateZoneOpsWithContext(ctx, updateZoneOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.UpdateZoneOps(updateZoneOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.UpdateZoneOpsWithContext(ctx, updateZoneOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateZoneOpsPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "hidden": false, "name": "us-south-1", "target_device_quantity": 2, "tgr_bgp_asn": 4201065540, "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke UpdateZoneOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.UpdateZoneOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateZoneOpsOptions model
				updateZoneOpsOptionsModel := new(transitgatewayapisv1.UpdateZoneOpsOptions)
				updateZoneOpsOptionsModel.LocationName = core.StringPtr("testString")
				updateZoneOpsOptionsModel.ZoneName = core.StringPtr("testString")
				updateZoneOpsOptionsModel.Hidden = core.BoolPtr(false)
				updateZoneOpsOptionsModel.TargetDeviceQuantity = core.Int64Ptr(int64(2))
				updateZoneOpsOptionsModel.TgrBgpAsn = core.Int64Ptr(int64(4201065540))
				updateZoneOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.UpdateZoneOps(updateZoneOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateZoneOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the UpdateZoneOpsOptions model
				updateZoneOpsOptionsModel := new(transitgatewayapisv1.UpdateZoneOpsOptions)
				updateZoneOpsOptionsModel.LocationName = core.StringPtr("testString")
				updateZoneOpsOptionsModel.ZoneName = core.StringPtr("testString")
				updateZoneOpsOptionsModel.Hidden = core.BoolPtr(false)
				updateZoneOpsOptionsModel.TargetDeviceQuantity = core.Int64Ptr(int64(2))
				updateZoneOpsOptionsModel.TgrBgpAsn = core.Int64Ptr(int64(4201065540))
				updateZoneOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.UpdateZoneOps(updateZoneOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateZoneOpsOptions model with no property values
				updateZoneOpsOptionsModelNew := new(transitgatewayapisv1.UpdateZoneOpsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.UpdateZoneOps(updateZoneOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateZoneOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the UpdateZoneOpsOptions model
				updateZoneOpsOptionsModel := new(transitgatewayapisv1.UpdateZoneOpsOptions)
				updateZoneOpsOptionsModel.LocationName = core.StringPtr("testString")
				updateZoneOpsOptionsModel.ZoneName = core.StringPtr("testString")
				updateZoneOpsOptionsModel.Hidden = core.BoolPtr(false)
				updateZoneOpsOptionsModel.TargetDeviceQuantity = core.Int64Ptr(int64(2))
				updateZoneOpsOptionsModel.TgrBgpAsn = core.Int64Ptr(int64(4201065540))
				updateZoneOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.UpdateZoneOps(updateZoneOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetTransitGatewayUserQuotasOps(getTransitGatewayUserQuotasOpsOptions *GetTransitGatewayUserQuotasOpsOptions) - Operation response error`, func() {
		version := "testString"
		getTransitGatewayUserQuotasOpsPath := "/ops/quotas/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTransitGatewayUserQuotasOpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetTransitGatewayUserQuotasOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetTransitGatewayUserQuotasOpsOptions model
				getTransitGatewayUserQuotasOpsOptionsModel := new(transitgatewayapisv1.GetTransitGatewayUserQuotasOpsOptions)
				getTransitGatewayUserQuotasOpsOptionsModel.CustomerAccountID = core.StringPtr("testString")
				getTransitGatewayUserQuotasOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.GetTransitGatewayUserQuotasOps(getTransitGatewayUserQuotasOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.GetTransitGatewayUserQuotasOps(getTransitGatewayUserQuotasOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetTransitGatewayUserQuotasOps(getTransitGatewayUserQuotasOpsOptions *GetTransitGatewayUserQuotasOpsOptions)`, func() {
		version := "testString"
		getTransitGatewayUserQuotasOpsPath := "/ops/quotas/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTransitGatewayUserQuotasOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"address_prefixes_per_classic_connection": {"hard_limit": -1, "value": 1}, "address_prefixes_per_directlink_connection": {"hard_limit": -1, "value": 1}, "address_prefixes_per_gre_connection": {"hard_limit": -1, "value": 1}, "address_prefixes_per_power_virtual_server_connection": {"hard_limit": -1, "value": 1}, "classic_connections_per_gateway": {"hard_limit": -1, "value": 1}, "connections_per_network": {"hard_limit": -1, "value": 1}, "connections_with_filters_per_gateway": {"hard_limit": -1, "value": 1}, "directlink_connections_per_gateway": {"hard_limit": -1, "value": 1}, "gateways_per_account": {"hard_limit": -1, "value": 1}, "gateways_per_location": [{"hard_limit": -1, "value": 1, "name": "us-south"}], "gre_connections_per_gateway": {"hard_limit": -1, "value": 1}, "ibmcloud_account_id": "28e4d90ac7504be694471ee66e70d0d5", "power_virtual_server_connections_per_gateway": {"hard_limit": -1, "value": 1}, "prefix_filters_per_connection": {"hard_limit": -1, "value": 1}, "unique_unbound_gre_base_networks": {"hard_limit": -1, "value": 1}, "vpc_connections_per_gateway": {"hard_limit": -1, "value": 1}}`)
				}))
			})
			It(`Invoke GetTransitGatewayUserQuotasOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the GetTransitGatewayUserQuotasOpsOptions model
				getTransitGatewayUserQuotasOpsOptionsModel := new(transitgatewayapisv1.GetTransitGatewayUserQuotasOpsOptions)
				getTransitGatewayUserQuotasOpsOptionsModel.CustomerAccountID = core.StringPtr("testString")
				getTransitGatewayUserQuotasOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.GetTransitGatewayUserQuotasOpsWithContext(ctx, getTransitGatewayUserQuotasOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.GetTransitGatewayUserQuotasOps(getTransitGatewayUserQuotasOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.GetTransitGatewayUserQuotasOpsWithContext(ctx, getTransitGatewayUserQuotasOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTransitGatewayUserQuotasOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"address_prefixes_per_classic_connection": {"hard_limit": -1, "value": 1}, "address_prefixes_per_directlink_connection": {"hard_limit": -1, "value": 1}, "address_prefixes_per_gre_connection": {"hard_limit": -1, "value": 1}, "address_prefixes_per_power_virtual_server_connection": {"hard_limit": -1, "value": 1}, "classic_connections_per_gateway": {"hard_limit": -1, "value": 1}, "connections_per_network": {"hard_limit": -1, "value": 1}, "connections_with_filters_per_gateway": {"hard_limit": -1, "value": 1}, "directlink_connections_per_gateway": {"hard_limit": -1, "value": 1}, "gateways_per_account": {"hard_limit": -1, "value": 1}, "gateways_per_location": [{"hard_limit": -1, "value": 1, "name": "us-south"}], "gre_connections_per_gateway": {"hard_limit": -1, "value": 1}, "ibmcloud_account_id": "28e4d90ac7504be694471ee66e70d0d5", "power_virtual_server_connections_per_gateway": {"hard_limit": -1, "value": 1}, "prefix_filters_per_connection": {"hard_limit": -1, "value": 1}, "unique_unbound_gre_base_networks": {"hard_limit": -1, "value": 1}, "vpc_connections_per_gateway": {"hard_limit": -1, "value": 1}}`)
				}))
			})
			It(`Invoke GetTransitGatewayUserQuotasOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.GetTransitGatewayUserQuotasOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetTransitGatewayUserQuotasOpsOptions model
				getTransitGatewayUserQuotasOpsOptionsModel := new(transitgatewayapisv1.GetTransitGatewayUserQuotasOpsOptions)
				getTransitGatewayUserQuotasOpsOptionsModel.CustomerAccountID = core.StringPtr("testString")
				getTransitGatewayUserQuotasOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.GetTransitGatewayUserQuotasOps(getTransitGatewayUserQuotasOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetTransitGatewayUserQuotasOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetTransitGatewayUserQuotasOpsOptions model
				getTransitGatewayUserQuotasOpsOptionsModel := new(transitgatewayapisv1.GetTransitGatewayUserQuotasOpsOptions)
				getTransitGatewayUserQuotasOpsOptionsModel.CustomerAccountID = core.StringPtr("testString")
				getTransitGatewayUserQuotasOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.GetTransitGatewayUserQuotasOps(getTransitGatewayUserQuotasOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetTransitGatewayUserQuotasOpsOptions model with no property values
				getTransitGatewayUserQuotasOpsOptionsModelNew := new(transitgatewayapisv1.GetTransitGatewayUserQuotasOpsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.GetTransitGatewayUserQuotasOps(getTransitGatewayUserQuotasOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetTransitGatewayUserQuotasOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetTransitGatewayUserQuotasOpsOptions model
				getTransitGatewayUserQuotasOpsOptionsModel := new(transitgatewayapisv1.GetTransitGatewayUserQuotasOpsOptions)
				getTransitGatewayUserQuotasOpsOptionsModel.CustomerAccountID = core.StringPtr("testString")
				getTransitGatewayUserQuotasOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.GetTransitGatewayUserQuotasOps(getTransitGatewayUserQuotasOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateTransitGatewayUserQuotasOps(updateTransitGatewayUserQuotasOpsOptions *UpdateTransitGatewayUserQuotasOpsOptions)`, func() {
		version := "testString"
		updateTransitGatewayUserQuotasOpsPath := "/ops/quotas/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateTransitGatewayUserQuotasOpsPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke UpdateTransitGatewayUserQuotasOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := transitGatewayApisService.UpdateTransitGatewayUserQuotasOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the TSLocationQuotaPatch model
				tsLocationQuotaPatchModel := new(transitgatewayapisv1.TSLocationQuotaPatch)
				tsLocationQuotaPatchModel.Name = core.StringPtr("us-south")
				tsLocationQuotaPatchModel.Value = core.Int64Ptr(int64(1))

				// Construct an instance of the UpdateTransitGatewayUserQuotasOpsOptions model
				updateTransitGatewayUserQuotasOpsOptionsModel := new(transitgatewayapisv1.UpdateTransitGatewayUserQuotasOpsOptions)
				updateTransitGatewayUserQuotasOpsOptionsModel.CustomerAccountID = core.StringPtr("testString")
				updateTransitGatewayUserQuotasOpsOptionsModel.AddressPrefixesPerClassicConnection = core.Int64Ptr(int64(120))
				updateTransitGatewayUserQuotasOpsOptionsModel.AddressPrefixesPerDirectlinkConnection = core.Int64Ptr(int64(120))
				updateTransitGatewayUserQuotasOpsOptionsModel.AddressPrefixesPerGreConnection = core.Int64Ptr(int64(120))
				updateTransitGatewayUserQuotasOpsOptionsModel.AddressPrefixesPerPowerVirtualServerConnection = core.Int64Ptr(int64(120))
				updateTransitGatewayUserQuotasOpsOptionsModel.ClassicConnectionsPerGateway = core.Int64Ptr(int64(1))
				updateTransitGatewayUserQuotasOpsOptionsModel.ConnectionsPerNetwork = core.Int64Ptr(int64(1))
				updateTransitGatewayUserQuotasOpsOptionsModel.ConnectionsWithFiltersPerGateway = core.Int64Ptr(int64(1))
				updateTransitGatewayUserQuotasOpsOptionsModel.DirectlinkConnectionsPerGateway = core.Int64Ptr(int64(1))
				updateTransitGatewayUserQuotasOpsOptionsModel.GatewaysPerAccount = core.Int64Ptr(int64(1))
				updateTransitGatewayUserQuotasOpsOptionsModel.GatewaysPerLocation = []transitgatewayapisv1.TSLocationQuotaPatch{*tsLocationQuotaPatchModel}
				updateTransitGatewayUserQuotasOpsOptionsModel.GreConnectionsPerGateway = core.Int64Ptr(int64(1))
				updateTransitGatewayUserQuotasOpsOptionsModel.PowerVirtualServerConnectionsPerGateway = core.Int64Ptr(int64(1))
				updateTransitGatewayUserQuotasOpsOptionsModel.PrefixFiltersPerConnection = core.Int64Ptr(int64(1))
				updateTransitGatewayUserQuotasOpsOptionsModel.UniqueUnboundGreBaseNetworks = core.Int64Ptr(int64(1))
				updateTransitGatewayUserQuotasOpsOptionsModel.VpcConnectionsPerGateway = core.Int64Ptr(int64(1))
				updateTransitGatewayUserQuotasOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = transitGatewayApisService.UpdateTransitGatewayUserQuotasOps(updateTransitGatewayUserQuotasOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke UpdateTransitGatewayUserQuotasOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the TSLocationQuotaPatch model
				tsLocationQuotaPatchModel := new(transitgatewayapisv1.TSLocationQuotaPatch)
				tsLocationQuotaPatchModel.Name = core.StringPtr("us-south")
				tsLocationQuotaPatchModel.Value = core.Int64Ptr(int64(1))

				// Construct an instance of the UpdateTransitGatewayUserQuotasOpsOptions model
				updateTransitGatewayUserQuotasOpsOptionsModel := new(transitgatewayapisv1.UpdateTransitGatewayUserQuotasOpsOptions)
				updateTransitGatewayUserQuotasOpsOptionsModel.CustomerAccountID = core.StringPtr("testString")
				updateTransitGatewayUserQuotasOpsOptionsModel.AddressPrefixesPerClassicConnection = core.Int64Ptr(int64(120))
				updateTransitGatewayUserQuotasOpsOptionsModel.AddressPrefixesPerDirectlinkConnection = core.Int64Ptr(int64(120))
				updateTransitGatewayUserQuotasOpsOptionsModel.AddressPrefixesPerGreConnection = core.Int64Ptr(int64(120))
				updateTransitGatewayUserQuotasOpsOptionsModel.AddressPrefixesPerPowerVirtualServerConnection = core.Int64Ptr(int64(120))
				updateTransitGatewayUserQuotasOpsOptionsModel.ClassicConnectionsPerGateway = core.Int64Ptr(int64(1))
				updateTransitGatewayUserQuotasOpsOptionsModel.ConnectionsPerNetwork = core.Int64Ptr(int64(1))
				updateTransitGatewayUserQuotasOpsOptionsModel.ConnectionsWithFiltersPerGateway = core.Int64Ptr(int64(1))
				updateTransitGatewayUserQuotasOpsOptionsModel.DirectlinkConnectionsPerGateway = core.Int64Ptr(int64(1))
				updateTransitGatewayUserQuotasOpsOptionsModel.GatewaysPerAccount = core.Int64Ptr(int64(1))
				updateTransitGatewayUserQuotasOpsOptionsModel.GatewaysPerLocation = []transitgatewayapisv1.TSLocationQuotaPatch{*tsLocationQuotaPatchModel}
				updateTransitGatewayUserQuotasOpsOptionsModel.GreConnectionsPerGateway = core.Int64Ptr(int64(1))
				updateTransitGatewayUserQuotasOpsOptionsModel.PowerVirtualServerConnectionsPerGateway = core.Int64Ptr(int64(1))
				updateTransitGatewayUserQuotasOpsOptionsModel.PrefixFiltersPerConnection = core.Int64Ptr(int64(1))
				updateTransitGatewayUserQuotasOpsOptionsModel.UniqueUnboundGreBaseNetworks = core.Int64Ptr(int64(1))
				updateTransitGatewayUserQuotasOpsOptionsModel.VpcConnectionsPerGateway = core.Int64Ptr(int64(1))
				updateTransitGatewayUserQuotasOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := transitGatewayApisService.UpdateTransitGatewayUserQuotasOps(updateTransitGatewayUserQuotasOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the UpdateTransitGatewayUserQuotasOpsOptions model with no property values
				updateTransitGatewayUserQuotasOpsOptionsModelNew := new(transitgatewayapisv1.UpdateTransitGatewayUserQuotasOpsOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = transitGatewayApisService.UpdateTransitGatewayUserQuotasOps(updateTransitGatewayUserQuotasOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListAsnsOps(listAsnsOpsOptions *ListAsnsOpsOptions) - Operation response error`, func() {
		version := "testString"
		listAsnsOpsPath := "/ops/asns"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listAsnsOpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					// TODO: Add check for is_associated query parameter
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListAsnsOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListAsnsOpsOptions model
				listAsnsOpsOptionsModel := new(transitgatewayapisv1.ListAsnsOpsOptions)
				listAsnsOpsOptionsModel.Start = core.StringPtr("testString")
				listAsnsOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listAsnsOpsOptionsModel.IsAssociated = core.BoolPtr(true)
				listAsnsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.ListAsnsOps(listAsnsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.ListAsnsOps(listAsnsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListAsnsOps(listAsnsOpsOptions *ListAsnsOpsOptions)`, func() {
		version := "testString"
		listAsnsOpsPath := "/ops/asns"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listAsnsOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					// TODO: Add check for is_associated query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"asns": [{"asn": 44228, "created_at": "2021-02-15T14:50:10.221Z", "id": "555abab3-aaaa-123b-43ba-654d720f1acc", "is_associated": false}], "first": {"href": "https://internal.transit.cloud.ibm.com/v1/ops/asns"}, "limit": 200, "next": {"href": "https://internal.transit.cloud.ibm.com/v1/ops/asns?start=44789", "start": "44789"}, "total_count": 1840}`)
				}))
			})
			It(`Invoke ListAsnsOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the ListAsnsOpsOptions model
				listAsnsOpsOptionsModel := new(transitgatewayapisv1.ListAsnsOpsOptions)
				listAsnsOpsOptionsModel.Start = core.StringPtr("testString")
				listAsnsOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listAsnsOpsOptionsModel.IsAssociated = core.BoolPtr(true)
				listAsnsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.ListAsnsOpsWithContext(ctx, listAsnsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.ListAsnsOps(listAsnsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.ListAsnsOpsWithContext(ctx, listAsnsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listAsnsOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					// TODO: Add check for is_associated query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"asns": [{"asn": 44228, "created_at": "2021-02-15T14:50:10.221Z", "id": "555abab3-aaaa-123b-43ba-654d720f1acc", "is_associated": false}], "first": {"href": "https://internal.transit.cloud.ibm.com/v1/ops/asns"}, "limit": 200, "next": {"href": "https://internal.transit.cloud.ibm.com/v1/ops/asns?start=44789", "start": "44789"}, "total_count": 1840}`)
				}))
			})
			It(`Invoke ListAsnsOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.ListAsnsOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListAsnsOpsOptions model
				listAsnsOpsOptionsModel := new(transitgatewayapisv1.ListAsnsOpsOptions)
				listAsnsOpsOptionsModel.Start = core.StringPtr("testString")
				listAsnsOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listAsnsOpsOptionsModel.IsAssociated = core.BoolPtr(true)
				listAsnsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.ListAsnsOps(listAsnsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListAsnsOps with error: Operation request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListAsnsOpsOptions model
				listAsnsOpsOptionsModel := new(transitgatewayapisv1.ListAsnsOpsOptions)
				listAsnsOpsOptionsModel.Start = core.StringPtr("testString")
				listAsnsOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listAsnsOpsOptionsModel.IsAssociated = core.BoolPtr(true)
				listAsnsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.ListAsnsOps(listAsnsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListAsnsOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListAsnsOpsOptions model
				listAsnsOpsOptionsModel := new(transitgatewayapisv1.ListAsnsOpsOptions)
				listAsnsOpsOptionsModel.Start = core.StringPtr("testString")
				listAsnsOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listAsnsOpsOptionsModel.IsAssociated = core.BoolPtr(true)
				listAsnsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.ListAsnsOps(listAsnsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Test pagination helper method on response`, func() {
			It(`Invoke GetNextStart successfully`, func() {
				responseObject := new(transitgatewayapisv1.AsnCollectionOps)
				nextObject := new(transitgatewayapisv1.PaginationNextAsnOps)
				nextObject.Start = core.StringPtr("abc-123")
				responseObject.Next = nextObject
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(Equal(core.StringPtr("abc-123")))
			})
			It(`Invoke GetNextStart without a "Next" property in the response`, func() {
				responseObject := new(transitgatewayapisv1.AsnCollectionOps)
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(BeNil())
			})
		})
		Context(`Using mock server endpoint - paginated response`, func() {
			BeforeEach(func() {
				var requestNumber int = 0
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listAsnsOpsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					requestNumber++
					if requestNumber == 1 {
						fmt.Fprintf(res, "%s", `{"next":{"start":"1"},"total_count":2,"limit":1,"asns":[{"asn":44228,"created_at":"2021-02-15T14:50:10.221Z","id":"555abab3-aaaa-123b-43ba-654d720f1acc","is_associated":false}]}`)
					} else if requestNumber == 2 {
						fmt.Fprintf(res, "%s", `{"total_count":2,"limit":1,"asns":[{"asn":44228,"created_at":"2021-02-15T14:50:10.221Z","id":"555abab3-aaaa-123b-43ba-654d720f1acc","is_associated":false}]}`)
					} else {
						res.WriteHeader(400)
					}
				}))
			})
			It(`Use AsnsOpsPager.GetNext successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				listAsnsOpsOptionsModel := &transitgatewayapisv1.ListAsnsOpsOptions{
					Limit: core.Int64Ptr(int64(10)),
					IsAssociated: core.BoolPtr(true),
				}

				pager, err := transitGatewayApisService.NewAsnsOpsPager(listAsnsOpsOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				var allResults []transitgatewayapisv1.AsnOps
				for pager.HasNext() {
					nextPage, err := pager.GetNext()
					Expect(err).To(BeNil())
					Expect(nextPage).ToNot(BeNil())
					allResults = append(allResults, nextPage...)
				}
				Expect(len(allResults)).To(Equal(2))
			})
			It(`Use AsnsOpsPager.GetAll successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				listAsnsOpsOptionsModel := &transitgatewayapisv1.ListAsnsOpsOptions{
					Limit: core.Int64Ptr(int64(10)),
					IsAssociated: core.BoolPtr(true),
				}

				pager, err := transitGatewayApisService.NewAsnsOpsPager(listAsnsOpsOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				allResults, err := pager.GetAll()
				Expect(err).To(BeNil())
				Expect(allResults).ToNot(BeNil())
				Expect(len(allResults)).To(Equal(2))
			})
		})
	})
	Describe(`DeleteAsnOps(deleteAsnOpsOptions *DeleteAsnOpsOptions)`, func() {
		version := "testString"
		deleteAsnOpsPath := "/ops/asns/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteAsnOpsPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteAsnOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := transitGatewayApisService.DeleteAsnOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteAsnOpsOptions model
				deleteAsnOpsOptionsModel := new(transitgatewayapisv1.DeleteAsnOpsOptions)
				deleteAsnOpsOptionsModel.ID = core.StringPtr("testString")
				deleteAsnOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = transitGatewayApisService.DeleteAsnOps(deleteAsnOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteAsnOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the DeleteAsnOpsOptions model
				deleteAsnOpsOptionsModel := new(transitgatewayapisv1.DeleteAsnOpsOptions)
				deleteAsnOpsOptionsModel.ID = core.StringPtr("testString")
				deleteAsnOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := transitGatewayApisService.DeleteAsnOps(deleteAsnOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteAsnOpsOptions model with no property values
				deleteAsnOpsOptionsModelNew := new(transitgatewayapisv1.DeleteAsnOpsOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = transitGatewayApisService.DeleteAsnOps(deleteAsnOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListTransitGatewayAlertsOps(listTransitGatewayAlertsOpsOptions *ListTransitGatewayAlertsOpsOptions) - Operation response error`, func() {
		version := "testString"
		listTransitGatewayAlertsOpsPath := "/ops/alerts"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewayAlertsOpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["created_at"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["updated_at"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["gateway_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["connection_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["status"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["situation"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["root_cause"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["device_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["database_id"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListTransitGatewayAlertsOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewayAlertsOpsOptions model
				listTransitGatewayAlertsOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewayAlertsOpsOptions)
				listTransitGatewayAlertsOpsOptionsModel.CreatedAt = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.UpdatedAt = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.GatewayID = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.ConnectionID = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.Status = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.Situation = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.RootCause = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.DeviceID = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.Start = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listTransitGatewayAlertsOpsOptionsModel.DatabaseID = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayAlertsOps(listTransitGatewayAlertsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.ListTransitGatewayAlertsOps(listTransitGatewayAlertsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListTransitGatewayAlertsOps(listTransitGatewayAlertsOpsOptions *ListTransitGatewayAlertsOpsOptions)`, func() {
		version := "testString"
		listTransitGatewayAlertsOpsPath := "/ops/alerts"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewayAlertsOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["created_at"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["updated_at"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["gateway_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["connection_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["status"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["situation"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["root_cause"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["device_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["database_id"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://internal.transit.cloud.ibm.com/v1"}, "limit": 20, "next": {"href": "https://internal.transit.cloud.ibm.com/v1"}, "total_count": 132, "alerts": [{"alert_id": "cadbc059-198a-4272-a049-4416ba713bb5:de344b78-7119-4eea-a6ce-6e754cec0874:1024", "connection_id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "created_at": "2019-01-01T12:00:00.000Z", "database_id": 987, "description": "failed to provision gateway", "device_id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "gateway_id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "root_cause": "oculus_response_error", "situation": "gateway_provisioning_failed", "status": "monitoring", "updated_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListTransitGatewayAlertsOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the ListTransitGatewayAlertsOpsOptions model
				listTransitGatewayAlertsOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewayAlertsOpsOptions)
				listTransitGatewayAlertsOpsOptionsModel.CreatedAt = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.UpdatedAt = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.GatewayID = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.ConnectionID = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.Status = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.Situation = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.RootCause = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.DeviceID = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.Start = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listTransitGatewayAlertsOpsOptionsModel.DatabaseID = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.ListTransitGatewayAlertsOpsWithContext(ctx, listTransitGatewayAlertsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayAlertsOps(listTransitGatewayAlertsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.ListTransitGatewayAlertsOpsWithContext(ctx, listTransitGatewayAlertsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewayAlertsOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["created_at"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["updated_at"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["gateway_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["connection_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["status"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["situation"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["root_cause"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["device_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["database_id"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://internal.transit.cloud.ibm.com/v1"}, "limit": 20, "next": {"href": "https://internal.transit.cloud.ibm.com/v1"}, "total_count": 132, "alerts": [{"alert_id": "cadbc059-198a-4272-a049-4416ba713bb5:de344b78-7119-4eea-a6ce-6e754cec0874:1024", "connection_id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "created_at": "2019-01-01T12:00:00.000Z", "database_id": 987, "description": "failed to provision gateway", "device_id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "gateway_id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "root_cause": "oculus_response_error", "situation": "gateway_provisioning_failed", "status": "monitoring", "updated_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListTransitGatewayAlertsOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayAlertsOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListTransitGatewayAlertsOpsOptions model
				listTransitGatewayAlertsOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewayAlertsOpsOptions)
				listTransitGatewayAlertsOpsOptionsModel.CreatedAt = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.UpdatedAt = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.GatewayID = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.ConnectionID = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.Status = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.Situation = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.RootCause = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.DeviceID = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.Start = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listTransitGatewayAlertsOpsOptionsModel.DatabaseID = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.ListTransitGatewayAlertsOps(listTransitGatewayAlertsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListTransitGatewayAlertsOps with error: Operation request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewayAlertsOpsOptions model
				listTransitGatewayAlertsOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewayAlertsOpsOptions)
				listTransitGatewayAlertsOpsOptionsModel.CreatedAt = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.UpdatedAt = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.GatewayID = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.ConnectionID = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.Status = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.Situation = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.RootCause = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.DeviceID = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.Start = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listTransitGatewayAlertsOpsOptionsModel.DatabaseID = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayAlertsOps(listTransitGatewayAlertsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListTransitGatewayAlertsOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewayAlertsOpsOptions model
				listTransitGatewayAlertsOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewayAlertsOpsOptions)
				listTransitGatewayAlertsOpsOptionsModel.CreatedAt = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.UpdatedAt = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.GatewayID = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.ConnectionID = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.Status = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.Situation = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.RootCause = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.DeviceID = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.Start = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listTransitGatewayAlertsOpsOptionsModel.DatabaseID = core.StringPtr("testString")
				listTransitGatewayAlertsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayAlertsOps(listTransitGatewayAlertsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Test pagination helper method on response`, func() {
			It(`Invoke GetNextStart successfully`, func() {
				responseObject := new(transitgatewayapisv1.TSAlertsOpsCollection)
				nextObject := new(transitgatewayapisv1.NextOps)
				nextObject.Href = core.StringPtr("ibm.com?start=abc-123")
				responseObject.Next = nextObject
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(Equal(core.StringPtr("abc-123")))
			})
			It(`Invoke GetNextStart without a "Next" property in the response`, func() {
				responseObject := new(transitgatewayapisv1.TSAlertsOpsCollection)
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(BeNil())
			})
			It(`Invoke GetNextStart without any query params in the "Next" URL`, func() {
				responseObject := new(transitgatewayapisv1.TSAlertsOpsCollection)
				nextObject := new(transitgatewayapisv1.NextOps)
				nextObject.Href = core.StringPtr("ibm.com")
				responseObject.Next = nextObject
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(BeNil())
			})
		})
		Context(`Using mock server endpoint - paginated response`, func() {
			BeforeEach(func() {
				var requestNumber int = 0
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewayAlertsOpsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					requestNumber++
					if requestNumber == 1 {
						fmt.Fprintf(res, "%s", `{"alerts":[{"alert_id":"cadbc059-198a-4272-a049-4416ba713bb5:de344b78-7119-4eea-a6ce-6e754cec0874:1024","connection_id":"1a15dca5-7e33-45e1-b7c5-bc690e569531","created_at":"2019-01-01T12:00:00.000Z","database_id":987,"description":"failed to provision gateway","device_id":"1a15dca5-7e33-45e1-b7c5-bc690e569531","gateway_id":"1a15dca5-7e33-45e1-b7c5-bc690e569531","id":"ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4","root_cause":"oculus_response_error","situation":"gateway_provisioning_failed","status":"monitoring","updated_at":"2019-01-01T12:00:00.000Z"}],"next":{"href":"https://myhost.com/somePath?start=1"},"total_count":2,"limit":1}`)
					} else if requestNumber == 2 {
						fmt.Fprintf(res, "%s", `{"alerts":[{"alert_id":"cadbc059-198a-4272-a049-4416ba713bb5:de344b78-7119-4eea-a6ce-6e754cec0874:1024","connection_id":"1a15dca5-7e33-45e1-b7c5-bc690e569531","created_at":"2019-01-01T12:00:00.000Z","database_id":987,"description":"failed to provision gateway","device_id":"1a15dca5-7e33-45e1-b7c5-bc690e569531","gateway_id":"1a15dca5-7e33-45e1-b7c5-bc690e569531","id":"ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4","root_cause":"oculus_response_error","situation":"gateway_provisioning_failed","status":"monitoring","updated_at":"2019-01-01T12:00:00.000Z"}],"total_count":2,"limit":1}`)
					} else {
						res.WriteHeader(400)
					}
				}))
			})
			It(`Use TransitGatewayAlertsOpsPager.GetNext successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				listTransitGatewayAlertsOpsOptionsModel := &transitgatewayapisv1.ListTransitGatewayAlertsOpsOptions{
					CreatedAt: core.StringPtr("testString"),
					UpdatedAt: core.StringPtr("testString"),
					GatewayID: core.StringPtr("testString"),
					ConnectionID: core.StringPtr("testString"),
					Status: core.StringPtr("testString"),
					Situation: core.StringPtr("testString"),
					RootCause: core.StringPtr("testString"),
					DeviceID: core.StringPtr("testString"),
					Limit: core.Int64Ptr(int64(10)),
					DatabaseID: core.StringPtr("testString"),
				}

				pager, err := transitGatewayApisService.NewTransitGatewayAlertsOpsPager(listTransitGatewayAlertsOpsOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				var allResults []transitgatewayapisv1.TSAlertOps
				for pager.HasNext() {
					nextPage, err := pager.GetNext()
					Expect(err).To(BeNil())
					Expect(nextPage).ToNot(BeNil())
					allResults = append(allResults, nextPage...)
				}
				Expect(len(allResults)).To(Equal(2))
			})
			It(`Use TransitGatewayAlertsOpsPager.GetAll successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				listTransitGatewayAlertsOpsOptionsModel := &transitgatewayapisv1.ListTransitGatewayAlertsOpsOptions{
					CreatedAt: core.StringPtr("testString"),
					UpdatedAt: core.StringPtr("testString"),
					GatewayID: core.StringPtr("testString"),
					ConnectionID: core.StringPtr("testString"),
					Status: core.StringPtr("testString"),
					Situation: core.StringPtr("testString"),
					RootCause: core.StringPtr("testString"),
					DeviceID: core.StringPtr("testString"),
					Limit: core.Int64Ptr(int64(10)),
					DatabaseID: core.StringPtr("testString"),
				}

				pager, err := transitGatewayApisService.NewTransitGatewayAlertsOpsPager(listTransitGatewayAlertsOpsOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				allResults, err := pager.GetAll()
				Expect(err).To(BeNil())
				Expect(allResults).ToNot(BeNil())
				Expect(len(allResults)).To(Equal(2))
			})
		})
	})
	Describe(`ListConnectionsInternal(listConnectionsInternalOptions *ListConnectionsInternalOptions) - Operation response error`, func() {
		version := "testString"
		listConnectionsInternalPath := "/internal/v1/connections"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listConnectionsInternalPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["network_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListConnectionsInternal with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListConnectionsInternalOptions model
				listConnectionsInternalOptionsModel := new(transitgatewayapisv1.ListConnectionsInternalOptions)
				listConnectionsInternalOptionsModel.NetworkID = core.StringPtr("testString")
				listConnectionsInternalOptionsModel.Limit = core.Int64Ptr(int64(10))
				listConnectionsInternalOptionsModel.Start = core.StringPtr("testString")
				listConnectionsInternalOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.ListConnectionsInternal(listConnectionsInternalOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.ListConnectionsInternal(listConnectionsInternalOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListConnectionsInternal(listConnectionsInternalOptions *ListConnectionsInternalOptions)`, func() {
		version := "testString"
		listConnectionsInternalPath := "/internal/v1/connections"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listConnectionsInternalPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["network_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"connections": [{"base_connection_id": "975f58c1-afe7-469a-9727-7f3d720f2d32", "base_network_type": "classic", "created_at": "2019-01-01T12:00:00.000Z", "data_center": {"name": "dal10"}, "gre_endpoint_prefix": "10.10.0.0/16", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "local_bgp_asn": 64490, "local_gateway_ip": "192.168.100.1", "local_tunnel_ip": "192.168.129.2", "mtu": 9000, "name": "Transit_Service_SJ_DL", "network_account_id": "28e4d90ac7504be694471ee66e70d0d5", "network_id": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "network_type": "vpc", "prefix_filters": [{"action": "permit", "before": "1a15dcab-7e40-45e1-b7c5-bc690eaa9782", "created_at": "2019-01-01T12:00:00.000Z", "ge": 0, "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "le": 32, "prefix": "192.168.100.0/24", "updated_at": "2019-01-01T12:00:00.000Z"}], "prefix_filters_default": "permit", "remote_bgp_asn": 65010, "remote_gateway_ip": "10.242.63.12", "remote_tunnel_ip": "192.168.129.1", "request_status": "pending", "status": "attached", "transit_gateway": {"crn": "crn:v1:bluemix:public:transit:us-south:a/123456::gateway:456f58c1-afe7-123a-0a0a-7f3d720f1a44", "id": "456f58c1-afe7-123a-0a0a-7f3d720f1a44", "leak_route_distinguisher": "47902:3255120092", "name": "my-transit-gw100", "route_distinguisher": "47902:3255120092", "route_target": "47902:3255120092"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "first": {"href": "https://internal.transit.cloud.ibm.com/internal/v1/connections?limit=50"}, "limit": 50, "next": {"href": "https://internal.transit.cloud.ibm.com/internal/v1/connections?start=MjAyMC0wNS0wOVQxNjoyMDoyMC4yMjQ5NzNa&limit=50", "start": "MjAyMC0wNS0wOVQxNjoyMDoyMC4yMjQ5NzNa"}}`)
				}))
			})
			It(`Invoke ListConnectionsInternal successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the ListConnectionsInternalOptions model
				listConnectionsInternalOptionsModel := new(transitgatewayapisv1.ListConnectionsInternalOptions)
				listConnectionsInternalOptionsModel.NetworkID = core.StringPtr("testString")
				listConnectionsInternalOptionsModel.Limit = core.Int64Ptr(int64(10))
				listConnectionsInternalOptionsModel.Start = core.StringPtr("testString")
				listConnectionsInternalOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.ListConnectionsInternalWithContext(ctx, listConnectionsInternalOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.ListConnectionsInternal(listConnectionsInternalOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.ListConnectionsInternalWithContext(ctx, listConnectionsInternalOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listConnectionsInternalPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["network_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"connections": [{"base_connection_id": "975f58c1-afe7-469a-9727-7f3d720f2d32", "base_network_type": "classic", "created_at": "2019-01-01T12:00:00.000Z", "data_center": {"name": "dal10"}, "gre_endpoint_prefix": "10.10.0.0/16", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "local_bgp_asn": 64490, "local_gateway_ip": "192.168.100.1", "local_tunnel_ip": "192.168.129.2", "mtu": 9000, "name": "Transit_Service_SJ_DL", "network_account_id": "28e4d90ac7504be694471ee66e70d0d5", "network_id": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "network_type": "vpc", "prefix_filters": [{"action": "permit", "before": "1a15dcab-7e40-45e1-b7c5-bc690eaa9782", "created_at": "2019-01-01T12:00:00.000Z", "ge": 0, "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "le": 32, "prefix": "192.168.100.0/24", "updated_at": "2019-01-01T12:00:00.000Z"}], "prefix_filters_default": "permit", "remote_bgp_asn": 65010, "remote_gateway_ip": "10.242.63.12", "remote_tunnel_ip": "192.168.129.1", "request_status": "pending", "status": "attached", "transit_gateway": {"crn": "crn:v1:bluemix:public:transit:us-south:a/123456::gateway:456f58c1-afe7-123a-0a0a-7f3d720f1a44", "id": "456f58c1-afe7-123a-0a0a-7f3d720f1a44", "leak_route_distinguisher": "47902:3255120092", "name": "my-transit-gw100", "route_distinguisher": "47902:3255120092", "route_target": "47902:3255120092"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "first": {"href": "https://internal.transit.cloud.ibm.com/internal/v1/connections?limit=50"}, "limit": 50, "next": {"href": "https://internal.transit.cloud.ibm.com/internal/v1/connections?start=MjAyMC0wNS0wOVQxNjoyMDoyMC4yMjQ5NzNa&limit=50", "start": "MjAyMC0wNS0wOVQxNjoyMDoyMC4yMjQ5NzNa"}}`)
				}))
			})
			It(`Invoke ListConnectionsInternal successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.ListConnectionsInternal(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListConnectionsInternalOptions model
				listConnectionsInternalOptionsModel := new(transitgatewayapisv1.ListConnectionsInternalOptions)
				listConnectionsInternalOptionsModel.NetworkID = core.StringPtr("testString")
				listConnectionsInternalOptionsModel.Limit = core.Int64Ptr(int64(10))
				listConnectionsInternalOptionsModel.Start = core.StringPtr("testString")
				listConnectionsInternalOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.ListConnectionsInternal(listConnectionsInternalOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListConnectionsInternal with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListConnectionsInternalOptions model
				listConnectionsInternalOptionsModel := new(transitgatewayapisv1.ListConnectionsInternalOptions)
				listConnectionsInternalOptionsModel.NetworkID = core.StringPtr("testString")
				listConnectionsInternalOptionsModel.Limit = core.Int64Ptr(int64(10))
				listConnectionsInternalOptionsModel.Start = core.StringPtr("testString")
				listConnectionsInternalOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.ListConnectionsInternal(listConnectionsInternalOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListConnectionsInternalOptions model with no property values
				listConnectionsInternalOptionsModelNew := new(transitgatewayapisv1.ListConnectionsInternalOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.ListConnectionsInternal(listConnectionsInternalOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListConnectionsInternal successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListConnectionsInternalOptions model
				listConnectionsInternalOptionsModel := new(transitgatewayapisv1.ListConnectionsInternalOptions)
				listConnectionsInternalOptionsModel.NetworkID = core.StringPtr("testString")
				listConnectionsInternalOptionsModel.Limit = core.Int64Ptr(int64(10))
				listConnectionsInternalOptionsModel.Start = core.StringPtr("testString")
				listConnectionsInternalOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.ListConnectionsInternal(listConnectionsInternalOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Test pagination helper method on response`, func() {
			It(`Invoke GetNextStart successfully`, func() {
				responseObject := new(transitgatewayapisv1.TransitConnectionCollectionInternal)
				nextObject := new(transitgatewayapisv1.PaginationNextConnectionInternal)
				nextObject.Start = core.StringPtr("abc-123")
				responseObject.Next = nextObject
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(Equal(core.StringPtr("abc-123")))
			})
			It(`Invoke GetNextStart without a "Next" property in the response`, func() {
				responseObject := new(transitgatewayapisv1.TransitConnectionCollectionInternal)
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(BeNil())
			})
		})
		Context(`Using mock server endpoint - paginated response`, func() {
			BeforeEach(func() {
				var requestNumber int = 0
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listConnectionsInternalPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					requestNumber++
					if requestNumber == 1 {
						fmt.Fprintf(res, "%s", `{"next":{"start":"1"},"total_count":2,"limit":1,"connections":[{"base_connection_id":"975f58c1-afe7-469a-9727-7f3d720f2d32","base_network_type":"classic","created_at":"2019-01-01T12:00:00.000Z","data_center":{"name":"dal10"},"gre_endpoint_prefix":"10.10.0.0/16","id":"1a15dca5-7e33-45e1-b7c5-bc690e569531","local_bgp_asn":64490,"local_gateway_ip":"192.168.100.1","local_tunnel_ip":"192.168.129.2","mtu":9000,"name":"Transit_Service_SJ_DL","network_account_id":"28e4d90ac7504be694471ee66e70d0d5","network_id":"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b","network_type":"vpc","prefix_filters":[{"action":"permit","before":"1a15dcab-7e40-45e1-b7c5-bc690eaa9782","created_at":"2019-01-01T12:00:00.000Z","ge":0,"id":"1a15dcab-7e30-45e1-b7c5-bc690eaa9865","le":32,"prefix":"192.168.100.0/24","updated_at":"2019-01-01T12:00:00.000Z"}],"prefix_filters_default":"permit","remote_bgp_asn":65010,"remote_gateway_ip":"10.242.63.12","remote_tunnel_ip":"192.168.129.1","request_status":"pending","status":"attached","transit_gateway":{"crn":"crn:v1:bluemix:public:transit:us-south:a/123456::gateway:456f58c1-afe7-123a-0a0a-7f3d720f1a44","id":"456f58c1-afe7-123a-0a0a-7f3d720f1a44","leak_route_distinguisher":"47902:3255120092","name":"my-transit-gw100","route_distinguisher":"47902:3255120092","route_target":"47902:3255120092"},"updated_at":"2019-01-01T12:00:00.000Z"}]}`)
					} else if requestNumber == 2 {
						fmt.Fprintf(res, "%s", `{"total_count":2,"limit":1,"connections":[{"base_connection_id":"975f58c1-afe7-469a-9727-7f3d720f2d32","base_network_type":"classic","created_at":"2019-01-01T12:00:00.000Z","data_center":{"name":"dal10"},"gre_endpoint_prefix":"10.10.0.0/16","id":"1a15dca5-7e33-45e1-b7c5-bc690e569531","local_bgp_asn":64490,"local_gateway_ip":"192.168.100.1","local_tunnel_ip":"192.168.129.2","mtu":9000,"name":"Transit_Service_SJ_DL","network_account_id":"28e4d90ac7504be694471ee66e70d0d5","network_id":"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b","network_type":"vpc","prefix_filters":[{"action":"permit","before":"1a15dcab-7e40-45e1-b7c5-bc690eaa9782","created_at":"2019-01-01T12:00:00.000Z","ge":0,"id":"1a15dcab-7e30-45e1-b7c5-bc690eaa9865","le":32,"prefix":"192.168.100.0/24","updated_at":"2019-01-01T12:00:00.000Z"}],"prefix_filters_default":"permit","remote_bgp_asn":65010,"remote_gateway_ip":"10.242.63.12","remote_tunnel_ip":"192.168.129.1","request_status":"pending","status":"attached","transit_gateway":{"crn":"crn:v1:bluemix:public:transit:us-south:a/123456::gateway:456f58c1-afe7-123a-0a0a-7f3d720f1a44","id":"456f58c1-afe7-123a-0a0a-7f3d720f1a44","leak_route_distinguisher":"47902:3255120092","name":"my-transit-gw100","route_distinguisher":"47902:3255120092","route_target":"47902:3255120092"},"updated_at":"2019-01-01T12:00:00.000Z"}]}`)
					} else {
						res.WriteHeader(400)
					}
				}))
			})
			It(`Use ConnectionsInternalPager.GetNext successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				listConnectionsInternalOptionsModel := &transitgatewayapisv1.ListConnectionsInternalOptions{
					NetworkID: core.StringPtr("testString"),
					Limit: core.Int64Ptr(int64(10)),
				}

				pager, err := transitGatewayApisService.NewConnectionsInternalPager(listConnectionsInternalOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				var allResults []transitgatewayapisv1.TransitConnectionInternal
				for pager.HasNext() {
					nextPage, err := pager.GetNext()
					Expect(err).To(BeNil())
					Expect(nextPage).ToNot(BeNil())
					allResults = append(allResults, nextPage...)
				}
				Expect(len(allResults)).To(Equal(2))
			})
			It(`Use ConnectionsInternalPager.GetAll successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				listConnectionsInternalOptionsModel := &transitgatewayapisv1.ListConnectionsInternalOptions{
					NetworkID: core.StringPtr("testString"),
					Limit: core.Int64Ptr(int64(10)),
				}

				pager, err := transitGatewayApisService.NewConnectionsInternalPager(listConnectionsInternalOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				allResults, err := pager.GetAll()
				Expect(err).To(BeNil())
				Expect(allResults).ToNot(BeNil())
				Expect(len(allResults)).To(Equal(2))
			})
		})
	})
	Describe(`DeleteVpcTransitGatewayConnections(deleteVpcTransitGatewayConnectionsOptions *DeleteVpcTransitGatewayConnectionsOptions) - Operation response error`, func() {
		version := "testString"
		deleteVpcTransitGatewayConnectionsPath := "/internal/v1/vpcs/testString/transit_gateway_connections"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteVpcTransitGatewayConnectionsPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke DeleteVpcTransitGatewayConnections with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the DeleteVpcTransitGatewayConnectionsOptions model
				deleteVpcTransitGatewayConnectionsOptionsModel := new(transitgatewayapisv1.DeleteVpcTransitGatewayConnectionsOptions)
				deleteVpcTransitGatewayConnectionsOptionsModel.VpcCrn = core.StringPtr("testString")
				deleteVpcTransitGatewayConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.DeleteVpcTransitGatewayConnections(deleteVpcTransitGatewayConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.DeleteVpcTransitGatewayConnections(deleteVpcTransitGatewayConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteVpcTransitGatewayConnections(deleteVpcTransitGatewayConnectionsOptions *DeleteVpcTransitGatewayConnectionsOptions)`, func() {
		version := "testString"
		deleteVpcTransitGatewayConnectionsPath := "/internal/v1/vpcs/testString/transit_gateway_connections"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteVpcTransitGatewayConnectionsPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"active_transit_gateways": [{"id": "c36dde1a-7a6c-4665-acb5-0fe4ce2c1111"}]}`)
				}))
			})
			It(`Invoke DeleteVpcTransitGatewayConnections successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the DeleteVpcTransitGatewayConnectionsOptions model
				deleteVpcTransitGatewayConnectionsOptionsModel := new(transitgatewayapisv1.DeleteVpcTransitGatewayConnectionsOptions)
				deleteVpcTransitGatewayConnectionsOptionsModel.VpcCrn = core.StringPtr("testString")
				deleteVpcTransitGatewayConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.DeleteVpcTransitGatewayConnectionsWithContext(ctx, deleteVpcTransitGatewayConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.DeleteVpcTransitGatewayConnections(deleteVpcTransitGatewayConnectionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.DeleteVpcTransitGatewayConnectionsWithContext(ctx, deleteVpcTransitGatewayConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteVpcTransitGatewayConnectionsPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"active_transit_gateways": [{"id": "c36dde1a-7a6c-4665-acb5-0fe4ce2c1111"}]}`)
				}))
			})
			It(`Invoke DeleteVpcTransitGatewayConnections successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.DeleteVpcTransitGatewayConnections(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the DeleteVpcTransitGatewayConnectionsOptions model
				deleteVpcTransitGatewayConnectionsOptionsModel := new(transitgatewayapisv1.DeleteVpcTransitGatewayConnectionsOptions)
				deleteVpcTransitGatewayConnectionsOptionsModel.VpcCrn = core.StringPtr("testString")
				deleteVpcTransitGatewayConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.DeleteVpcTransitGatewayConnections(deleteVpcTransitGatewayConnectionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke DeleteVpcTransitGatewayConnections with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the DeleteVpcTransitGatewayConnectionsOptions model
				deleteVpcTransitGatewayConnectionsOptionsModel := new(transitgatewayapisv1.DeleteVpcTransitGatewayConnectionsOptions)
				deleteVpcTransitGatewayConnectionsOptionsModel.VpcCrn = core.StringPtr("testString")
				deleteVpcTransitGatewayConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.DeleteVpcTransitGatewayConnections(deleteVpcTransitGatewayConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the DeleteVpcTransitGatewayConnectionsOptions model with no property values
				deleteVpcTransitGatewayConnectionsOptionsModelNew := new(transitgatewayapisv1.DeleteVpcTransitGatewayConnectionsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.DeleteVpcTransitGatewayConnections(deleteVpcTransitGatewayConnectionsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke DeleteVpcTransitGatewayConnections successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the DeleteVpcTransitGatewayConnectionsOptions model
				deleteVpcTransitGatewayConnectionsOptionsModel := new(transitgatewayapisv1.DeleteVpcTransitGatewayConnectionsOptions)
				deleteVpcTransitGatewayConnectionsOptionsModel.VpcCrn = core.StringPtr("testString")
				deleteVpcTransitGatewayConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.DeleteVpcTransitGatewayConnections(deleteVpcTransitGatewayConnectionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListGatewayDevices(listGatewayDevicesOptions *ListGatewayDevicesOptions) - Operation response error`, func() {
		version := "testString"
		listGatewayDevicesPath := "/ops/gateway_devices"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listGatewayDevicesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListGatewayDevices with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListGatewayDevicesOptions model
				listGatewayDevicesOptionsModel := new(transitgatewayapisv1.ListGatewayDevicesOptions)
				listGatewayDevicesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.ListGatewayDevices(listGatewayDevicesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.ListGatewayDevices(listGatewayDevicesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListGatewayDevices(listGatewayDevicesOptions *ListGatewayDevicesOptions)`, func() {
		version := "testString"
		listGatewayDevicesPath := "/ops/gateway_devices"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listGatewayDevicesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"gateway_devices": [{"data_center": "dal10", "gateway_location": "us-south", "hostname": "tsr01dal01.softlayer.local", "created_at": "2017-07-21T17:32:28.000Z", "database_id": 234, "id": "ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "status": "up", "sync_status": "in_progress", "updated_at": "2017-07-21T17:32:28.000Z"}]}`)
				}))
			})
			It(`Invoke ListGatewayDevices successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the ListGatewayDevicesOptions model
				listGatewayDevicesOptionsModel := new(transitgatewayapisv1.ListGatewayDevicesOptions)
				listGatewayDevicesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.ListGatewayDevicesWithContext(ctx, listGatewayDevicesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.ListGatewayDevices(listGatewayDevicesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.ListGatewayDevicesWithContext(ctx, listGatewayDevicesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listGatewayDevicesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"gateway_devices": [{"data_center": "dal10", "gateway_location": "us-south", "hostname": "tsr01dal01.softlayer.local", "created_at": "2017-07-21T17:32:28.000Z", "database_id": 234, "id": "ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "status": "up", "sync_status": "in_progress", "updated_at": "2017-07-21T17:32:28.000Z"}]}`)
				}))
			})
			It(`Invoke ListGatewayDevices successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.ListGatewayDevices(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListGatewayDevicesOptions model
				listGatewayDevicesOptionsModel := new(transitgatewayapisv1.ListGatewayDevicesOptions)
				listGatewayDevicesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.ListGatewayDevices(listGatewayDevicesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListGatewayDevices with error: Operation request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListGatewayDevicesOptions model
				listGatewayDevicesOptionsModel := new(transitgatewayapisv1.ListGatewayDevicesOptions)
				listGatewayDevicesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.ListGatewayDevices(listGatewayDevicesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListGatewayDevices successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListGatewayDevicesOptions model
				listGatewayDevicesOptionsModel := new(transitgatewayapisv1.ListGatewayDevicesOptions)
				listGatewayDevicesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.ListGatewayDevices(listGatewayDevicesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateGatewayDevice(createGatewayDeviceOptions *CreateGatewayDeviceOptions) - Operation response error`, func() {
		version := "testString"
		createGatewayDevicePath := "/ops/gateway_devices"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createGatewayDevicePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateGatewayDevice with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateGatewayDeviceOptions model
				createGatewayDeviceOptionsModel := new(transitgatewayapisv1.CreateGatewayDeviceOptions)
				createGatewayDeviceOptionsModel.DataCenter = core.StringPtr("dal10")
				createGatewayDeviceOptionsModel.GatewayLocation = core.StringPtr("us-south")
				createGatewayDeviceOptionsModel.Hostname = core.StringPtr("tsr01dal01.softlayer.local")
				createGatewayDeviceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.CreateGatewayDevice(createGatewayDeviceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.CreateGatewayDevice(createGatewayDeviceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateGatewayDevice(createGatewayDeviceOptions *CreateGatewayDeviceOptions)`, func() {
		version := "testString"
		createGatewayDevicePath := "/ops/gateway_devices"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createGatewayDevicePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"data_center": "dal10", "gateway_location": "us-south", "hostname": "tsr01dal01.softlayer.local", "created_at": "2017-07-21T17:32:28.000Z", "database_id": 234, "id": "ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "status": "up", "sync_status": "in_progress", "updated_at": "2017-07-21T17:32:28.000Z"}`)
				}))
			})
			It(`Invoke CreateGatewayDevice successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the CreateGatewayDeviceOptions model
				createGatewayDeviceOptionsModel := new(transitgatewayapisv1.CreateGatewayDeviceOptions)
				createGatewayDeviceOptionsModel.DataCenter = core.StringPtr("dal10")
				createGatewayDeviceOptionsModel.GatewayLocation = core.StringPtr("us-south")
				createGatewayDeviceOptionsModel.Hostname = core.StringPtr("tsr01dal01.softlayer.local")
				createGatewayDeviceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.CreateGatewayDeviceWithContext(ctx, createGatewayDeviceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.CreateGatewayDevice(createGatewayDeviceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.CreateGatewayDeviceWithContext(ctx, createGatewayDeviceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createGatewayDevicePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"data_center": "dal10", "gateway_location": "us-south", "hostname": "tsr01dal01.softlayer.local", "created_at": "2017-07-21T17:32:28.000Z", "database_id": 234, "id": "ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "status": "up", "sync_status": "in_progress", "updated_at": "2017-07-21T17:32:28.000Z"}`)
				}))
			})
			It(`Invoke CreateGatewayDevice successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.CreateGatewayDevice(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateGatewayDeviceOptions model
				createGatewayDeviceOptionsModel := new(transitgatewayapisv1.CreateGatewayDeviceOptions)
				createGatewayDeviceOptionsModel.DataCenter = core.StringPtr("dal10")
				createGatewayDeviceOptionsModel.GatewayLocation = core.StringPtr("us-south")
				createGatewayDeviceOptionsModel.Hostname = core.StringPtr("tsr01dal01.softlayer.local")
				createGatewayDeviceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.CreateGatewayDevice(createGatewayDeviceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateGatewayDevice with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateGatewayDeviceOptions model
				createGatewayDeviceOptionsModel := new(transitgatewayapisv1.CreateGatewayDeviceOptions)
				createGatewayDeviceOptionsModel.DataCenter = core.StringPtr("dal10")
				createGatewayDeviceOptionsModel.GatewayLocation = core.StringPtr("us-south")
				createGatewayDeviceOptionsModel.Hostname = core.StringPtr("tsr01dal01.softlayer.local")
				createGatewayDeviceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.CreateGatewayDevice(createGatewayDeviceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateGatewayDeviceOptions model with no property values
				createGatewayDeviceOptionsModelNew := new(transitgatewayapisv1.CreateGatewayDeviceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.CreateGatewayDevice(createGatewayDeviceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateGatewayDevice successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateGatewayDeviceOptions model
				createGatewayDeviceOptionsModel := new(transitgatewayapisv1.CreateGatewayDeviceOptions)
				createGatewayDeviceOptionsModel.DataCenter = core.StringPtr("dal10")
				createGatewayDeviceOptionsModel.GatewayLocation = core.StringPtr("us-south")
				createGatewayDeviceOptionsModel.Hostname = core.StringPtr("tsr01dal01.softlayer.local")
				createGatewayDeviceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.CreateGatewayDevice(createGatewayDeviceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteGatewayDevice(deleteGatewayDeviceOptions *DeleteGatewayDeviceOptions)`, func() {
		version := "testString"
		deleteGatewayDevicePath := "/ops/gateway_devices/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteGatewayDevicePath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteGatewayDevice successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := transitGatewayApisService.DeleteGatewayDevice(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteGatewayDeviceOptions model
				deleteGatewayDeviceOptionsModel := new(transitgatewayapisv1.DeleteGatewayDeviceOptions)
				deleteGatewayDeviceOptionsModel.ID = core.StringPtr("testString")
				deleteGatewayDeviceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = transitGatewayApisService.DeleteGatewayDevice(deleteGatewayDeviceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteGatewayDevice with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the DeleteGatewayDeviceOptions model
				deleteGatewayDeviceOptionsModel := new(transitgatewayapisv1.DeleteGatewayDeviceOptions)
				deleteGatewayDeviceOptionsModel.ID = core.StringPtr("testString")
				deleteGatewayDeviceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := transitGatewayApisService.DeleteGatewayDevice(deleteGatewayDeviceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteGatewayDeviceOptions model with no property values
				deleteGatewayDeviceOptionsModelNew := new(transitgatewayapisv1.DeleteGatewayDeviceOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = transitGatewayApisService.DeleteGatewayDevice(deleteGatewayDeviceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetGatewayDeviceDetails(getGatewayDeviceDetailsOptions *GetGatewayDeviceDetailsOptions) - Operation response error`, func() {
		version := "testString"
		getGatewayDeviceDetailsPath := "/ops/gateway_devices/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getGatewayDeviceDetailsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetGatewayDeviceDetails with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetGatewayDeviceDetailsOptions model
				getGatewayDeviceDetailsOptionsModel := new(transitgatewayapisv1.GetGatewayDeviceDetailsOptions)
				getGatewayDeviceDetailsOptionsModel.ID = core.StringPtr("testString")
				getGatewayDeviceDetailsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.GetGatewayDeviceDetails(getGatewayDeviceDetailsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.GetGatewayDeviceDetails(getGatewayDeviceDetailsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetGatewayDeviceDetails(getGatewayDeviceDetailsOptions *GetGatewayDeviceDetailsOptions)`, func() {
		version := "testString"
		getGatewayDeviceDetailsPath := "/ops/gateway_devices/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getGatewayDeviceDetailsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"data_center": "dal10", "gateway_location": "us-south", "hostname": "tsr01dal01.softlayer.local", "created_at": "2017-07-21T17:32:28.000Z", "database_id": 234, "id": "ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "status": "up", "sync_status": "in_progress", "updated_at": "2017-07-21T17:32:28.000Z"}`)
				}))
			})
			It(`Invoke GetGatewayDeviceDetails successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the GetGatewayDeviceDetailsOptions model
				getGatewayDeviceDetailsOptionsModel := new(transitgatewayapisv1.GetGatewayDeviceDetailsOptions)
				getGatewayDeviceDetailsOptionsModel.ID = core.StringPtr("testString")
				getGatewayDeviceDetailsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.GetGatewayDeviceDetailsWithContext(ctx, getGatewayDeviceDetailsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.GetGatewayDeviceDetails(getGatewayDeviceDetailsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.GetGatewayDeviceDetailsWithContext(ctx, getGatewayDeviceDetailsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getGatewayDeviceDetailsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"data_center": "dal10", "gateway_location": "us-south", "hostname": "tsr01dal01.softlayer.local", "created_at": "2017-07-21T17:32:28.000Z", "database_id": 234, "id": "ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "status": "up", "sync_status": "in_progress", "updated_at": "2017-07-21T17:32:28.000Z"}`)
				}))
			})
			It(`Invoke GetGatewayDeviceDetails successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.GetGatewayDeviceDetails(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetGatewayDeviceDetailsOptions model
				getGatewayDeviceDetailsOptionsModel := new(transitgatewayapisv1.GetGatewayDeviceDetailsOptions)
				getGatewayDeviceDetailsOptionsModel.ID = core.StringPtr("testString")
				getGatewayDeviceDetailsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.GetGatewayDeviceDetails(getGatewayDeviceDetailsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetGatewayDeviceDetails with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetGatewayDeviceDetailsOptions model
				getGatewayDeviceDetailsOptionsModel := new(transitgatewayapisv1.GetGatewayDeviceDetailsOptions)
				getGatewayDeviceDetailsOptionsModel.ID = core.StringPtr("testString")
				getGatewayDeviceDetailsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.GetGatewayDeviceDetails(getGatewayDeviceDetailsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetGatewayDeviceDetailsOptions model with no property values
				getGatewayDeviceDetailsOptionsModelNew := new(transitgatewayapisv1.GetGatewayDeviceDetailsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.GetGatewayDeviceDetails(getGatewayDeviceDetailsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetGatewayDeviceDetails successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetGatewayDeviceDetailsOptions model
				getGatewayDeviceDetailsOptionsModel := new(transitgatewayapisv1.GetGatewayDeviceDetailsOptions)
				getGatewayDeviceDetailsOptionsModel.ID = core.StringPtr("testString")
				getGatewayDeviceDetailsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.GetGatewayDeviceDetails(getGatewayDeviceDetailsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateGatewayDevice(updateGatewayDeviceOptions *UpdateGatewayDeviceOptions) - Operation response error`, func() {
		version := "testString"
		updateGatewayDevicePath := "/ops/gateway_devices/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateGatewayDevicePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateGatewayDevice with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the UpdateGatewayDeviceOptions model
				updateGatewayDeviceOptionsModel := new(transitgatewayapisv1.UpdateGatewayDeviceOptions)
				updateGatewayDeviceOptionsModel.ID = core.StringPtr("testString")
				updateGatewayDeviceOptionsModel.DataCenter = core.StringPtr("dal10")
				updateGatewayDeviceOptionsModel.GatewayLocation = core.StringPtr("us-south")
				updateGatewayDeviceOptionsModel.Hostname = core.StringPtr("tsr01dal01.softlayer.local")
				updateGatewayDeviceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.UpdateGatewayDevice(updateGatewayDeviceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.UpdateGatewayDevice(updateGatewayDeviceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateGatewayDevice(updateGatewayDeviceOptions *UpdateGatewayDeviceOptions)`, func() {
		version := "testString"
		updateGatewayDevicePath := "/ops/gateway_devices/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateGatewayDevicePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"data_center": "dal10", "gateway_location": "us-south", "hostname": "tsr01dal01.softlayer.local", "created_at": "2017-07-21T17:32:28.000Z", "database_id": 234, "id": "ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "status": "up", "sync_status": "in_progress", "updated_at": "2017-07-21T17:32:28.000Z"}`)
				}))
			})
			It(`Invoke UpdateGatewayDevice successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the UpdateGatewayDeviceOptions model
				updateGatewayDeviceOptionsModel := new(transitgatewayapisv1.UpdateGatewayDeviceOptions)
				updateGatewayDeviceOptionsModel.ID = core.StringPtr("testString")
				updateGatewayDeviceOptionsModel.DataCenter = core.StringPtr("dal10")
				updateGatewayDeviceOptionsModel.GatewayLocation = core.StringPtr("us-south")
				updateGatewayDeviceOptionsModel.Hostname = core.StringPtr("tsr01dal01.softlayer.local")
				updateGatewayDeviceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.UpdateGatewayDeviceWithContext(ctx, updateGatewayDeviceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.UpdateGatewayDevice(updateGatewayDeviceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.UpdateGatewayDeviceWithContext(ctx, updateGatewayDeviceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateGatewayDevicePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"data_center": "dal10", "gateway_location": "us-south", "hostname": "tsr01dal01.softlayer.local", "created_at": "2017-07-21T17:32:28.000Z", "database_id": 234, "id": "ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "status": "up", "sync_status": "in_progress", "updated_at": "2017-07-21T17:32:28.000Z"}`)
				}))
			})
			It(`Invoke UpdateGatewayDevice successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.UpdateGatewayDevice(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateGatewayDeviceOptions model
				updateGatewayDeviceOptionsModel := new(transitgatewayapisv1.UpdateGatewayDeviceOptions)
				updateGatewayDeviceOptionsModel.ID = core.StringPtr("testString")
				updateGatewayDeviceOptionsModel.DataCenter = core.StringPtr("dal10")
				updateGatewayDeviceOptionsModel.GatewayLocation = core.StringPtr("us-south")
				updateGatewayDeviceOptionsModel.Hostname = core.StringPtr("tsr01dal01.softlayer.local")
				updateGatewayDeviceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.UpdateGatewayDevice(updateGatewayDeviceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateGatewayDevice with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the UpdateGatewayDeviceOptions model
				updateGatewayDeviceOptionsModel := new(transitgatewayapisv1.UpdateGatewayDeviceOptions)
				updateGatewayDeviceOptionsModel.ID = core.StringPtr("testString")
				updateGatewayDeviceOptionsModel.DataCenter = core.StringPtr("dal10")
				updateGatewayDeviceOptionsModel.GatewayLocation = core.StringPtr("us-south")
				updateGatewayDeviceOptionsModel.Hostname = core.StringPtr("tsr01dal01.softlayer.local")
				updateGatewayDeviceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.UpdateGatewayDevice(updateGatewayDeviceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateGatewayDeviceOptions model with no property values
				updateGatewayDeviceOptionsModelNew := new(transitgatewayapisv1.UpdateGatewayDeviceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.UpdateGatewayDevice(updateGatewayDeviceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateGatewayDevice successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the UpdateGatewayDeviceOptions model
				updateGatewayDeviceOptionsModel := new(transitgatewayapisv1.UpdateGatewayDeviceOptions)
				updateGatewayDeviceOptionsModel.ID = core.StringPtr("testString")
				updateGatewayDeviceOptionsModel.DataCenter = core.StringPtr("dal10")
				updateGatewayDeviceOptionsModel.GatewayLocation = core.StringPtr("us-south")
				updateGatewayDeviceOptionsModel.Hostname = core.StringPtr("tsr01dal01.softlayer.local")
				updateGatewayDeviceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.UpdateGatewayDevice(updateGatewayDeviceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateExecutionGatewayDeviceAction(createExecutionGatewayDeviceActionOptions *CreateExecutionGatewayDeviceActionOptions) - Operation response error`, func() {
		version := "testString"
		createExecutionGatewayDeviceActionPath := "/ops/gateway_devices/testString/actions"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createExecutionGatewayDeviceActionPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateExecutionGatewayDeviceAction with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateExecutionGatewayDeviceActionOptions model
				createExecutionGatewayDeviceActionOptionsModel := new(transitgatewayapisv1.CreateExecutionGatewayDeviceActionOptions)
				createExecutionGatewayDeviceActionOptionsModel.ID = core.StringPtr("testString")
				createExecutionGatewayDeviceActionOptionsModel.Action = core.StringPtr("enable")
				createExecutionGatewayDeviceActionOptionsModel.DatabaseID = core.StringPtr("234")
				createExecutionGatewayDeviceActionOptionsModel.GatewayID = core.StringPtr("234")
				createExecutionGatewayDeviceActionOptionsModel.SyncCommand = core.StringPtr("start")
				createExecutionGatewayDeviceActionOptionsModel.TunnelID = core.Int64Ptr(int64(48453))
				createExecutionGatewayDeviceActionOptionsModel.Workflow = core.StringPtr("delete_transit_connection")
				createExecutionGatewayDeviceActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.CreateExecutionGatewayDeviceAction(createExecutionGatewayDeviceActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.CreateExecutionGatewayDeviceAction(createExecutionGatewayDeviceActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateExecutionGatewayDeviceAction(createExecutionGatewayDeviceActionOptions *CreateExecutionGatewayDeviceActionOptions)`, func() {
		version := "testString"
		createExecutionGatewayDeviceActionPath := "/ops/gateway_devices/testString/actions"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createExecutionGatewayDeviceActionPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"data_center": "dal10", "gateway_location": "us-south", "hostname": "tsr01dal01.softlayer.local", "created_at": "2017-07-21T17:32:28.000Z", "database_id": 234, "id": "ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "status": "up", "sync_status": "in_progress", "updated_at": "2017-07-21T17:32:28.000Z"}`)
				}))
			})
			It(`Invoke CreateExecutionGatewayDeviceAction successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the CreateExecutionGatewayDeviceActionOptions model
				createExecutionGatewayDeviceActionOptionsModel := new(transitgatewayapisv1.CreateExecutionGatewayDeviceActionOptions)
				createExecutionGatewayDeviceActionOptionsModel.ID = core.StringPtr("testString")
				createExecutionGatewayDeviceActionOptionsModel.Action = core.StringPtr("enable")
				createExecutionGatewayDeviceActionOptionsModel.DatabaseID = core.StringPtr("234")
				createExecutionGatewayDeviceActionOptionsModel.GatewayID = core.StringPtr("234")
				createExecutionGatewayDeviceActionOptionsModel.SyncCommand = core.StringPtr("start")
				createExecutionGatewayDeviceActionOptionsModel.TunnelID = core.Int64Ptr(int64(48453))
				createExecutionGatewayDeviceActionOptionsModel.Workflow = core.StringPtr("delete_transit_connection")
				createExecutionGatewayDeviceActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.CreateExecutionGatewayDeviceActionWithContext(ctx, createExecutionGatewayDeviceActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.CreateExecutionGatewayDeviceAction(createExecutionGatewayDeviceActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.CreateExecutionGatewayDeviceActionWithContext(ctx, createExecutionGatewayDeviceActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createExecutionGatewayDeviceActionPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"data_center": "dal10", "gateway_location": "us-south", "hostname": "tsr01dal01.softlayer.local", "created_at": "2017-07-21T17:32:28.000Z", "database_id": 234, "id": "ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "status": "up", "sync_status": "in_progress", "updated_at": "2017-07-21T17:32:28.000Z"}`)
				}))
			})
			It(`Invoke CreateExecutionGatewayDeviceAction successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.CreateExecutionGatewayDeviceAction(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateExecutionGatewayDeviceActionOptions model
				createExecutionGatewayDeviceActionOptionsModel := new(transitgatewayapisv1.CreateExecutionGatewayDeviceActionOptions)
				createExecutionGatewayDeviceActionOptionsModel.ID = core.StringPtr("testString")
				createExecutionGatewayDeviceActionOptionsModel.Action = core.StringPtr("enable")
				createExecutionGatewayDeviceActionOptionsModel.DatabaseID = core.StringPtr("234")
				createExecutionGatewayDeviceActionOptionsModel.GatewayID = core.StringPtr("234")
				createExecutionGatewayDeviceActionOptionsModel.SyncCommand = core.StringPtr("start")
				createExecutionGatewayDeviceActionOptionsModel.TunnelID = core.Int64Ptr(int64(48453))
				createExecutionGatewayDeviceActionOptionsModel.Workflow = core.StringPtr("delete_transit_connection")
				createExecutionGatewayDeviceActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.CreateExecutionGatewayDeviceAction(createExecutionGatewayDeviceActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateExecutionGatewayDeviceAction with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateExecutionGatewayDeviceActionOptions model
				createExecutionGatewayDeviceActionOptionsModel := new(transitgatewayapisv1.CreateExecutionGatewayDeviceActionOptions)
				createExecutionGatewayDeviceActionOptionsModel.ID = core.StringPtr("testString")
				createExecutionGatewayDeviceActionOptionsModel.Action = core.StringPtr("enable")
				createExecutionGatewayDeviceActionOptionsModel.DatabaseID = core.StringPtr("234")
				createExecutionGatewayDeviceActionOptionsModel.GatewayID = core.StringPtr("234")
				createExecutionGatewayDeviceActionOptionsModel.SyncCommand = core.StringPtr("start")
				createExecutionGatewayDeviceActionOptionsModel.TunnelID = core.Int64Ptr(int64(48453))
				createExecutionGatewayDeviceActionOptionsModel.Workflow = core.StringPtr("delete_transit_connection")
				createExecutionGatewayDeviceActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.CreateExecutionGatewayDeviceAction(createExecutionGatewayDeviceActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateExecutionGatewayDeviceActionOptions model with no property values
				createExecutionGatewayDeviceActionOptionsModelNew := new(transitgatewayapisv1.CreateExecutionGatewayDeviceActionOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.CreateExecutionGatewayDeviceAction(createExecutionGatewayDeviceActionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke CreateExecutionGatewayDeviceAction successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateExecutionGatewayDeviceActionOptions model
				createExecutionGatewayDeviceActionOptionsModel := new(transitgatewayapisv1.CreateExecutionGatewayDeviceActionOptions)
				createExecutionGatewayDeviceActionOptionsModel.ID = core.StringPtr("testString")
				createExecutionGatewayDeviceActionOptionsModel.Action = core.StringPtr("enable")
				createExecutionGatewayDeviceActionOptionsModel.DatabaseID = core.StringPtr("234")
				createExecutionGatewayDeviceActionOptionsModel.GatewayID = core.StringPtr("234")
				createExecutionGatewayDeviceActionOptionsModel.SyncCommand = core.StringPtr("start")
				createExecutionGatewayDeviceActionOptionsModel.TunnelID = core.Int64Ptr(int64(48453))
				createExecutionGatewayDeviceActionOptionsModel.Workflow = core.StringPtr("delete_transit_connection")
				createExecutionGatewayDeviceActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.CreateExecutionGatewayDeviceAction(createExecutionGatewayDeviceActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateExecutionGatewayDeviceCommands(createExecutionGatewayDeviceCommandsOptions *CreateExecutionGatewayDeviceCommandsOptions) - Operation response error`, func() {
		version := "testString"
		createExecutionGatewayDeviceCommandsPath := "/ops/gateway_devices/testString/commands"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createExecutionGatewayDeviceCommandsPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateExecutionGatewayDeviceCommands with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateExecutionGatewayDeviceCommandsOptions model
				createExecutionGatewayDeviceCommandsOptionsModel := new(transitgatewayapisv1.CreateExecutionGatewayDeviceCommandsOptions)
				createExecutionGatewayDeviceCommandsOptionsModel.ID = core.StringPtr("testString")
				createExecutionGatewayDeviceCommandsOptionsModel.Command = core.StringPtr("list_gateways")
				createExecutionGatewayDeviceCommandsOptionsModel.NexthopIp = core.StringPtr("10.10.0.1")
				createExecutionGatewayDeviceCommandsOptionsModel.TimeInterval = core.Int64Ptr(int64(60))
				createExecutionGatewayDeviceCommandsOptionsModel.VrfID = core.StringPtr("HUB-123-SPOKE-456")
				createExecutionGatewayDeviceCommandsOptionsModel.VrfsCountLimit = core.Int64Ptr(int64(10))
				createExecutionGatewayDeviceCommandsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.CreateExecutionGatewayDeviceCommands(createExecutionGatewayDeviceCommandsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.CreateExecutionGatewayDeviceCommands(createExecutionGatewayDeviceCommandsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateExecutionGatewayDeviceCommands(createExecutionGatewayDeviceCommandsOptions *CreateExecutionGatewayDeviceCommandsOptions)`, func() {
		version := "testString"
		createExecutionGatewayDeviceCommandsPath := "/ops/gateway_devices/testString/commands"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createExecutionGatewayDeviceCommandsPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"exit_code": 0, "format": "application/json", "result": "[{"id": "gw_id", "name":...}]"}`)
				}))
			})
			It(`Invoke CreateExecutionGatewayDeviceCommands successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the CreateExecutionGatewayDeviceCommandsOptions model
				createExecutionGatewayDeviceCommandsOptionsModel := new(transitgatewayapisv1.CreateExecutionGatewayDeviceCommandsOptions)
				createExecutionGatewayDeviceCommandsOptionsModel.ID = core.StringPtr("testString")
				createExecutionGatewayDeviceCommandsOptionsModel.Command = core.StringPtr("list_gateways")
				createExecutionGatewayDeviceCommandsOptionsModel.NexthopIp = core.StringPtr("10.10.0.1")
				createExecutionGatewayDeviceCommandsOptionsModel.TimeInterval = core.Int64Ptr(int64(60))
				createExecutionGatewayDeviceCommandsOptionsModel.VrfID = core.StringPtr("HUB-123-SPOKE-456")
				createExecutionGatewayDeviceCommandsOptionsModel.VrfsCountLimit = core.Int64Ptr(int64(10))
				createExecutionGatewayDeviceCommandsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.CreateExecutionGatewayDeviceCommandsWithContext(ctx, createExecutionGatewayDeviceCommandsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.CreateExecutionGatewayDeviceCommands(createExecutionGatewayDeviceCommandsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.CreateExecutionGatewayDeviceCommandsWithContext(ctx, createExecutionGatewayDeviceCommandsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createExecutionGatewayDeviceCommandsPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"exit_code": 0, "format": "application/json", "result": "[{"id": "gw_id", "name":...}]"}`)
				}))
			})
			It(`Invoke CreateExecutionGatewayDeviceCommands successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.CreateExecutionGatewayDeviceCommands(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateExecutionGatewayDeviceCommandsOptions model
				createExecutionGatewayDeviceCommandsOptionsModel := new(transitgatewayapisv1.CreateExecutionGatewayDeviceCommandsOptions)
				createExecutionGatewayDeviceCommandsOptionsModel.ID = core.StringPtr("testString")
				createExecutionGatewayDeviceCommandsOptionsModel.Command = core.StringPtr("list_gateways")
				createExecutionGatewayDeviceCommandsOptionsModel.NexthopIp = core.StringPtr("10.10.0.1")
				createExecutionGatewayDeviceCommandsOptionsModel.TimeInterval = core.Int64Ptr(int64(60))
				createExecutionGatewayDeviceCommandsOptionsModel.VrfID = core.StringPtr("HUB-123-SPOKE-456")
				createExecutionGatewayDeviceCommandsOptionsModel.VrfsCountLimit = core.Int64Ptr(int64(10))
				createExecutionGatewayDeviceCommandsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.CreateExecutionGatewayDeviceCommands(createExecutionGatewayDeviceCommandsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateExecutionGatewayDeviceCommands with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateExecutionGatewayDeviceCommandsOptions model
				createExecutionGatewayDeviceCommandsOptionsModel := new(transitgatewayapisv1.CreateExecutionGatewayDeviceCommandsOptions)
				createExecutionGatewayDeviceCommandsOptionsModel.ID = core.StringPtr("testString")
				createExecutionGatewayDeviceCommandsOptionsModel.Command = core.StringPtr("list_gateways")
				createExecutionGatewayDeviceCommandsOptionsModel.NexthopIp = core.StringPtr("10.10.0.1")
				createExecutionGatewayDeviceCommandsOptionsModel.TimeInterval = core.Int64Ptr(int64(60))
				createExecutionGatewayDeviceCommandsOptionsModel.VrfID = core.StringPtr("HUB-123-SPOKE-456")
				createExecutionGatewayDeviceCommandsOptionsModel.VrfsCountLimit = core.Int64Ptr(int64(10))
				createExecutionGatewayDeviceCommandsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.CreateExecutionGatewayDeviceCommands(createExecutionGatewayDeviceCommandsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateExecutionGatewayDeviceCommandsOptions model with no property values
				createExecutionGatewayDeviceCommandsOptionsModelNew := new(transitgatewayapisv1.CreateExecutionGatewayDeviceCommandsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.CreateExecutionGatewayDeviceCommands(createExecutionGatewayDeviceCommandsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke CreateExecutionGatewayDeviceCommands successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateExecutionGatewayDeviceCommandsOptions model
				createExecutionGatewayDeviceCommandsOptionsModel := new(transitgatewayapisv1.CreateExecutionGatewayDeviceCommandsOptions)
				createExecutionGatewayDeviceCommandsOptionsModel.ID = core.StringPtr("testString")
				createExecutionGatewayDeviceCommandsOptionsModel.Command = core.StringPtr("list_gateways")
				createExecutionGatewayDeviceCommandsOptionsModel.NexthopIp = core.StringPtr("10.10.0.1")
				createExecutionGatewayDeviceCommandsOptionsModel.TimeInterval = core.Int64Ptr(int64(60))
				createExecutionGatewayDeviceCommandsOptionsModel.VrfID = core.StringPtr("HUB-123-SPOKE-456")
				createExecutionGatewayDeviceCommandsOptionsModel.VrfsCountLimit = core.Int64Ptr(int64(10))
				createExecutionGatewayDeviceCommandsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.CreateExecutionGatewayDeviceCommands(createExecutionGatewayDeviceCommandsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListGatewayDeviceConnections(listGatewayDeviceConnectionsOptions *ListGatewayDeviceConnectionsOptions) - Operation response error`, func() {
		version := "testString"
		listGatewayDeviceConnectionsPath := "/ops/gateway_devices/testString/connections"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listGatewayDeviceConnectionsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["network_type"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListGatewayDeviceConnections with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListGatewayDeviceConnectionsOptions model
				listGatewayDeviceConnectionsOptionsModel := new(transitgatewayapisv1.ListGatewayDeviceConnectionsOptions)
				listGatewayDeviceConnectionsOptionsModel.ID = core.StringPtr("testString")
				listGatewayDeviceConnectionsOptionsModel.NetworkType = core.StringPtr("testString")
				listGatewayDeviceConnectionsOptionsModel.Start = core.StringPtr("testString")
				listGatewayDeviceConnectionsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listGatewayDeviceConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.ListGatewayDeviceConnections(listGatewayDeviceConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.ListGatewayDeviceConnections(listGatewayDeviceConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListGatewayDeviceConnections(listGatewayDeviceConnectionsOptions *ListGatewayDeviceConnectionsOptions)`, func() {
		version := "testString"
		listGatewayDeviceConnectionsPath := "/ops/gateway_devices/testString/connections"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listGatewayDeviceConnectionsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["network_type"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://internal.transit.cloud.ibm.com/v1"}, "limit": 20, "next": {"href": "https://internal.transit.cloud.ibm.com/v1"}, "total_count": 132, "connections": [{"id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "base_network_type": "classic", "name": "Transit_Service_BWTN_SJ_DL", "network_id": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "network_type": "vpc", "account_id": "28e4d90ac7504be694471ee66e70d0d5", "configuration_status": "available", "database_id": 234, "gateway_id": "ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "tunnel_id": 48453}]}`)
				}))
			})
			It(`Invoke ListGatewayDeviceConnections successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the ListGatewayDeviceConnectionsOptions model
				listGatewayDeviceConnectionsOptionsModel := new(transitgatewayapisv1.ListGatewayDeviceConnectionsOptions)
				listGatewayDeviceConnectionsOptionsModel.ID = core.StringPtr("testString")
				listGatewayDeviceConnectionsOptionsModel.NetworkType = core.StringPtr("testString")
				listGatewayDeviceConnectionsOptionsModel.Start = core.StringPtr("testString")
				listGatewayDeviceConnectionsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listGatewayDeviceConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.ListGatewayDeviceConnectionsWithContext(ctx, listGatewayDeviceConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.ListGatewayDeviceConnections(listGatewayDeviceConnectionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.ListGatewayDeviceConnectionsWithContext(ctx, listGatewayDeviceConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listGatewayDeviceConnectionsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["network_type"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://internal.transit.cloud.ibm.com/v1"}, "limit": 20, "next": {"href": "https://internal.transit.cloud.ibm.com/v1"}, "total_count": 132, "connections": [{"id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "base_network_type": "classic", "name": "Transit_Service_BWTN_SJ_DL", "network_id": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "network_type": "vpc", "account_id": "28e4d90ac7504be694471ee66e70d0d5", "configuration_status": "available", "database_id": 234, "gateway_id": "ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "tunnel_id": 48453}]}`)
				}))
			})
			It(`Invoke ListGatewayDeviceConnections successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.ListGatewayDeviceConnections(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListGatewayDeviceConnectionsOptions model
				listGatewayDeviceConnectionsOptionsModel := new(transitgatewayapisv1.ListGatewayDeviceConnectionsOptions)
				listGatewayDeviceConnectionsOptionsModel.ID = core.StringPtr("testString")
				listGatewayDeviceConnectionsOptionsModel.NetworkType = core.StringPtr("testString")
				listGatewayDeviceConnectionsOptionsModel.Start = core.StringPtr("testString")
				listGatewayDeviceConnectionsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listGatewayDeviceConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.ListGatewayDeviceConnections(listGatewayDeviceConnectionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListGatewayDeviceConnections with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListGatewayDeviceConnectionsOptions model
				listGatewayDeviceConnectionsOptionsModel := new(transitgatewayapisv1.ListGatewayDeviceConnectionsOptions)
				listGatewayDeviceConnectionsOptionsModel.ID = core.StringPtr("testString")
				listGatewayDeviceConnectionsOptionsModel.NetworkType = core.StringPtr("testString")
				listGatewayDeviceConnectionsOptionsModel.Start = core.StringPtr("testString")
				listGatewayDeviceConnectionsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listGatewayDeviceConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.ListGatewayDeviceConnections(listGatewayDeviceConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListGatewayDeviceConnectionsOptions model with no property values
				listGatewayDeviceConnectionsOptionsModelNew := new(transitgatewayapisv1.ListGatewayDeviceConnectionsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.ListGatewayDeviceConnections(listGatewayDeviceConnectionsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListGatewayDeviceConnections successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListGatewayDeviceConnectionsOptions model
				listGatewayDeviceConnectionsOptionsModel := new(transitgatewayapisv1.ListGatewayDeviceConnectionsOptions)
				listGatewayDeviceConnectionsOptionsModel.ID = core.StringPtr("testString")
				listGatewayDeviceConnectionsOptionsModel.NetworkType = core.StringPtr("testString")
				listGatewayDeviceConnectionsOptionsModel.Start = core.StringPtr("testString")
				listGatewayDeviceConnectionsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listGatewayDeviceConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.ListGatewayDeviceConnections(listGatewayDeviceConnectionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Test pagination helper method on response`, func() {
			It(`Invoke GetNextStart successfully`, func() {
				responseObject := new(transitgatewayapisv1.GatewayDeviceConnectionCollection)
				nextObject := new(transitgatewayapisv1.NextOps)
				nextObject.Href = core.StringPtr("ibm.com?start=abc-123")
				responseObject.Next = nextObject
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(Equal(core.StringPtr("abc-123")))
			})
			It(`Invoke GetNextStart without a "Next" property in the response`, func() {
				responseObject := new(transitgatewayapisv1.GatewayDeviceConnectionCollection)
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(BeNil())
			})
			It(`Invoke GetNextStart without any query params in the "Next" URL`, func() {
				responseObject := new(transitgatewayapisv1.GatewayDeviceConnectionCollection)
				nextObject := new(transitgatewayapisv1.NextOps)
				nextObject.Href = core.StringPtr("ibm.com")
				responseObject.Next = nextObject
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(BeNil())
			})
		})
		Context(`Using mock server endpoint - paginated response`, func() {
			BeforeEach(func() {
				var requestNumber int = 0
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listGatewayDeviceConnectionsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					requestNumber++
					if requestNumber == 1 {
						fmt.Fprintf(res, "%s", `{"next":{"href":"https://myhost.com/somePath?start=1"},"total_count":2,"limit":1,"connections":[{"id":"0a06fb9b-820f-4c44-8a31-77f1f0806d28","base_network_type":"classic","name":"Transit_Service_BWTN_SJ_DL","network_id":"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b","network_type":"vpc","account_id":"28e4d90ac7504be694471ee66e70d0d5","configuration_status":"available","database_id":234,"gateway_id":"ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4","tunnel_id":48453}]}`)
					} else if requestNumber == 2 {
						fmt.Fprintf(res, "%s", `{"total_count":2,"limit":1,"connections":[{"id":"0a06fb9b-820f-4c44-8a31-77f1f0806d28","base_network_type":"classic","name":"Transit_Service_BWTN_SJ_DL","network_id":"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b","network_type":"vpc","account_id":"28e4d90ac7504be694471ee66e70d0d5","configuration_status":"available","database_id":234,"gateway_id":"ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4","tunnel_id":48453}]}`)
					} else {
						res.WriteHeader(400)
					}
				}))
			})
			It(`Use GatewayDeviceConnectionsPager.GetNext successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				listGatewayDeviceConnectionsOptionsModel := &transitgatewayapisv1.ListGatewayDeviceConnectionsOptions{
					ID: core.StringPtr("testString"),
					NetworkType: core.StringPtr("testString"),
					Limit: core.Int64Ptr(int64(10)),
				}

				pager, err := transitGatewayApisService.NewGatewayDeviceConnectionsPager(listGatewayDeviceConnectionsOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				var allResults []transitgatewayapisv1.GatewayDeviceConnection
				for pager.HasNext() {
					nextPage, err := pager.GetNext()
					Expect(err).To(BeNil())
					Expect(nextPage).ToNot(BeNil())
					allResults = append(allResults, nextPage...)
				}
				Expect(len(allResults)).To(Equal(2))
			})
			It(`Use GatewayDeviceConnectionsPager.GetAll successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				listGatewayDeviceConnectionsOptionsModel := &transitgatewayapisv1.ListGatewayDeviceConnectionsOptions{
					ID: core.StringPtr("testString"),
					NetworkType: core.StringPtr("testString"),
					Limit: core.Int64Ptr(int64(10)),
				}

				pager, err := transitGatewayApisService.NewGatewayDeviceConnectionsPager(listGatewayDeviceConnectionsOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				allResults, err := pager.GetAll()
				Expect(err).To(BeNil())
				Expect(allResults).ToNot(BeNil())
				Expect(len(allResults)).To(Equal(2))
			})
		})
	})
	Describe(`ListGatewayDeviceGateways(listGatewayDeviceGatewaysOptions *ListGatewayDeviceGatewaysOptions) - Operation response error`, func() {
		version := "testString"
		listGatewayDeviceGatewaysPath := "/ops/gateway_devices/testString/transit_gateways"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listGatewayDeviceGatewaysPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListGatewayDeviceGateways with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListGatewayDeviceGatewaysOptions model
				listGatewayDeviceGatewaysOptionsModel := new(transitgatewayapisv1.ListGatewayDeviceGatewaysOptions)
				listGatewayDeviceGatewaysOptionsModel.ID = core.StringPtr("testString")
				listGatewayDeviceGatewaysOptionsModel.Start = core.StringPtr("testString")
				listGatewayDeviceGatewaysOptionsModel.Limit = core.Int64Ptr(int64(10))
				listGatewayDeviceGatewaysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.ListGatewayDeviceGateways(listGatewayDeviceGatewaysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.ListGatewayDeviceGateways(listGatewayDeviceGatewaysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListGatewayDeviceGateways(listGatewayDeviceGatewaysOptions *ListGatewayDeviceGatewaysOptions)`, func() {
		version := "testString"
		listGatewayDeviceGatewaysPath := "/ops/gateway_devices/testString/transit_gateways"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listGatewayDeviceGatewaysPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://internal.transit.cloud.ibm.com/v1"}, "limit": 20, "next": {"href": "https://internal.transit.cloud.ibm.com/v1"}, "total_count": 132, "gateways": [{"id": "ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "account_id": "28e4d90ac7504be694471ee66e70d0d5", "configuration_status": "available", "database_id": 234, "name": "Transit_Service_BWTN_SJ_DL"}]}`)
				}))
			})
			It(`Invoke ListGatewayDeviceGateways successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the ListGatewayDeviceGatewaysOptions model
				listGatewayDeviceGatewaysOptionsModel := new(transitgatewayapisv1.ListGatewayDeviceGatewaysOptions)
				listGatewayDeviceGatewaysOptionsModel.ID = core.StringPtr("testString")
				listGatewayDeviceGatewaysOptionsModel.Start = core.StringPtr("testString")
				listGatewayDeviceGatewaysOptionsModel.Limit = core.Int64Ptr(int64(10))
				listGatewayDeviceGatewaysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.ListGatewayDeviceGatewaysWithContext(ctx, listGatewayDeviceGatewaysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.ListGatewayDeviceGateways(listGatewayDeviceGatewaysOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.ListGatewayDeviceGatewaysWithContext(ctx, listGatewayDeviceGatewaysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listGatewayDeviceGatewaysPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://internal.transit.cloud.ibm.com/v1"}, "limit": 20, "next": {"href": "https://internal.transit.cloud.ibm.com/v1"}, "total_count": 132, "gateways": [{"id": "ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "account_id": "28e4d90ac7504be694471ee66e70d0d5", "configuration_status": "available", "database_id": 234, "name": "Transit_Service_BWTN_SJ_DL"}]}`)
				}))
			})
			It(`Invoke ListGatewayDeviceGateways successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.ListGatewayDeviceGateways(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListGatewayDeviceGatewaysOptions model
				listGatewayDeviceGatewaysOptionsModel := new(transitgatewayapisv1.ListGatewayDeviceGatewaysOptions)
				listGatewayDeviceGatewaysOptionsModel.ID = core.StringPtr("testString")
				listGatewayDeviceGatewaysOptionsModel.Start = core.StringPtr("testString")
				listGatewayDeviceGatewaysOptionsModel.Limit = core.Int64Ptr(int64(10))
				listGatewayDeviceGatewaysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.ListGatewayDeviceGateways(listGatewayDeviceGatewaysOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListGatewayDeviceGateways with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListGatewayDeviceGatewaysOptions model
				listGatewayDeviceGatewaysOptionsModel := new(transitgatewayapisv1.ListGatewayDeviceGatewaysOptions)
				listGatewayDeviceGatewaysOptionsModel.ID = core.StringPtr("testString")
				listGatewayDeviceGatewaysOptionsModel.Start = core.StringPtr("testString")
				listGatewayDeviceGatewaysOptionsModel.Limit = core.Int64Ptr(int64(10))
				listGatewayDeviceGatewaysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.ListGatewayDeviceGateways(listGatewayDeviceGatewaysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListGatewayDeviceGatewaysOptions model with no property values
				listGatewayDeviceGatewaysOptionsModelNew := new(transitgatewayapisv1.ListGatewayDeviceGatewaysOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.ListGatewayDeviceGateways(listGatewayDeviceGatewaysOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListGatewayDeviceGateways successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListGatewayDeviceGatewaysOptions model
				listGatewayDeviceGatewaysOptionsModel := new(transitgatewayapisv1.ListGatewayDeviceGatewaysOptions)
				listGatewayDeviceGatewaysOptionsModel.ID = core.StringPtr("testString")
				listGatewayDeviceGatewaysOptionsModel.Start = core.StringPtr("testString")
				listGatewayDeviceGatewaysOptionsModel.Limit = core.Int64Ptr(int64(10))
				listGatewayDeviceGatewaysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.ListGatewayDeviceGateways(listGatewayDeviceGatewaysOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Test pagination helper method on response`, func() {
			It(`Invoke GetNextStart successfully`, func() {
				responseObject := new(transitgatewayapisv1.GatewayDeviceGatewayCollection)
				nextObject := new(transitgatewayapisv1.NextOps)
				nextObject.Href = core.StringPtr("ibm.com?start=abc-123")
				responseObject.Next = nextObject
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(Equal(core.StringPtr("abc-123")))
			})
			It(`Invoke GetNextStart without a "Next" property in the response`, func() {
				responseObject := new(transitgatewayapisv1.GatewayDeviceGatewayCollection)
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(BeNil())
			})
			It(`Invoke GetNextStart without any query params in the "Next" URL`, func() {
				responseObject := new(transitgatewayapisv1.GatewayDeviceGatewayCollection)
				nextObject := new(transitgatewayapisv1.NextOps)
				nextObject.Href = core.StringPtr("ibm.com")
				responseObject.Next = nextObject
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(BeNil())
			})
		})
		Context(`Using mock server endpoint - paginated response`, func() {
			BeforeEach(func() {
				var requestNumber int = 0
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listGatewayDeviceGatewaysPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					requestNumber++
					if requestNumber == 1 {
						fmt.Fprintf(res, "%s", `{"next":{"href":"https://myhost.com/somePath?start=1"},"gateways":[{"id":"ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4","account_id":"28e4d90ac7504be694471ee66e70d0d5","configuration_status":"available","database_id":234,"name":"Transit_Service_BWTN_SJ_DL"}],"total_count":2,"limit":1}`)
					} else if requestNumber == 2 {
						fmt.Fprintf(res, "%s", `{"gateways":[{"id":"ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4","account_id":"28e4d90ac7504be694471ee66e70d0d5","configuration_status":"available","database_id":234,"name":"Transit_Service_BWTN_SJ_DL"}],"total_count":2,"limit":1}`)
					} else {
						res.WriteHeader(400)
					}
				}))
			})
			It(`Use GatewayDeviceGatewaysPager.GetNext successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				listGatewayDeviceGatewaysOptionsModel := &transitgatewayapisv1.ListGatewayDeviceGatewaysOptions{
					ID: core.StringPtr("testString"),
					Limit: core.Int64Ptr(int64(10)),
				}

				pager, err := transitGatewayApisService.NewGatewayDeviceGatewaysPager(listGatewayDeviceGatewaysOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				var allResults []transitgatewayapisv1.GatewayDeviceGateway
				for pager.HasNext() {
					nextPage, err := pager.GetNext()
					Expect(err).To(BeNil())
					Expect(nextPage).ToNot(BeNil())
					allResults = append(allResults, nextPage...)
				}
				Expect(len(allResults)).To(Equal(2))
			})
			It(`Use GatewayDeviceGatewaysPager.GetAll successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				listGatewayDeviceGatewaysOptionsModel := &transitgatewayapisv1.ListGatewayDeviceGatewaysOptions{
					ID: core.StringPtr("testString"),
					Limit: core.Int64Ptr(int64(10)),
				}

				pager, err := transitGatewayApisService.NewGatewayDeviceGatewaysPager(listGatewayDeviceGatewaysOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				allResults, err := pager.GetAll()
				Expect(err).To(BeNil())
				Expect(allResults).ToNot(BeNil())
				Expect(len(allResults)).To(Equal(2))
			})
		})
	})
	Describe(`ListGatewayDevicesAuditsOps(listGatewayDevicesAuditsOpsOptions *ListGatewayDevicesAuditsOpsOptions) - Operation response error`, func() {
		version := "testString"
		listGatewayDevicesAuditsOpsPath := "/ops/audits"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listGatewayDevicesAuditsOpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["audit_type"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListGatewayDevicesAuditsOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListGatewayDevicesAuditsOpsOptions model
				listGatewayDevicesAuditsOpsOptionsModel := new(transitgatewayapisv1.ListGatewayDevicesAuditsOpsOptions)
				listGatewayDevicesAuditsOpsOptionsModel.Start = core.StringPtr("testString")
				listGatewayDevicesAuditsOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listGatewayDevicesAuditsOpsOptionsModel.AuditType = core.StringPtr("testString")
				listGatewayDevicesAuditsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.ListGatewayDevicesAuditsOps(listGatewayDevicesAuditsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.ListGatewayDevicesAuditsOps(listGatewayDevicesAuditsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListGatewayDevicesAuditsOps(listGatewayDevicesAuditsOpsOptions *ListGatewayDevicesAuditsOpsOptions)`, func() {
		version := "testString"
		listGatewayDevicesAuditsOpsPath := "/ops/audits"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listGatewayDevicesAuditsOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["audit_type"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://internal.transit.cloud.ibm.com/v1"}, "limit": 20, "next": {"href": "https://internal.transit.cloud.ibm.com/v1"}, "total_count": 132, "audits": [{"audit_type": "full", "connections_with_mismatched_config": [{"connection_id": "10", "route_preference_in_db": "190", "route_preference_on_device": "195"}], "connections_with_mismatched_prefix_filters": [{"connection_id": "10", "default_in_db": "permit", "default_on_device": "deny", "filters_in_db": [{"action": "permit", "ge": 0, "le": 32, "prefix": "192.168.100.0/24", "uuid": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865"}], "filters_on_device": [{"action": "deny", "ge": 0, "le": 32, "prefix": "192.168.100.0/24"}]}], "created_at": "2019-01-01T12:00:00.000Z", "device_id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "extra_connections_in_device": [{"connection_id": "10", "gateway_id": "234", "tunnel_id": 10}], "extra_gateways_in_device": ["234"], "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "missing_connections_in_device": ["234"], "missing_gateways_in_device": ["234"], "status": "complete", "updated_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListGatewayDevicesAuditsOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the ListGatewayDevicesAuditsOpsOptions model
				listGatewayDevicesAuditsOpsOptionsModel := new(transitgatewayapisv1.ListGatewayDevicesAuditsOpsOptions)
				listGatewayDevicesAuditsOpsOptionsModel.Start = core.StringPtr("testString")
				listGatewayDevicesAuditsOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listGatewayDevicesAuditsOpsOptionsModel.AuditType = core.StringPtr("testString")
				listGatewayDevicesAuditsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.ListGatewayDevicesAuditsOpsWithContext(ctx, listGatewayDevicesAuditsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.ListGatewayDevicesAuditsOps(listGatewayDevicesAuditsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.ListGatewayDevicesAuditsOpsWithContext(ctx, listGatewayDevicesAuditsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listGatewayDevicesAuditsOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["audit_type"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://internal.transit.cloud.ibm.com/v1"}, "limit": 20, "next": {"href": "https://internal.transit.cloud.ibm.com/v1"}, "total_count": 132, "audits": [{"audit_type": "full", "connections_with_mismatched_config": [{"connection_id": "10", "route_preference_in_db": "190", "route_preference_on_device": "195"}], "connections_with_mismatched_prefix_filters": [{"connection_id": "10", "default_in_db": "permit", "default_on_device": "deny", "filters_in_db": [{"action": "permit", "ge": 0, "le": 32, "prefix": "192.168.100.0/24", "uuid": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865"}], "filters_on_device": [{"action": "deny", "ge": 0, "le": 32, "prefix": "192.168.100.0/24"}]}], "created_at": "2019-01-01T12:00:00.000Z", "device_id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "extra_connections_in_device": [{"connection_id": "10", "gateway_id": "234", "tunnel_id": 10}], "extra_gateways_in_device": ["234"], "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "missing_connections_in_device": ["234"], "missing_gateways_in_device": ["234"], "status": "complete", "updated_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListGatewayDevicesAuditsOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.ListGatewayDevicesAuditsOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListGatewayDevicesAuditsOpsOptions model
				listGatewayDevicesAuditsOpsOptionsModel := new(transitgatewayapisv1.ListGatewayDevicesAuditsOpsOptions)
				listGatewayDevicesAuditsOpsOptionsModel.Start = core.StringPtr("testString")
				listGatewayDevicesAuditsOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listGatewayDevicesAuditsOpsOptionsModel.AuditType = core.StringPtr("testString")
				listGatewayDevicesAuditsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.ListGatewayDevicesAuditsOps(listGatewayDevicesAuditsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListGatewayDevicesAuditsOps with error: Operation request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListGatewayDevicesAuditsOpsOptions model
				listGatewayDevicesAuditsOpsOptionsModel := new(transitgatewayapisv1.ListGatewayDevicesAuditsOpsOptions)
				listGatewayDevicesAuditsOpsOptionsModel.Start = core.StringPtr("testString")
				listGatewayDevicesAuditsOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listGatewayDevicesAuditsOpsOptionsModel.AuditType = core.StringPtr("testString")
				listGatewayDevicesAuditsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.ListGatewayDevicesAuditsOps(listGatewayDevicesAuditsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListGatewayDevicesAuditsOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListGatewayDevicesAuditsOpsOptions model
				listGatewayDevicesAuditsOpsOptionsModel := new(transitgatewayapisv1.ListGatewayDevicesAuditsOpsOptions)
				listGatewayDevicesAuditsOpsOptionsModel.Start = core.StringPtr("testString")
				listGatewayDevicesAuditsOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listGatewayDevicesAuditsOpsOptionsModel.AuditType = core.StringPtr("testString")
				listGatewayDevicesAuditsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.ListGatewayDevicesAuditsOps(listGatewayDevicesAuditsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Test pagination helper method on response`, func() {
			It(`Invoke GetNextStart successfully`, func() {
				responseObject := new(transitgatewayapisv1.GatewayDevicesAuditsOpsCollection)
				nextObject := new(transitgatewayapisv1.NextOps)
				nextObject.Href = core.StringPtr("ibm.com?start=abc-123")
				responseObject.Next = nextObject
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(Equal(core.StringPtr("abc-123")))
			})
			It(`Invoke GetNextStart without a "Next" property in the response`, func() {
				responseObject := new(transitgatewayapisv1.GatewayDevicesAuditsOpsCollection)
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(BeNil())
			})
			It(`Invoke GetNextStart without any query params in the "Next" URL`, func() {
				responseObject := new(transitgatewayapisv1.GatewayDevicesAuditsOpsCollection)
				nextObject := new(transitgatewayapisv1.NextOps)
				nextObject.Href = core.StringPtr("ibm.com")
				responseObject.Next = nextObject
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(BeNil())
			})
		})
		Context(`Using mock server endpoint - paginated response`, func() {
			BeforeEach(func() {
				var requestNumber int = 0
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listGatewayDevicesAuditsOpsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					requestNumber++
					if requestNumber == 1 {
						fmt.Fprintf(res, "%s", `{"next":{"href":"https://myhost.com/somePath?start=1"},"total_count":2,"limit":1,"audits":[{"audit_type":"full","connections_with_mismatched_config":[{"connection_id":"10","route_preference_in_db":"190","route_preference_on_device":"195"}],"connections_with_mismatched_prefix_filters":[{"connection_id":"10","default_in_db":"permit","default_on_device":"deny","filters_in_db":[{"action":"permit","ge":0,"le":32,"prefix":"192.168.100.0/24","uuid":"1a15dcab-7e30-45e1-b7c5-bc690eaa9865"}],"filters_on_device":[{"action":"deny","ge":0,"le":32,"prefix":"192.168.100.0/24"}]}],"created_at":"2019-01-01T12:00:00.000Z","device_id":"0a06fb9b-820f-4c44-8a31-77f1f0806d28","extra_connections_in_device":[{"connection_id":"10","gateway_id":"234","tunnel_id":10}],"extra_gateways_in_device":["234"],"id":"1a15dcab-7e30-45e1-b7c5-bc690eaa9865","missing_connections_in_device":["234"],"missing_gateways_in_device":["234"],"status":"complete","updated_at":"2019-01-01T12:00:00.000Z"}]}`)
					} else if requestNumber == 2 {
						fmt.Fprintf(res, "%s", `{"total_count":2,"limit":1,"audits":[{"audit_type":"full","connections_with_mismatched_config":[{"connection_id":"10","route_preference_in_db":"190","route_preference_on_device":"195"}],"connections_with_mismatched_prefix_filters":[{"connection_id":"10","default_in_db":"permit","default_on_device":"deny","filters_in_db":[{"action":"permit","ge":0,"le":32,"prefix":"192.168.100.0/24","uuid":"1a15dcab-7e30-45e1-b7c5-bc690eaa9865"}],"filters_on_device":[{"action":"deny","ge":0,"le":32,"prefix":"192.168.100.0/24"}]}],"created_at":"2019-01-01T12:00:00.000Z","device_id":"0a06fb9b-820f-4c44-8a31-77f1f0806d28","extra_connections_in_device":[{"connection_id":"10","gateway_id":"234","tunnel_id":10}],"extra_gateways_in_device":["234"],"id":"1a15dcab-7e30-45e1-b7c5-bc690eaa9865","missing_connections_in_device":["234"],"missing_gateways_in_device":["234"],"status":"complete","updated_at":"2019-01-01T12:00:00.000Z"}]}`)
					} else {
						res.WriteHeader(400)
					}
				}))
			})
			It(`Use GatewayDevicesAuditsOpsPager.GetNext successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				listGatewayDevicesAuditsOpsOptionsModel := &transitgatewayapisv1.ListGatewayDevicesAuditsOpsOptions{
					Limit: core.Int64Ptr(int64(10)),
					AuditType: core.StringPtr("testString"),
				}

				pager, err := transitGatewayApisService.NewGatewayDevicesAuditsOpsPager(listGatewayDevicesAuditsOpsOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				var allResults []transitgatewayapisv1.GatewayDevicesAuditsOpsReply
				for pager.HasNext() {
					nextPage, err := pager.GetNext()
					Expect(err).To(BeNil())
					Expect(nextPage).ToNot(BeNil())
					allResults = append(allResults, nextPage...)
				}
				Expect(len(allResults)).To(Equal(2))
			})
			It(`Use GatewayDevicesAuditsOpsPager.GetAll successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				listGatewayDevicesAuditsOpsOptionsModel := &transitgatewayapisv1.ListGatewayDevicesAuditsOpsOptions{
					Limit: core.Int64Ptr(int64(10)),
					AuditType: core.StringPtr("testString"),
				}

				pager, err := transitGatewayApisService.NewGatewayDevicesAuditsOpsPager(listGatewayDevicesAuditsOpsOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				allResults, err := pager.GetAll()
				Expect(err).To(BeNil())
				Expect(allResults).ToNot(BeNil())
				Expect(len(allResults)).To(Equal(2))
			})
		})
	})
	Describe(`ListGatewayDeviceAudit(listGatewayDeviceAuditOptions *ListGatewayDeviceAuditOptions) - Operation response error`, func() {
		version := "testString"
		listGatewayDeviceAuditPath := "/ops/gateway_devices/testString/audits"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listGatewayDeviceAuditPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["audit_type"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListGatewayDeviceAudit with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListGatewayDeviceAuditOptions model
				listGatewayDeviceAuditOptionsModel := new(transitgatewayapisv1.ListGatewayDeviceAuditOptions)
				listGatewayDeviceAuditOptionsModel.ID = core.StringPtr("testString")
				listGatewayDeviceAuditOptionsModel.AuditType = core.StringPtr("testString")
				listGatewayDeviceAuditOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.ListGatewayDeviceAudit(listGatewayDeviceAuditOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.ListGatewayDeviceAudit(listGatewayDeviceAuditOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListGatewayDeviceAudit(listGatewayDeviceAuditOptions *ListGatewayDeviceAuditOptions)`, func() {
		version := "testString"
		listGatewayDeviceAuditPath := "/ops/gateway_devices/testString/audits"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listGatewayDeviceAuditPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["audit_type"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"audits": [{"audit_type": "full", "connections_with_mismatched_config": [{"connection_id": "10", "route_preference_in_db": "190", "route_preference_on_device": "195"}], "connections_with_mismatched_prefix_filters": [{"connection_id": "10", "default_in_db": "permit", "default_on_device": "deny", "filters_in_db": [{"action": "permit", "ge": 0, "le": 32, "prefix": "192.168.100.0/24", "uuid": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865"}], "filters_on_device": [{"action": "deny", "ge": 0, "le": 32, "prefix": "192.168.100.0/24"}]}], "created_at": "2019-01-01T12:00:00.000Z", "device_id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "extra_connections_in_device": [{"connection_id": "10", "gateway_id": "234", "tunnel_id": 10}], "extra_gateways_in_device": ["234"], "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "missing_connections_in_device": ["234"], "missing_gateways_in_device": ["234"], "status": "complete", "updated_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListGatewayDeviceAudit successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the ListGatewayDeviceAuditOptions model
				listGatewayDeviceAuditOptionsModel := new(transitgatewayapisv1.ListGatewayDeviceAuditOptions)
				listGatewayDeviceAuditOptionsModel.ID = core.StringPtr("testString")
				listGatewayDeviceAuditOptionsModel.AuditType = core.StringPtr("testString")
				listGatewayDeviceAuditOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.ListGatewayDeviceAuditWithContext(ctx, listGatewayDeviceAuditOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.ListGatewayDeviceAudit(listGatewayDeviceAuditOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.ListGatewayDeviceAuditWithContext(ctx, listGatewayDeviceAuditOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listGatewayDeviceAuditPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["audit_type"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"audits": [{"audit_type": "full", "connections_with_mismatched_config": [{"connection_id": "10", "route_preference_in_db": "190", "route_preference_on_device": "195"}], "connections_with_mismatched_prefix_filters": [{"connection_id": "10", "default_in_db": "permit", "default_on_device": "deny", "filters_in_db": [{"action": "permit", "ge": 0, "le": 32, "prefix": "192.168.100.0/24", "uuid": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865"}], "filters_on_device": [{"action": "deny", "ge": 0, "le": 32, "prefix": "192.168.100.0/24"}]}], "created_at": "2019-01-01T12:00:00.000Z", "device_id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "extra_connections_in_device": [{"connection_id": "10", "gateway_id": "234", "tunnel_id": 10}], "extra_gateways_in_device": ["234"], "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "missing_connections_in_device": ["234"], "missing_gateways_in_device": ["234"], "status": "complete", "updated_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListGatewayDeviceAudit successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.ListGatewayDeviceAudit(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListGatewayDeviceAuditOptions model
				listGatewayDeviceAuditOptionsModel := new(transitgatewayapisv1.ListGatewayDeviceAuditOptions)
				listGatewayDeviceAuditOptionsModel.ID = core.StringPtr("testString")
				listGatewayDeviceAuditOptionsModel.AuditType = core.StringPtr("testString")
				listGatewayDeviceAuditOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.ListGatewayDeviceAudit(listGatewayDeviceAuditOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListGatewayDeviceAudit with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListGatewayDeviceAuditOptions model
				listGatewayDeviceAuditOptionsModel := new(transitgatewayapisv1.ListGatewayDeviceAuditOptions)
				listGatewayDeviceAuditOptionsModel.ID = core.StringPtr("testString")
				listGatewayDeviceAuditOptionsModel.AuditType = core.StringPtr("testString")
				listGatewayDeviceAuditOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.ListGatewayDeviceAudit(listGatewayDeviceAuditOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListGatewayDeviceAuditOptions model with no property values
				listGatewayDeviceAuditOptionsModelNew := new(transitgatewayapisv1.ListGatewayDeviceAuditOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.ListGatewayDeviceAudit(listGatewayDeviceAuditOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListGatewayDeviceAudit successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListGatewayDeviceAuditOptions model
				listGatewayDeviceAuditOptionsModel := new(transitgatewayapisv1.ListGatewayDeviceAuditOptions)
				listGatewayDeviceAuditOptionsModel.ID = core.StringPtr("testString")
				listGatewayDeviceAuditOptionsModel.AuditType = core.StringPtr("testString")
				listGatewayDeviceAuditOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.ListGatewayDeviceAudit(listGatewayDeviceAuditOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateGatewayDeviceAudit(createGatewayDeviceAuditOptions *CreateGatewayDeviceAuditOptions) - Operation response error`, func() {
		version := "testString"
		createGatewayDeviceAuditPath := "/ops/gateway_devices/testString/audits"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createGatewayDeviceAuditPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateGatewayDeviceAudit with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateGatewayDeviceAuditOptions model
				createGatewayDeviceAuditOptionsModel := new(transitgatewayapisv1.CreateGatewayDeviceAuditOptions)
				createGatewayDeviceAuditOptionsModel.ID = core.StringPtr("testString")
				createGatewayDeviceAuditOptionsModel.AuditType = core.StringPtr("full")
				createGatewayDeviceAuditOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.CreateGatewayDeviceAudit(createGatewayDeviceAuditOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.CreateGatewayDeviceAudit(createGatewayDeviceAuditOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateGatewayDeviceAudit(createGatewayDeviceAuditOptions *CreateGatewayDeviceAuditOptions)`, func() {
		version := "testString"
		createGatewayDeviceAuditPath := "/ops/gateway_devices/testString/audits"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createGatewayDeviceAuditPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"audit_type": "full", "connections_with_mismatched_config": [{"connection_id": "10", "route_preference_in_db": "190", "route_preference_on_device": "195"}], "connections_with_mismatched_prefix_filters": [{"connection_id": "10", "default_in_db": "permit", "default_on_device": "deny", "filters_in_db": [{"action": "permit", "ge": 0, "le": 32, "prefix": "192.168.100.0/24", "uuid": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865"}], "filters_on_device": [{"action": "deny", "ge": 0, "le": 32, "prefix": "192.168.100.0/24"}]}], "created_at": "2019-01-01T12:00:00.000Z", "device_id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "extra_connections_in_device": [{"connection_id": "10", "gateway_id": "234", "tunnel_id": 10}], "extra_gateways_in_device": ["234"], "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "missing_connections_in_device": ["234"], "missing_gateways_in_device": ["234"], "status": "complete", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke CreateGatewayDeviceAudit successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the CreateGatewayDeviceAuditOptions model
				createGatewayDeviceAuditOptionsModel := new(transitgatewayapisv1.CreateGatewayDeviceAuditOptions)
				createGatewayDeviceAuditOptionsModel.ID = core.StringPtr("testString")
				createGatewayDeviceAuditOptionsModel.AuditType = core.StringPtr("full")
				createGatewayDeviceAuditOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.CreateGatewayDeviceAuditWithContext(ctx, createGatewayDeviceAuditOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.CreateGatewayDeviceAudit(createGatewayDeviceAuditOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.CreateGatewayDeviceAuditWithContext(ctx, createGatewayDeviceAuditOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createGatewayDeviceAuditPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"audit_type": "full", "connections_with_mismatched_config": [{"connection_id": "10", "route_preference_in_db": "190", "route_preference_on_device": "195"}], "connections_with_mismatched_prefix_filters": [{"connection_id": "10", "default_in_db": "permit", "default_on_device": "deny", "filters_in_db": [{"action": "permit", "ge": 0, "le": 32, "prefix": "192.168.100.0/24", "uuid": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865"}], "filters_on_device": [{"action": "deny", "ge": 0, "le": 32, "prefix": "192.168.100.0/24"}]}], "created_at": "2019-01-01T12:00:00.000Z", "device_id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "extra_connections_in_device": [{"connection_id": "10", "gateway_id": "234", "tunnel_id": 10}], "extra_gateways_in_device": ["234"], "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "missing_connections_in_device": ["234"], "missing_gateways_in_device": ["234"], "status": "complete", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke CreateGatewayDeviceAudit successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.CreateGatewayDeviceAudit(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateGatewayDeviceAuditOptions model
				createGatewayDeviceAuditOptionsModel := new(transitgatewayapisv1.CreateGatewayDeviceAuditOptions)
				createGatewayDeviceAuditOptionsModel.ID = core.StringPtr("testString")
				createGatewayDeviceAuditOptionsModel.AuditType = core.StringPtr("full")
				createGatewayDeviceAuditOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.CreateGatewayDeviceAudit(createGatewayDeviceAuditOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateGatewayDeviceAudit with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateGatewayDeviceAuditOptions model
				createGatewayDeviceAuditOptionsModel := new(transitgatewayapisv1.CreateGatewayDeviceAuditOptions)
				createGatewayDeviceAuditOptionsModel.ID = core.StringPtr("testString")
				createGatewayDeviceAuditOptionsModel.AuditType = core.StringPtr("full")
				createGatewayDeviceAuditOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.CreateGatewayDeviceAudit(createGatewayDeviceAuditOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateGatewayDeviceAuditOptions model with no property values
				createGatewayDeviceAuditOptionsModelNew := new(transitgatewayapisv1.CreateGatewayDeviceAuditOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.CreateGatewayDeviceAudit(createGatewayDeviceAuditOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke CreateGatewayDeviceAudit successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateGatewayDeviceAuditOptions model
				createGatewayDeviceAuditOptionsModel := new(transitgatewayapisv1.CreateGatewayDeviceAuditOptions)
				createGatewayDeviceAuditOptionsModel.ID = core.StringPtr("testString")
				createGatewayDeviceAuditOptionsModel.AuditType = core.StringPtr("full")
				createGatewayDeviceAuditOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.CreateGatewayDeviceAudit(createGatewayDeviceAuditOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteGatewayDeviceAudit(deleteGatewayDeviceAuditOptions *DeleteGatewayDeviceAuditOptions)`, func() {
		version := "testString"
		deleteGatewayDeviceAuditPath := "/ops/gateway_devices/testString/audits/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteGatewayDeviceAuditPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteGatewayDeviceAudit successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := transitGatewayApisService.DeleteGatewayDeviceAudit(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteGatewayDeviceAuditOptions model
				deleteGatewayDeviceAuditOptionsModel := new(transitgatewayapisv1.DeleteGatewayDeviceAuditOptions)
				deleteGatewayDeviceAuditOptionsModel.ID = core.StringPtr("testString")
				deleteGatewayDeviceAuditOptionsModel.AuditID = core.StringPtr("testString")
				deleteGatewayDeviceAuditOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = transitGatewayApisService.DeleteGatewayDeviceAudit(deleteGatewayDeviceAuditOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteGatewayDeviceAudit with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the DeleteGatewayDeviceAuditOptions model
				deleteGatewayDeviceAuditOptionsModel := new(transitgatewayapisv1.DeleteGatewayDeviceAuditOptions)
				deleteGatewayDeviceAuditOptionsModel.ID = core.StringPtr("testString")
				deleteGatewayDeviceAuditOptionsModel.AuditID = core.StringPtr("testString")
				deleteGatewayDeviceAuditOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := transitGatewayApisService.DeleteGatewayDeviceAudit(deleteGatewayDeviceAuditOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteGatewayDeviceAuditOptions model with no property values
				deleteGatewayDeviceAuditOptionsModelNew := new(transitgatewayapisv1.DeleteGatewayDeviceAuditOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = transitGatewayApisService.DeleteGatewayDeviceAudit(deleteGatewayDeviceAuditOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetGatewayDeviceAudit(getGatewayDeviceAuditOptions *GetGatewayDeviceAuditOptions) - Operation response error`, func() {
		version := "testString"
		getGatewayDeviceAuditPath := "/ops/gateway_devices/testString/audits/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getGatewayDeviceAuditPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetGatewayDeviceAudit with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetGatewayDeviceAuditOptions model
				getGatewayDeviceAuditOptionsModel := new(transitgatewayapisv1.GetGatewayDeviceAuditOptions)
				getGatewayDeviceAuditOptionsModel.ID = core.StringPtr("testString")
				getGatewayDeviceAuditOptionsModel.AuditID = core.StringPtr("testString")
				getGatewayDeviceAuditOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.GetGatewayDeviceAudit(getGatewayDeviceAuditOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.GetGatewayDeviceAudit(getGatewayDeviceAuditOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetGatewayDeviceAudit(getGatewayDeviceAuditOptions *GetGatewayDeviceAuditOptions)`, func() {
		version := "testString"
		getGatewayDeviceAuditPath := "/ops/gateway_devices/testString/audits/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getGatewayDeviceAuditPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"audit_type": "full", "connections_with_mismatched_config": [{"connection_id": "10", "route_preference_in_db": "190", "route_preference_on_device": "195"}], "connections_with_mismatched_prefix_filters": [{"connection_id": "10", "default_in_db": "permit", "default_on_device": "deny", "filters_in_db": [{"action": "permit", "ge": 0, "le": 32, "prefix": "192.168.100.0/24", "uuid": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865"}], "filters_on_device": [{"action": "deny", "ge": 0, "le": 32, "prefix": "192.168.100.0/24"}]}], "created_at": "2019-01-01T12:00:00.000Z", "device_id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "extra_connections_in_device": [{"connection_id": "10", "gateway_id": "234", "tunnel_id": 10}], "extra_gateways_in_device": ["234"], "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "missing_connections_in_device": ["234"], "missing_gateways_in_device": ["234"], "status": "complete", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke GetGatewayDeviceAudit successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the GetGatewayDeviceAuditOptions model
				getGatewayDeviceAuditOptionsModel := new(transitgatewayapisv1.GetGatewayDeviceAuditOptions)
				getGatewayDeviceAuditOptionsModel.ID = core.StringPtr("testString")
				getGatewayDeviceAuditOptionsModel.AuditID = core.StringPtr("testString")
				getGatewayDeviceAuditOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.GetGatewayDeviceAuditWithContext(ctx, getGatewayDeviceAuditOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.GetGatewayDeviceAudit(getGatewayDeviceAuditOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.GetGatewayDeviceAuditWithContext(ctx, getGatewayDeviceAuditOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getGatewayDeviceAuditPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"audit_type": "full", "connections_with_mismatched_config": [{"connection_id": "10", "route_preference_in_db": "190", "route_preference_on_device": "195"}], "connections_with_mismatched_prefix_filters": [{"connection_id": "10", "default_in_db": "permit", "default_on_device": "deny", "filters_in_db": [{"action": "permit", "ge": 0, "le": 32, "prefix": "192.168.100.0/24", "uuid": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865"}], "filters_on_device": [{"action": "deny", "ge": 0, "le": 32, "prefix": "192.168.100.0/24"}]}], "created_at": "2019-01-01T12:00:00.000Z", "device_id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "extra_connections_in_device": [{"connection_id": "10", "gateway_id": "234", "tunnel_id": 10}], "extra_gateways_in_device": ["234"], "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "missing_connections_in_device": ["234"], "missing_gateways_in_device": ["234"], "status": "complete", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke GetGatewayDeviceAudit successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.GetGatewayDeviceAudit(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetGatewayDeviceAuditOptions model
				getGatewayDeviceAuditOptionsModel := new(transitgatewayapisv1.GetGatewayDeviceAuditOptions)
				getGatewayDeviceAuditOptionsModel.ID = core.StringPtr("testString")
				getGatewayDeviceAuditOptionsModel.AuditID = core.StringPtr("testString")
				getGatewayDeviceAuditOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.GetGatewayDeviceAudit(getGatewayDeviceAuditOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetGatewayDeviceAudit with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetGatewayDeviceAuditOptions model
				getGatewayDeviceAuditOptionsModel := new(transitgatewayapisv1.GetGatewayDeviceAuditOptions)
				getGatewayDeviceAuditOptionsModel.ID = core.StringPtr("testString")
				getGatewayDeviceAuditOptionsModel.AuditID = core.StringPtr("testString")
				getGatewayDeviceAuditOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.GetGatewayDeviceAudit(getGatewayDeviceAuditOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetGatewayDeviceAuditOptions model with no property values
				getGatewayDeviceAuditOptionsModelNew := new(transitgatewayapisv1.GetGatewayDeviceAuditOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.GetGatewayDeviceAudit(getGatewayDeviceAuditOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetGatewayDeviceAudit successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetGatewayDeviceAuditOptions model
				getGatewayDeviceAuditOptionsModel := new(transitgatewayapisv1.GetGatewayDeviceAuditOptions)
				getGatewayDeviceAuditOptionsModel.ID = core.StringPtr("testString")
				getGatewayDeviceAuditOptionsModel.AuditID = core.StringPtr("testString")
				getGatewayDeviceAuditOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.GetGatewayDeviceAudit(getGatewayDeviceAuditOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListGatewayDevicePlacementTagOps(listGatewayDevicePlacementTagOpsOptions *ListGatewayDevicePlacementTagOpsOptions) - Operation response error`, func() {
		version := "testString"
		listGatewayDevicePlacementTagOpsPath := "/ops/gateway_devices/testString/placement_tags"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listGatewayDevicePlacementTagOpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListGatewayDevicePlacementTagOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListGatewayDevicePlacementTagOpsOptions model
				listGatewayDevicePlacementTagOpsOptionsModel := new(transitgatewayapisv1.ListGatewayDevicePlacementTagOpsOptions)
				listGatewayDevicePlacementTagOpsOptionsModel.ID = core.StringPtr("testString")
				listGatewayDevicePlacementTagOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.ListGatewayDevicePlacementTagOps(listGatewayDevicePlacementTagOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.ListGatewayDevicePlacementTagOps(listGatewayDevicePlacementTagOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListGatewayDevicePlacementTagOps(listGatewayDevicePlacementTagOpsOptions *ListGatewayDevicePlacementTagOpsOptions)`, func() {
		version := "testString"
		listGatewayDevicePlacementTagOpsPath := "/ops/gateway_devices/testString/placement_tags"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listGatewayDevicePlacementTagOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"placement_tags": [{"created_at": "2019-01-01T12:00:00.000Z", "device_id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "name": "Full", "updated_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListGatewayDevicePlacementTagOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the ListGatewayDevicePlacementTagOpsOptions model
				listGatewayDevicePlacementTagOpsOptionsModel := new(transitgatewayapisv1.ListGatewayDevicePlacementTagOpsOptions)
				listGatewayDevicePlacementTagOpsOptionsModel.ID = core.StringPtr("testString")
				listGatewayDevicePlacementTagOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.ListGatewayDevicePlacementTagOpsWithContext(ctx, listGatewayDevicePlacementTagOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.ListGatewayDevicePlacementTagOps(listGatewayDevicePlacementTagOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.ListGatewayDevicePlacementTagOpsWithContext(ctx, listGatewayDevicePlacementTagOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listGatewayDevicePlacementTagOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"placement_tags": [{"created_at": "2019-01-01T12:00:00.000Z", "device_id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "name": "Full", "updated_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListGatewayDevicePlacementTagOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.ListGatewayDevicePlacementTagOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListGatewayDevicePlacementTagOpsOptions model
				listGatewayDevicePlacementTagOpsOptionsModel := new(transitgatewayapisv1.ListGatewayDevicePlacementTagOpsOptions)
				listGatewayDevicePlacementTagOpsOptionsModel.ID = core.StringPtr("testString")
				listGatewayDevicePlacementTagOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.ListGatewayDevicePlacementTagOps(listGatewayDevicePlacementTagOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListGatewayDevicePlacementTagOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListGatewayDevicePlacementTagOpsOptions model
				listGatewayDevicePlacementTagOpsOptionsModel := new(transitgatewayapisv1.ListGatewayDevicePlacementTagOpsOptions)
				listGatewayDevicePlacementTagOpsOptionsModel.ID = core.StringPtr("testString")
				listGatewayDevicePlacementTagOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.ListGatewayDevicePlacementTagOps(listGatewayDevicePlacementTagOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListGatewayDevicePlacementTagOpsOptions model with no property values
				listGatewayDevicePlacementTagOpsOptionsModelNew := new(transitgatewayapisv1.ListGatewayDevicePlacementTagOpsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.ListGatewayDevicePlacementTagOps(listGatewayDevicePlacementTagOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListGatewayDevicePlacementTagOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListGatewayDevicePlacementTagOpsOptions model
				listGatewayDevicePlacementTagOpsOptionsModel := new(transitgatewayapisv1.ListGatewayDevicePlacementTagOpsOptions)
				listGatewayDevicePlacementTagOpsOptionsModel.ID = core.StringPtr("testString")
				listGatewayDevicePlacementTagOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.ListGatewayDevicePlacementTagOps(listGatewayDevicePlacementTagOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateGatewayDevicePlacementTagOps(createGatewayDevicePlacementTagOpsOptions *CreateGatewayDevicePlacementTagOpsOptions) - Operation response error`, func() {
		version := "testString"
		createGatewayDevicePlacementTagOpsPath := "/ops/gateway_devices/testString/placement_tags"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createGatewayDevicePlacementTagOpsPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateGatewayDevicePlacementTagOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateGatewayDevicePlacementTagOpsOptions model
				createGatewayDevicePlacementTagOpsOptionsModel := new(transitgatewayapisv1.CreateGatewayDevicePlacementTagOpsOptions)
				createGatewayDevicePlacementTagOpsOptionsModel.ID = core.StringPtr("testString")
				createGatewayDevicePlacementTagOpsOptionsModel.Name = core.StringPtr("Full")
				createGatewayDevicePlacementTagOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.CreateGatewayDevicePlacementTagOps(createGatewayDevicePlacementTagOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.CreateGatewayDevicePlacementTagOps(createGatewayDevicePlacementTagOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateGatewayDevicePlacementTagOps(createGatewayDevicePlacementTagOpsOptions *CreateGatewayDevicePlacementTagOpsOptions)`, func() {
		version := "testString"
		createGatewayDevicePlacementTagOpsPath := "/ops/gateway_devices/testString/placement_tags"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createGatewayDevicePlacementTagOpsPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "device_id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "name": "Full", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke CreateGatewayDevicePlacementTagOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the CreateGatewayDevicePlacementTagOpsOptions model
				createGatewayDevicePlacementTagOpsOptionsModel := new(transitgatewayapisv1.CreateGatewayDevicePlacementTagOpsOptions)
				createGatewayDevicePlacementTagOpsOptionsModel.ID = core.StringPtr("testString")
				createGatewayDevicePlacementTagOpsOptionsModel.Name = core.StringPtr("Full")
				createGatewayDevicePlacementTagOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.CreateGatewayDevicePlacementTagOpsWithContext(ctx, createGatewayDevicePlacementTagOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.CreateGatewayDevicePlacementTagOps(createGatewayDevicePlacementTagOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.CreateGatewayDevicePlacementTagOpsWithContext(ctx, createGatewayDevicePlacementTagOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createGatewayDevicePlacementTagOpsPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "device_id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "name": "Full", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke CreateGatewayDevicePlacementTagOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.CreateGatewayDevicePlacementTagOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateGatewayDevicePlacementTagOpsOptions model
				createGatewayDevicePlacementTagOpsOptionsModel := new(transitgatewayapisv1.CreateGatewayDevicePlacementTagOpsOptions)
				createGatewayDevicePlacementTagOpsOptionsModel.ID = core.StringPtr("testString")
				createGatewayDevicePlacementTagOpsOptionsModel.Name = core.StringPtr("Full")
				createGatewayDevicePlacementTagOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.CreateGatewayDevicePlacementTagOps(createGatewayDevicePlacementTagOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateGatewayDevicePlacementTagOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateGatewayDevicePlacementTagOpsOptions model
				createGatewayDevicePlacementTagOpsOptionsModel := new(transitgatewayapisv1.CreateGatewayDevicePlacementTagOpsOptions)
				createGatewayDevicePlacementTagOpsOptionsModel.ID = core.StringPtr("testString")
				createGatewayDevicePlacementTagOpsOptionsModel.Name = core.StringPtr("Full")
				createGatewayDevicePlacementTagOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.CreateGatewayDevicePlacementTagOps(createGatewayDevicePlacementTagOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateGatewayDevicePlacementTagOpsOptions model with no property values
				createGatewayDevicePlacementTagOpsOptionsModelNew := new(transitgatewayapisv1.CreateGatewayDevicePlacementTagOpsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.CreateGatewayDevicePlacementTagOps(createGatewayDevicePlacementTagOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateGatewayDevicePlacementTagOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateGatewayDevicePlacementTagOpsOptions model
				createGatewayDevicePlacementTagOpsOptionsModel := new(transitgatewayapisv1.CreateGatewayDevicePlacementTagOpsOptions)
				createGatewayDevicePlacementTagOpsOptionsModel.ID = core.StringPtr("testString")
				createGatewayDevicePlacementTagOpsOptionsModel.Name = core.StringPtr("Full")
				createGatewayDevicePlacementTagOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.CreateGatewayDevicePlacementTagOps(createGatewayDevicePlacementTagOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteGatewayDevicePlacementTagOps(deleteGatewayDevicePlacementTagOpsOptions *DeleteGatewayDevicePlacementTagOpsOptions)`, func() {
		version := "testString"
		deleteGatewayDevicePlacementTagOpsPath := "/ops/gateway_devices/testString/placement_tags/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteGatewayDevicePlacementTagOpsPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteGatewayDevicePlacementTagOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := transitGatewayApisService.DeleteGatewayDevicePlacementTagOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteGatewayDevicePlacementTagOpsOptions model
				deleteGatewayDevicePlacementTagOpsOptionsModel := new(transitgatewayapisv1.DeleteGatewayDevicePlacementTagOpsOptions)
				deleteGatewayDevicePlacementTagOpsOptionsModel.ID = core.StringPtr("testString")
				deleteGatewayDevicePlacementTagOpsOptionsModel.PlacementTagID = core.StringPtr("testString")
				deleteGatewayDevicePlacementTagOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = transitGatewayApisService.DeleteGatewayDevicePlacementTagOps(deleteGatewayDevicePlacementTagOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteGatewayDevicePlacementTagOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the DeleteGatewayDevicePlacementTagOpsOptions model
				deleteGatewayDevicePlacementTagOpsOptionsModel := new(transitgatewayapisv1.DeleteGatewayDevicePlacementTagOpsOptions)
				deleteGatewayDevicePlacementTagOpsOptionsModel.ID = core.StringPtr("testString")
				deleteGatewayDevicePlacementTagOpsOptionsModel.PlacementTagID = core.StringPtr("testString")
				deleteGatewayDevicePlacementTagOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := transitGatewayApisService.DeleteGatewayDevicePlacementTagOps(deleteGatewayDevicePlacementTagOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteGatewayDevicePlacementTagOpsOptions model with no property values
				deleteGatewayDevicePlacementTagOpsOptionsModelNew := new(transitgatewayapisv1.DeleteGatewayDevicePlacementTagOpsOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = transitGatewayApisService.DeleteGatewayDevicePlacementTagOps(deleteGatewayDevicePlacementTagOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetGatewayDevicePlacementTagOps(getGatewayDevicePlacementTagOpsOptions *GetGatewayDevicePlacementTagOpsOptions) - Operation response error`, func() {
		version := "testString"
		getGatewayDevicePlacementTagOpsPath := "/ops/gateway_devices/testString/placement_tags/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getGatewayDevicePlacementTagOpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetGatewayDevicePlacementTagOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetGatewayDevicePlacementTagOpsOptions model
				getGatewayDevicePlacementTagOpsOptionsModel := new(transitgatewayapisv1.GetGatewayDevicePlacementTagOpsOptions)
				getGatewayDevicePlacementTagOpsOptionsModel.ID = core.StringPtr("testString")
				getGatewayDevicePlacementTagOpsOptionsModel.PlacementTagID = core.StringPtr("testString")
				getGatewayDevicePlacementTagOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.GetGatewayDevicePlacementTagOps(getGatewayDevicePlacementTagOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.GetGatewayDevicePlacementTagOps(getGatewayDevicePlacementTagOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetGatewayDevicePlacementTagOps(getGatewayDevicePlacementTagOpsOptions *GetGatewayDevicePlacementTagOpsOptions)`, func() {
		version := "testString"
		getGatewayDevicePlacementTagOpsPath := "/ops/gateway_devices/testString/placement_tags/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getGatewayDevicePlacementTagOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "device_id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "name": "Full", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke GetGatewayDevicePlacementTagOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the GetGatewayDevicePlacementTagOpsOptions model
				getGatewayDevicePlacementTagOpsOptionsModel := new(transitgatewayapisv1.GetGatewayDevicePlacementTagOpsOptions)
				getGatewayDevicePlacementTagOpsOptionsModel.ID = core.StringPtr("testString")
				getGatewayDevicePlacementTagOpsOptionsModel.PlacementTagID = core.StringPtr("testString")
				getGatewayDevicePlacementTagOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.GetGatewayDevicePlacementTagOpsWithContext(ctx, getGatewayDevicePlacementTagOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.GetGatewayDevicePlacementTagOps(getGatewayDevicePlacementTagOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.GetGatewayDevicePlacementTagOpsWithContext(ctx, getGatewayDevicePlacementTagOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getGatewayDevicePlacementTagOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "device_id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "name": "Full", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke GetGatewayDevicePlacementTagOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.GetGatewayDevicePlacementTagOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetGatewayDevicePlacementTagOpsOptions model
				getGatewayDevicePlacementTagOpsOptionsModel := new(transitgatewayapisv1.GetGatewayDevicePlacementTagOpsOptions)
				getGatewayDevicePlacementTagOpsOptionsModel.ID = core.StringPtr("testString")
				getGatewayDevicePlacementTagOpsOptionsModel.PlacementTagID = core.StringPtr("testString")
				getGatewayDevicePlacementTagOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.GetGatewayDevicePlacementTagOps(getGatewayDevicePlacementTagOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetGatewayDevicePlacementTagOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetGatewayDevicePlacementTagOpsOptions model
				getGatewayDevicePlacementTagOpsOptionsModel := new(transitgatewayapisv1.GetGatewayDevicePlacementTagOpsOptions)
				getGatewayDevicePlacementTagOpsOptionsModel.ID = core.StringPtr("testString")
				getGatewayDevicePlacementTagOpsOptionsModel.PlacementTagID = core.StringPtr("testString")
				getGatewayDevicePlacementTagOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.GetGatewayDevicePlacementTagOps(getGatewayDevicePlacementTagOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetGatewayDevicePlacementTagOpsOptions model with no property values
				getGatewayDevicePlacementTagOpsOptionsModelNew := new(transitgatewayapisv1.GetGatewayDevicePlacementTagOpsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.GetGatewayDevicePlacementTagOps(getGatewayDevicePlacementTagOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetGatewayDevicePlacementTagOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetGatewayDevicePlacementTagOpsOptions model
				getGatewayDevicePlacementTagOpsOptionsModel := new(transitgatewayapisv1.GetGatewayDevicePlacementTagOpsOptions)
				getGatewayDevicePlacementTagOpsOptionsModel.ID = core.StringPtr("testString")
				getGatewayDevicePlacementTagOpsOptionsModel.PlacementTagID = core.StringPtr("testString")
				getGatewayDevicePlacementTagOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.GetGatewayDevicePlacementTagOps(getGatewayDevicePlacementTagOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateGatewayDevicePlacementTagOps(updateGatewayDevicePlacementTagOpsOptions *UpdateGatewayDevicePlacementTagOpsOptions) - Operation response error`, func() {
		version := "testString"
		updateGatewayDevicePlacementTagOpsPath := "/ops/gateway_devices/testString/placement_tags/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateGatewayDevicePlacementTagOpsPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateGatewayDevicePlacementTagOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the UpdateGatewayDevicePlacementTagOpsOptions model
				updateGatewayDevicePlacementTagOpsOptionsModel := new(transitgatewayapisv1.UpdateGatewayDevicePlacementTagOpsOptions)
				updateGatewayDevicePlacementTagOpsOptionsModel.ID = core.StringPtr("testString")
				updateGatewayDevicePlacementTagOpsOptionsModel.PlacementTagID = core.StringPtr("testString")
				updateGatewayDevicePlacementTagOpsOptionsModel.Name = core.StringPtr("Full")
				updateGatewayDevicePlacementTagOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.UpdateGatewayDevicePlacementTagOps(updateGatewayDevicePlacementTagOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.UpdateGatewayDevicePlacementTagOps(updateGatewayDevicePlacementTagOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateGatewayDevicePlacementTagOps(updateGatewayDevicePlacementTagOpsOptions *UpdateGatewayDevicePlacementTagOpsOptions)`, func() {
		version := "testString"
		updateGatewayDevicePlacementTagOpsPath := "/ops/gateway_devices/testString/placement_tags/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateGatewayDevicePlacementTagOpsPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "device_id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "name": "Full", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke UpdateGatewayDevicePlacementTagOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the UpdateGatewayDevicePlacementTagOpsOptions model
				updateGatewayDevicePlacementTagOpsOptionsModel := new(transitgatewayapisv1.UpdateGatewayDevicePlacementTagOpsOptions)
				updateGatewayDevicePlacementTagOpsOptionsModel.ID = core.StringPtr("testString")
				updateGatewayDevicePlacementTagOpsOptionsModel.PlacementTagID = core.StringPtr("testString")
				updateGatewayDevicePlacementTagOpsOptionsModel.Name = core.StringPtr("Full")
				updateGatewayDevicePlacementTagOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.UpdateGatewayDevicePlacementTagOpsWithContext(ctx, updateGatewayDevicePlacementTagOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.UpdateGatewayDevicePlacementTagOps(updateGatewayDevicePlacementTagOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.UpdateGatewayDevicePlacementTagOpsWithContext(ctx, updateGatewayDevicePlacementTagOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateGatewayDevicePlacementTagOpsPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "device_id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "name": "Full", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke UpdateGatewayDevicePlacementTagOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.UpdateGatewayDevicePlacementTagOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateGatewayDevicePlacementTagOpsOptions model
				updateGatewayDevicePlacementTagOpsOptionsModel := new(transitgatewayapisv1.UpdateGatewayDevicePlacementTagOpsOptions)
				updateGatewayDevicePlacementTagOpsOptionsModel.ID = core.StringPtr("testString")
				updateGatewayDevicePlacementTagOpsOptionsModel.PlacementTagID = core.StringPtr("testString")
				updateGatewayDevicePlacementTagOpsOptionsModel.Name = core.StringPtr("Full")
				updateGatewayDevicePlacementTagOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.UpdateGatewayDevicePlacementTagOps(updateGatewayDevicePlacementTagOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateGatewayDevicePlacementTagOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the UpdateGatewayDevicePlacementTagOpsOptions model
				updateGatewayDevicePlacementTagOpsOptionsModel := new(transitgatewayapisv1.UpdateGatewayDevicePlacementTagOpsOptions)
				updateGatewayDevicePlacementTagOpsOptionsModel.ID = core.StringPtr("testString")
				updateGatewayDevicePlacementTagOpsOptionsModel.PlacementTagID = core.StringPtr("testString")
				updateGatewayDevicePlacementTagOpsOptionsModel.Name = core.StringPtr("Full")
				updateGatewayDevicePlacementTagOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.UpdateGatewayDevicePlacementTagOps(updateGatewayDevicePlacementTagOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateGatewayDevicePlacementTagOpsOptions model with no property values
				updateGatewayDevicePlacementTagOpsOptionsModelNew := new(transitgatewayapisv1.UpdateGatewayDevicePlacementTagOpsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.UpdateGatewayDevicePlacementTagOps(updateGatewayDevicePlacementTagOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateGatewayDevicePlacementTagOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the UpdateGatewayDevicePlacementTagOpsOptions model
				updateGatewayDevicePlacementTagOpsOptionsModel := new(transitgatewayapisv1.UpdateGatewayDevicePlacementTagOpsOptions)
				updateGatewayDevicePlacementTagOpsOptionsModel.ID = core.StringPtr("testString")
				updateGatewayDevicePlacementTagOpsOptionsModel.PlacementTagID = core.StringPtr("testString")
				updateGatewayDevicePlacementTagOpsOptionsModel.Name = core.StringPtr("Full")
				updateGatewayDevicePlacementTagOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.UpdateGatewayDevicePlacementTagOps(updateGatewayDevicePlacementTagOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListFeatures(listFeaturesOptions *ListFeaturesOptions) - Operation response error`, func() {
		version := "testString"
		listFeaturesPath := "/ops/features"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listFeaturesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["include"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListFeatures with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListFeaturesOptions model
				listFeaturesOptionsModel := new(transitgatewayapisv1.ListFeaturesOptions)
				listFeaturesOptionsModel.Include = core.StringPtr("testString")
				listFeaturesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.ListFeatures(listFeaturesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.ListFeatures(listFeaturesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListFeatures(listFeaturesOptions *ListFeaturesOptions)`, func() {
		version := "testString"
		listFeaturesPath := "/ops/features"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listFeaturesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["include"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"features": [{"generally_available": false, "name": "gateway_v2", "account_ids": ["abcbd7fa2bc3406ea70ba4ade8123456"], "created_at": "2019-01-01T12:00:00.000Z", "database_id": 234, "denylist_account_ids": ["cccfa2bc3406ea70ba4ade0000001"], "updated_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListFeatures successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the ListFeaturesOptions model
				listFeaturesOptionsModel := new(transitgatewayapisv1.ListFeaturesOptions)
				listFeaturesOptionsModel.Include = core.StringPtr("testString")
				listFeaturesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.ListFeaturesWithContext(ctx, listFeaturesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.ListFeatures(listFeaturesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.ListFeaturesWithContext(ctx, listFeaturesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listFeaturesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["include"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"features": [{"generally_available": false, "name": "gateway_v2", "account_ids": ["abcbd7fa2bc3406ea70ba4ade8123456"], "created_at": "2019-01-01T12:00:00.000Z", "database_id": 234, "denylist_account_ids": ["cccfa2bc3406ea70ba4ade0000001"], "updated_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListFeatures successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.ListFeatures(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListFeaturesOptions model
				listFeaturesOptionsModel := new(transitgatewayapisv1.ListFeaturesOptions)
				listFeaturesOptionsModel.Include = core.StringPtr("testString")
				listFeaturesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.ListFeatures(listFeaturesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListFeatures with error: Operation request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListFeaturesOptions model
				listFeaturesOptionsModel := new(transitgatewayapisv1.ListFeaturesOptions)
				listFeaturesOptionsModel.Include = core.StringPtr("testString")
				listFeaturesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.ListFeatures(listFeaturesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListFeatures successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListFeaturesOptions model
				listFeaturesOptionsModel := new(transitgatewayapisv1.ListFeaturesOptions)
				listFeaturesOptionsModel.Include = core.StringPtr("testString")
				listFeaturesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.ListFeatures(listFeaturesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateFeature(createFeatureOptions *CreateFeatureOptions) - Operation response error`, func() {
		version := "testString"
		createFeaturePath := "/ops/features"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createFeaturePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["include"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateFeature with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateFeatureOptions model
				createFeatureOptionsModel := new(transitgatewayapisv1.CreateFeatureOptions)
				createFeatureOptionsModel.Name = core.StringPtr("gateway_v2")
				createFeatureOptionsModel.GenerallyAvailable = core.BoolPtr(false)
				createFeatureOptionsModel.Include = core.StringPtr("testString")
				createFeatureOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.CreateFeature(createFeatureOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.CreateFeature(createFeatureOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateFeature(createFeatureOptions *CreateFeatureOptions)`, func() {
		version := "testString"
		createFeaturePath := "/ops/features"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createFeaturePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["include"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"generally_available": false, "name": "gateway_v2", "account_ids": ["abcbd7fa2bc3406ea70ba4ade8123456"], "created_at": "2019-01-01T12:00:00.000Z", "database_id": 234, "denylist_account_ids": ["cccfa2bc3406ea70ba4ade0000001"], "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke CreateFeature successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the CreateFeatureOptions model
				createFeatureOptionsModel := new(transitgatewayapisv1.CreateFeatureOptions)
				createFeatureOptionsModel.Name = core.StringPtr("gateway_v2")
				createFeatureOptionsModel.GenerallyAvailable = core.BoolPtr(false)
				createFeatureOptionsModel.Include = core.StringPtr("testString")
				createFeatureOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.CreateFeatureWithContext(ctx, createFeatureOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.CreateFeature(createFeatureOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.CreateFeatureWithContext(ctx, createFeatureOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createFeaturePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["include"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"generally_available": false, "name": "gateway_v2", "account_ids": ["abcbd7fa2bc3406ea70ba4ade8123456"], "created_at": "2019-01-01T12:00:00.000Z", "database_id": 234, "denylist_account_ids": ["cccfa2bc3406ea70ba4ade0000001"], "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke CreateFeature successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.CreateFeature(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateFeatureOptions model
				createFeatureOptionsModel := new(transitgatewayapisv1.CreateFeatureOptions)
				createFeatureOptionsModel.Name = core.StringPtr("gateway_v2")
				createFeatureOptionsModel.GenerallyAvailable = core.BoolPtr(false)
				createFeatureOptionsModel.Include = core.StringPtr("testString")
				createFeatureOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.CreateFeature(createFeatureOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateFeature with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateFeatureOptions model
				createFeatureOptionsModel := new(transitgatewayapisv1.CreateFeatureOptions)
				createFeatureOptionsModel.Name = core.StringPtr("gateway_v2")
				createFeatureOptionsModel.GenerallyAvailable = core.BoolPtr(false)
				createFeatureOptionsModel.Include = core.StringPtr("testString")
				createFeatureOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.CreateFeature(createFeatureOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateFeatureOptions model with no property values
				createFeatureOptionsModelNew := new(transitgatewayapisv1.CreateFeatureOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.CreateFeature(createFeatureOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateFeature successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateFeatureOptions model
				createFeatureOptionsModel := new(transitgatewayapisv1.CreateFeatureOptions)
				createFeatureOptionsModel.Name = core.StringPtr("gateway_v2")
				createFeatureOptionsModel.GenerallyAvailable = core.BoolPtr(false)
				createFeatureOptionsModel.Include = core.StringPtr("testString")
				createFeatureOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.CreateFeature(createFeatureOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteFeature(deleteFeatureOptions *DeleteFeatureOptions)`, func() {
		version := "testString"
		deleteFeaturePath := "/ops/features/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteFeaturePath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteFeature successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := transitGatewayApisService.DeleteFeature(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteFeatureOptions model
				deleteFeatureOptionsModel := new(transitgatewayapisv1.DeleteFeatureOptions)
				deleteFeatureOptionsModel.FeatureName = core.StringPtr("testString")
				deleteFeatureOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = transitGatewayApisService.DeleteFeature(deleteFeatureOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteFeature with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the DeleteFeatureOptions model
				deleteFeatureOptionsModel := new(transitgatewayapisv1.DeleteFeatureOptions)
				deleteFeatureOptionsModel.FeatureName = core.StringPtr("testString")
				deleteFeatureOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := transitGatewayApisService.DeleteFeature(deleteFeatureOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteFeatureOptions model with no property values
				deleteFeatureOptionsModelNew := new(transitgatewayapisv1.DeleteFeatureOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = transitGatewayApisService.DeleteFeature(deleteFeatureOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetFeature(getFeatureOptions *GetFeatureOptions) - Operation response error`, func() {
		version := "testString"
		getFeaturePath := "/ops/features/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getFeaturePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetFeature with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetFeatureOptions model
				getFeatureOptionsModel := new(transitgatewayapisv1.GetFeatureOptions)
				getFeatureOptionsModel.FeatureName = core.StringPtr("testString")
				getFeatureOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.GetFeature(getFeatureOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.GetFeature(getFeatureOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetFeature(getFeatureOptions *GetFeatureOptions)`, func() {
		version := "testString"
		getFeaturePath := "/ops/features/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getFeaturePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"generally_available": false, "name": "gateway_v2", "account_ids": ["abcbd7fa2bc3406ea70ba4ade8123456"], "created_at": "2019-01-01T12:00:00.000Z", "database_id": 234, "denylist_account_ids": ["cccfa2bc3406ea70ba4ade0000001"], "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke GetFeature successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the GetFeatureOptions model
				getFeatureOptionsModel := new(transitgatewayapisv1.GetFeatureOptions)
				getFeatureOptionsModel.FeatureName = core.StringPtr("testString")
				getFeatureOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.GetFeatureWithContext(ctx, getFeatureOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.GetFeature(getFeatureOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.GetFeatureWithContext(ctx, getFeatureOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getFeaturePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"generally_available": false, "name": "gateway_v2", "account_ids": ["abcbd7fa2bc3406ea70ba4ade8123456"], "created_at": "2019-01-01T12:00:00.000Z", "database_id": 234, "denylist_account_ids": ["cccfa2bc3406ea70ba4ade0000001"], "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke GetFeature successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.GetFeature(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetFeatureOptions model
				getFeatureOptionsModel := new(transitgatewayapisv1.GetFeatureOptions)
				getFeatureOptionsModel.FeatureName = core.StringPtr("testString")
				getFeatureOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.GetFeature(getFeatureOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetFeature with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetFeatureOptions model
				getFeatureOptionsModel := new(transitgatewayapisv1.GetFeatureOptions)
				getFeatureOptionsModel.FeatureName = core.StringPtr("testString")
				getFeatureOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.GetFeature(getFeatureOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetFeatureOptions model with no property values
				getFeatureOptionsModelNew := new(transitgatewayapisv1.GetFeatureOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.GetFeature(getFeatureOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetFeature successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetFeatureOptions model
				getFeatureOptionsModel := new(transitgatewayapisv1.GetFeatureOptions)
				getFeatureOptionsModel.FeatureName = core.StringPtr("testString")
				getFeatureOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.GetFeature(getFeatureOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateFeature(updateFeatureOptions *UpdateFeatureOptions) - Operation response error`, func() {
		version := "testString"
		updateFeaturePath := "/ops/features/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateFeaturePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateFeature with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the UpdateFeatureOptions model
				updateFeatureOptionsModel := new(transitgatewayapisv1.UpdateFeatureOptions)
				updateFeatureOptionsModel.FeatureName = core.StringPtr("testString")
				updateFeatureOptionsModel.GenerallyAvailable = core.BoolPtr(true)
				updateFeatureOptionsModel.Name = core.StringPtr("gateway_v2")
				updateFeatureOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.UpdateFeature(updateFeatureOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.UpdateFeature(updateFeatureOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateFeature(updateFeatureOptions *UpdateFeatureOptions)`, func() {
		version := "testString"
		updateFeaturePath := "/ops/features/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateFeaturePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"generally_available": false, "name": "gateway_v2", "account_ids": ["abcbd7fa2bc3406ea70ba4ade8123456"], "created_at": "2019-01-01T12:00:00.000Z", "database_id": 234, "denylist_account_ids": ["cccfa2bc3406ea70ba4ade0000001"], "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke UpdateFeature successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the UpdateFeatureOptions model
				updateFeatureOptionsModel := new(transitgatewayapisv1.UpdateFeatureOptions)
				updateFeatureOptionsModel.FeatureName = core.StringPtr("testString")
				updateFeatureOptionsModel.GenerallyAvailable = core.BoolPtr(true)
				updateFeatureOptionsModel.Name = core.StringPtr("gateway_v2")
				updateFeatureOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.UpdateFeatureWithContext(ctx, updateFeatureOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.UpdateFeature(updateFeatureOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.UpdateFeatureWithContext(ctx, updateFeatureOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateFeaturePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"generally_available": false, "name": "gateway_v2", "account_ids": ["abcbd7fa2bc3406ea70ba4ade8123456"], "created_at": "2019-01-01T12:00:00.000Z", "database_id": 234, "denylist_account_ids": ["cccfa2bc3406ea70ba4ade0000001"], "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke UpdateFeature successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.UpdateFeature(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateFeatureOptions model
				updateFeatureOptionsModel := new(transitgatewayapisv1.UpdateFeatureOptions)
				updateFeatureOptionsModel.FeatureName = core.StringPtr("testString")
				updateFeatureOptionsModel.GenerallyAvailable = core.BoolPtr(true)
				updateFeatureOptionsModel.Name = core.StringPtr("gateway_v2")
				updateFeatureOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.UpdateFeature(updateFeatureOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateFeature with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the UpdateFeatureOptions model
				updateFeatureOptionsModel := new(transitgatewayapisv1.UpdateFeatureOptions)
				updateFeatureOptionsModel.FeatureName = core.StringPtr("testString")
				updateFeatureOptionsModel.GenerallyAvailable = core.BoolPtr(true)
				updateFeatureOptionsModel.Name = core.StringPtr("gateway_v2")
				updateFeatureOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.UpdateFeature(updateFeatureOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateFeatureOptions model with no property values
				updateFeatureOptionsModelNew := new(transitgatewayapisv1.UpdateFeatureOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.UpdateFeature(updateFeatureOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateFeature successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the UpdateFeatureOptions model
				updateFeatureOptionsModel := new(transitgatewayapisv1.UpdateFeatureOptions)
				updateFeatureOptionsModel.FeatureName = core.StringPtr("testString")
				updateFeatureOptionsModel.GenerallyAvailable = core.BoolPtr(true)
				updateFeatureOptionsModel.Name = core.StringPtr("gateway_v2")
				updateFeatureOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.UpdateFeature(updateFeatureOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListFeatureAllowlistedAccounts(listFeatureAllowlistedAccountsOptions *ListFeatureAllowlistedAccountsOptions) - Operation response error`, func() {
		version := "testString"
		listFeatureAllowlistedAccountsPath := "/ops/features/testString/customer_accounts"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listFeatureAllowlistedAccountsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListFeatureAllowlistedAccounts with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListFeatureAllowlistedAccountsOptions model
				listFeatureAllowlistedAccountsOptionsModel := new(transitgatewayapisv1.ListFeatureAllowlistedAccountsOptions)
				listFeatureAllowlistedAccountsOptionsModel.FeatureName = core.StringPtr("testString")
				listFeatureAllowlistedAccountsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.ListFeatureAllowlistedAccounts(listFeatureAllowlistedAccountsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.ListFeatureAllowlistedAccounts(listFeatureAllowlistedAccountsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListFeatureAllowlistedAccounts(listFeatureAllowlistedAccountsOptions *ListFeatureAllowlistedAccountsOptions)`, func() {
		version := "testString"
		listFeatureAllowlistedAccountsPath := "/ops/features/testString/customer_accounts"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listFeatureAllowlistedAccountsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"account_ids": ["28e4d90ac7504be694471ee66e70d0d5"]}`)
				}))
			})
			It(`Invoke ListFeatureAllowlistedAccounts successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the ListFeatureAllowlistedAccountsOptions model
				listFeatureAllowlistedAccountsOptionsModel := new(transitgatewayapisv1.ListFeatureAllowlistedAccountsOptions)
				listFeatureAllowlistedAccountsOptionsModel.FeatureName = core.StringPtr("testString")
				listFeatureAllowlistedAccountsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.ListFeatureAllowlistedAccountsWithContext(ctx, listFeatureAllowlistedAccountsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.ListFeatureAllowlistedAccounts(listFeatureAllowlistedAccountsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.ListFeatureAllowlistedAccountsWithContext(ctx, listFeatureAllowlistedAccountsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listFeatureAllowlistedAccountsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"account_ids": ["28e4d90ac7504be694471ee66e70d0d5"]}`)
				}))
			})
			It(`Invoke ListFeatureAllowlistedAccounts successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.ListFeatureAllowlistedAccounts(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListFeatureAllowlistedAccountsOptions model
				listFeatureAllowlistedAccountsOptionsModel := new(transitgatewayapisv1.ListFeatureAllowlistedAccountsOptions)
				listFeatureAllowlistedAccountsOptionsModel.FeatureName = core.StringPtr("testString")
				listFeatureAllowlistedAccountsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.ListFeatureAllowlistedAccounts(listFeatureAllowlistedAccountsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListFeatureAllowlistedAccounts with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListFeatureAllowlistedAccountsOptions model
				listFeatureAllowlistedAccountsOptionsModel := new(transitgatewayapisv1.ListFeatureAllowlistedAccountsOptions)
				listFeatureAllowlistedAccountsOptionsModel.FeatureName = core.StringPtr("testString")
				listFeatureAllowlistedAccountsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.ListFeatureAllowlistedAccounts(listFeatureAllowlistedAccountsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListFeatureAllowlistedAccountsOptions model with no property values
				listFeatureAllowlistedAccountsOptionsModelNew := new(transitgatewayapisv1.ListFeatureAllowlistedAccountsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.ListFeatureAllowlistedAccounts(listFeatureAllowlistedAccountsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListFeatureAllowlistedAccounts successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListFeatureAllowlistedAccountsOptions model
				listFeatureAllowlistedAccountsOptionsModel := new(transitgatewayapisv1.ListFeatureAllowlistedAccountsOptions)
				listFeatureAllowlistedAccountsOptionsModel.FeatureName = core.StringPtr("testString")
				listFeatureAllowlistedAccountsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.ListFeatureAllowlistedAccounts(listFeatureAllowlistedAccountsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteFeatureAccount(deleteFeatureAccountOptions *DeleteFeatureAccountOptions)`, func() {
		version := "testString"
		deleteFeatureAccountPath := "/ops/features/testString/customer_accounts/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteFeatureAccountPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteFeatureAccount successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := transitGatewayApisService.DeleteFeatureAccount(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteFeatureAccountOptions model
				deleteFeatureAccountOptionsModel := new(transitgatewayapisv1.DeleteFeatureAccountOptions)
				deleteFeatureAccountOptionsModel.FeatureName = core.StringPtr("testString")
				deleteFeatureAccountOptionsModel.AccountID = core.StringPtr("testString")
				deleteFeatureAccountOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = transitGatewayApisService.DeleteFeatureAccount(deleteFeatureAccountOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteFeatureAccount with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the DeleteFeatureAccountOptions model
				deleteFeatureAccountOptionsModel := new(transitgatewayapisv1.DeleteFeatureAccountOptions)
				deleteFeatureAccountOptionsModel.FeatureName = core.StringPtr("testString")
				deleteFeatureAccountOptionsModel.AccountID = core.StringPtr("testString")
				deleteFeatureAccountOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := transitGatewayApisService.DeleteFeatureAccount(deleteFeatureAccountOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteFeatureAccountOptions model with no property values
				deleteFeatureAccountOptionsModelNew := new(transitgatewayapisv1.DeleteFeatureAccountOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = transitGatewayApisService.DeleteFeatureAccount(deleteFeatureAccountOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetFeatureAccount(getFeatureAccountOptions *GetFeatureAccountOptions) - Operation response error`, func() {
		version := "testString"
		getFeatureAccountPath := "/ops/features/testString/customer_accounts/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getFeatureAccountPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetFeatureAccount with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetFeatureAccountOptions model
				getFeatureAccountOptionsModel := new(transitgatewayapisv1.GetFeatureAccountOptions)
				getFeatureAccountOptionsModel.FeatureName = core.StringPtr("testString")
				getFeatureAccountOptionsModel.AccountID = core.StringPtr("testString")
				getFeatureAccountOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.GetFeatureAccount(getFeatureAccountOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.GetFeatureAccount(getFeatureAccountOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetFeatureAccount(getFeatureAccountOptions *GetFeatureAccountOptions)`, func() {
		version := "testString"
		getFeatureAccountPath := "/ops/features/testString/customer_accounts/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getFeatureAccountPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"account_id": "234"}`)
				}))
			})
			It(`Invoke GetFeatureAccount successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the GetFeatureAccountOptions model
				getFeatureAccountOptionsModel := new(transitgatewayapisv1.GetFeatureAccountOptions)
				getFeatureAccountOptionsModel.FeatureName = core.StringPtr("testString")
				getFeatureAccountOptionsModel.AccountID = core.StringPtr("testString")
				getFeatureAccountOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.GetFeatureAccountWithContext(ctx, getFeatureAccountOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.GetFeatureAccount(getFeatureAccountOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.GetFeatureAccountWithContext(ctx, getFeatureAccountOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getFeatureAccountPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"account_id": "234"}`)
				}))
			})
			It(`Invoke GetFeatureAccount successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.GetFeatureAccount(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetFeatureAccountOptions model
				getFeatureAccountOptionsModel := new(transitgatewayapisv1.GetFeatureAccountOptions)
				getFeatureAccountOptionsModel.FeatureName = core.StringPtr("testString")
				getFeatureAccountOptionsModel.AccountID = core.StringPtr("testString")
				getFeatureAccountOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.GetFeatureAccount(getFeatureAccountOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetFeatureAccount with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetFeatureAccountOptions model
				getFeatureAccountOptionsModel := new(transitgatewayapisv1.GetFeatureAccountOptions)
				getFeatureAccountOptionsModel.FeatureName = core.StringPtr("testString")
				getFeatureAccountOptionsModel.AccountID = core.StringPtr("testString")
				getFeatureAccountOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.GetFeatureAccount(getFeatureAccountOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetFeatureAccountOptions model with no property values
				getFeatureAccountOptionsModelNew := new(transitgatewayapisv1.GetFeatureAccountOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.GetFeatureAccount(getFeatureAccountOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetFeatureAccount successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetFeatureAccountOptions model
				getFeatureAccountOptionsModel := new(transitgatewayapisv1.GetFeatureAccountOptions)
				getFeatureAccountOptionsModel.FeatureName = core.StringPtr("testString")
				getFeatureAccountOptionsModel.AccountID = core.StringPtr("testString")
				getFeatureAccountOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.GetFeatureAccount(getFeatureAccountOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceFeatureAccount(replaceFeatureAccountOptions *ReplaceFeatureAccountOptions)`, func() {
		version := "testString"
		replaceFeatureAccountPath := "/ops/features/testString/customer_accounts/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceFeatureAccountPath))
					Expect(req.Method).To(Equal("PUT"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke ReplaceFeatureAccount successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := transitGatewayApisService.ReplaceFeatureAccount(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the ReplaceFeatureAccountOptions model
				replaceFeatureAccountOptionsModel := new(transitgatewayapisv1.ReplaceFeatureAccountOptions)
				replaceFeatureAccountOptionsModel.FeatureName = core.StringPtr("testString")
				replaceFeatureAccountOptionsModel.AccountID = core.StringPtr("testString")
				replaceFeatureAccountOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = transitGatewayApisService.ReplaceFeatureAccount(replaceFeatureAccountOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke ReplaceFeatureAccount with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ReplaceFeatureAccountOptions model
				replaceFeatureAccountOptionsModel := new(transitgatewayapisv1.ReplaceFeatureAccountOptions)
				replaceFeatureAccountOptionsModel.FeatureName = core.StringPtr("testString")
				replaceFeatureAccountOptionsModel.AccountID = core.StringPtr("testString")
				replaceFeatureAccountOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := transitGatewayApisService.ReplaceFeatureAccount(replaceFeatureAccountOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the ReplaceFeatureAccountOptions model with no property values
				replaceFeatureAccountOptionsModelNew := new(transitgatewayapisv1.ReplaceFeatureAccountOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = transitGatewayApisService.ReplaceFeatureAccount(replaceFeatureAccountOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteFeatureDenylistAccount(deleteFeatureDenylistAccountOptions *DeleteFeatureDenylistAccountOptions)`, func() {
		version := "testString"
		deleteFeatureDenylistAccountPath := "/ops/features/testString/denylist_account_ids/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteFeatureDenylistAccountPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteFeatureDenylistAccount successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := transitGatewayApisService.DeleteFeatureDenylistAccount(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteFeatureDenylistAccountOptions model
				deleteFeatureDenylistAccountOptionsModel := new(transitgatewayapisv1.DeleteFeatureDenylistAccountOptions)
				deleteFeatureDenylistAccountOptionsModel.FeatureName = core.StringPtr("testString")
				deleteFeatureDenylistAccountOptionsModel.AccountID = core.StringPtr("testString")
				deleteFeatureDenylistAccountOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = transitGatewayApisService.DeleteFeatureDenylistAccount(deleteFeatureDenylistAccountOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteFeatureDenylistAccount with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the DeleteFeatureDenylistAccountOptions model
				deleteFeatureDenylistAccountOptionsModel := new(transitgatewayapisv1.DeleteFeatureDenylistAccountOptions)
				deleteFeatureDenylistAccountOptionsModel.FeatureName = core.StringPtr("testString")
				deleteFeatureDenylistAccountOptionsModel.AccountID = core.StringPtr("testString")
				deleteFeatureDenylistAccountOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := transitGatewayApisService.DeleteFeatureDenylistAccount(deleteFeatureDenylistAccountOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteFeatureDenylistAccountOptions model with no property values
				deleteFeatureDenylistAccountOptionsModelNew := new(transitgatewayapisv1.DeleteFeatureDenylistAccountOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = transitGatewayApisService.DeleteFeatureDenylistAccount(deleteFeatureDenylistAccountOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceFeatureDenylistAccount(replaceFeatureDenylistAccountOptions *ReplaceFeatureDenylistAccountOptions)`, func() {
		version := "testString"
		replaceFeatureDenylistAccountPath := "/ops/features/testString/denylist_account_ids/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceFeatureDenylistAccountPath))
					Expect(req.Method).To(Equal("PUT"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke ReplaceFeatureDenylistAccount successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := transitGatewayApisService.ReplaceFeatureDenylistAccount(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the ReplaceFeatureDenylistAccountOptions model
				replaceFeatureDenylistAccountOptionsModel := new(transitgatewayapisv1.ReplaceFeatureDenylistAccountOptions)
				replaceFeatureDenylistAccountOptionsModel.FeatureName = core.StringPtr("testString")
				replaceFeatureDenylistAccountOptionsModel.AccountID = core.StringPtr("testString")
				replaceFeatureDenylistAccountOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = transitGatewayApisService.ReplaceFeatureDenylistAccount(replaceFeatureDenylistAccountOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke ReplaceFeatureDenylistAccount with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ReplaceFeatureDenylistAccountOptions model
				replaceFeatureDenylistAccountOptionsModel := new(transitgatewayapisv1.ReplaceFeatureDenylistAccountOptions)
				replaceFeatureDenylistAccountOptionsModel.FeatureName = core.StringPtr("testString")
				replaceFeatureDenylistAccountOptionsModel.AccountID = core.StringPtr("testString")
				replaceFeatureDenylistAccountOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := transitGatewayApisService.ReplaceFeatureDenylistAccount(replaceFeatureDenylistAccountOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the ReplaceFeatureDenylistAccountOptions model with no property values
				replaceFeatureDenylistAccountOptionsModelNew := new(transitgatewayapisv1.ReplaceFeatureDenylistAccountOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = transitGatewayApisService.ReplaceFeatureDenylistAccount(replaceFeatureDenylistAccountOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListTransitGatewayMetricsOps(listTransitGatewayMetricsOpsOptions *ListTransitGatewayMetricsOpsOptions) - Operation response error`, func() {
		version := "testString"
		listTransitGatewayMetricsOpsPath := "/ops/metrics"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewayMetricsOpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["last_reported_timestamp"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["last_collected_timestamp"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListTransitGatewayMetricsOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewayMetricsOpsOptions model
				listTransitGatewayMetricsOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewayMetricsOpsOptions)
				listTransitGatewayMetricsOpsOptionsModel.LastReportedTimestamp = core.StringPtr("testString")
				listTransitGatewayMetricsOpsOptionsModel.LastCollectedTimestamp = core.StringPtr("testString")
				listTransitGatewayMetricsOpsOptionsModel.AccountID = core.StringPtr("testString")
				listTransitGatewayMetricsOpsOptionsModel.Start = core.StringPtr("testString")
				listTransitGatewayMetricsOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listTransitGatewayMetricsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayMetricsOps(listTransitGatewayMetricsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.ListTransitGatewayMetricsOps(listTransitGatewayMetricsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListTransitGatewayMetricsOps(listTransitGatewayMetricsOpsOptions *ListTransitGatewayMetricsOpsOptions)`, func() {
		version := "testString"
		listTransitGatewayMetricsOpsPath := "/ops/metrics"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewayMetricsOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["last_reported_timestamp"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["last_collected_timestamp"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://internal.transit.cloud.ibm.com/v1"}, "limit": 20, "next": {"href": "https://internal.transit.cloud.ibm.com/v1"}, "total_count": 132, "metrics": [{"account_id": "AccountID", "billing_event_at": "2019-01-01T12:00:00.000Z", "billing_started_at": "2019-01-01T12:00:00.000Z", "bss_std_plan": true, "connection_max": 13, "created_at": "2019-01-01T12:00:00.000Z", "database_id": 987, "device_metrics": "DeviceMetrics", "gateway_id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "last_billed_at": "2019-01-01T12:00:00.000Z", "last_collected": 13, "last_collected_timestamp": "2019-01-01T12:00:00.000Z", "last_reported": 12, "last_reported_timestamp": "2019-01-01T12:00:00.000Z", "metric_type": "local", "updated_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListTransitGatewayMetricsOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the ListTransitGatewayMetricsOpsOptions model
				listTransitGatewayMetricsOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewayMetricsOpsOptions)
				listTransitGatewayMetricsOpsOptionsModel.LastReportedTimestamp = core.StringPtr("testString")
				listTransitGatewayMetricsOpsOptionsModel.LastCollectedTimestamp = core.StringPtr("testString")
				listTransitGatewayMetricsOpsOptionsModel.AccountID = core.StringPtr("testString")
				listTransitGatewayMetricsOpsOptionsModel.Start = core.StringPtr("testString")
				listTransitGatewayMetricsOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listTransitGatewayMetricsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.ListTransitGatewayMetricsOpsWithContext(ctx, listTransitGatewayMetricsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayMetricsOps(listTransitGatewayMetricsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.ListTransitGatewayMetricsOpsWithContext(ctx, listTransitGatewayMetricsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewayMetricsOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["last_reported_timestamp"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["last_collected_timestamp"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://internal.transit.cloud.ibm.com/v1"}, "limit": 20, "next": {"href": "https://internal.transit.cloud.ibm.com/v1"}, "total_count": 132, "metrics": [{"account_id": "AccountID", "billing_event_at": "2019-01-01T12:00:00.000Z", "billing_started_at": "2019-01-01T12:00:00.000Z", "bss_std_plan": true, "connection_max": 13, "created_at": "2019-01-01T12:00:00.000Z", "database_id": 987, "device_metrics": "DeviceMetrics", "gateway_id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "last_billed_at": "2019-01-01T12:00:00.000Z", "last_collected": 13, "last_collected_timestamp": "2019-01-01T12:00:00.000Z", "last_reported": 12, "last_reported_timestamp": "2019-01-01T12:00:00.000Z", "metric_type": "local", "updated_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListTransitGatewayMetricsOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayMetricsOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListTransitGatewayMetricsOpsOptions model
				listTransitGatewayMetricsOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewayMetricsOpsOptions)
				listTransitGatewayMetricsOpsOptionsModel.LastReportedTimestamp = core.StringPtr("testString")
				listTransitGatewayMetricsOpsOptionsModel.LastCollectedTimestamp = core.StringPtr("testString")
				listTransitGatewayMetricsOpsOptionsModel.AccountID = core.StringPtr("testString")
				listTransitGatewayMetricsOpsOptionsModel.Start = core.StringPtr("testString")
				listTransitGatewayMetricsOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listTransitGatewayMetricsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.ListTransitGatewayMetricsOps(listTransitGatewayMetricsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListTransitGatewayMetricsOps with error: Operation request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewayMetricsOpsOptions model
				listTransitGatewayMetricsOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewayMetricsOpsOptions)
				listTransitGatewayMetricsOpsOptionsModel.LastReportedTimestamp = core.StringPtr("testString")
				listTransitGatewayMetricsOpsOptionsModel.LastCollectedTimestamp = core.StringPtr("testString")
				listTransitGatewayMetricsOpsOptionsModel.AccountID = core.StringPtr("testString")
				listTransitGatewayMetricsOpsOptionsModel.Start = core.StringPtr("testString")
				listTransitGatewayMetricsOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listTransitGatewayMetricsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayMetricsOps(listTransitGatewayMetricsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListTransitGatewayMetricsOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewayMetricsOpsOptions model
				listTransitGatewayMetricsOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewayMetricsOpsOptions)
				listTransitGatewayMetricsOpsOptionsModel.LastReportedTimestamp = core.StringPtr("testString")
				listTransitGatewayMetricsOpsOptionsModel.LastCollectedTimestamp = core.StringPtr("testString")
				listTransitGatewayMetricsOpsOptionsModel.AccountID = core.StringPtr("testString")
				listTransitGatewayMetricsOpsOptionsModel.Start = core.StringPtr("testString")
				listTransitGatewayMetricsOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listTransitGatewayMetricsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayMetricsOps(listTransitGatewayMetricsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Test pagination helper method on response`, func() {
			It(`Invoke GetNextStart successfully`, func() {
				responseObject := new(transitgatewayapisv1.TSMetricsOpsCollection)
				nextObject := new(transitgatewayapisv1.NextOps)
				nextObject.Href = core.StringPtr("ibm.com?start=abc-123")
				responseObject.Next = nextObject
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(Equal(core.StringPtr("abc-123")))
			})
			It(`Invoke GetNextStart without a "Next" property in the response`, func() {
				responseObject := new(transitgatewayapisv1.TSMetricsOpsCollection)
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(BeNil())
			})
			It(`Invoke GetNextStart without any query params in the "Next" URL`, func() {
				responseObject := new(transitgatewayapisv1.TSMetricsOpsCollection)
				nextObject := new(transitgatewayapisv1.NextOps)
				nextObject.Href = core.StringPtr("ibm.com")
				responseObject.Next = nextObject
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(BeNil())
			})
		})
		Context(`Using mock server endpoint - paginated response`, func() {
			BeforeEach(func() {
				var requestNumber int = 0
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewayMetricsOpsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					requestNumber++
					if requestNumber == 1 {
						fmt.Fprintf(res, "%s", `{"next":{"href":"https://myhost.com/somePath?start=1"},"total_count":2,"limit":1,"metrics":[{"account_id":"AccountID","billing_event_at":"2019-01-01T12:00:00.000Z","billing_started_at":"2019-01-01T12:00:00.000Z","bss_std_plan":true,"connection_max":13,"created_at":"2019-01-01T12:00:00.000Z","database_id":987,"device_metrics":"DeviceMetrics","gateway_id":"1a15dca5-7e33-45e1-b7c5-bc690e569531","last_billed_at":"2019-01-01T12:00:00.000Z","last_collected":13,"last_collected_timestamp":"2019-01-01T12:00:00.000Z","last_reported":12,"last_reported_timestamp":"2019-01-01T12:00:00.000Z","metric_type":"local","updated_at":"2019-01-01T12:00:00.000Z"}]}`)
					} else if requestNumber == 2 {
						fmt.Fprintf(res, "%s", `{"total_count":2,"limit":1,"metrics":[{"account_id":"AccountID","billing_event_at":"2019-01-01T12:00:00.000Z","billing_started_at":"2019-01-01T12:00:00.000Z","bss_std_plan":true,"connection_max":13,"created_at":"2019-01-01T12:00:00.000Z","database_id":987,"device_metrics":"DeviceMetrics","gateway_id":"1a15dca5-7e33-45e1-b7c5-bc690e569531","last_billed_at":"2019-01-01T12:00:00.000Z","last_collected":13,"last_collected_timestamp":"2019-01-01T12:00:00.000Z","last_reported":12,"last_reported_timestamp":"2019-01-01T12:00:00.000Z","metric_type":"local","updated_at":"2019-01-01T12:00:00.000Z"}]}`)
					} else {
						res.WriteHeader(400)
					}
				}))
			})
			It(`Use TransitGatewayMetricsOpsPager.GetNext successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				listTransitGatewayMetricsOpsOptionsModel := &transitgatewayapisv1.ListTransitGatewayMetricsOpsOptions{
					LastReportedTimestamp: core.StringPtr("testString"),
					LastCollectedTimestamp: core.StringPtr("testString"),
					AccountID: core.StringPtr("testString"),
					Limit: core.Int64Ptr(int64(10)),
				}

				pager, err := transitGatewayApisService.NewTransitGatewayMetricsOpsPager(listTransitGatewayMetricsOpsOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				var allResults []transitgatewayapisv1.TSMetricsOps
				for pager.HasNext() {
					nextPage, err := pager.GetNext()
					Expect(err).To(BeNil())
					Expect(nextPage).ToNot(BeNil())
					allResults = append(allResults, nextPage...)
				}
				Expect(len(allResults)).To(Equal(2))
			})
			It(`Use TransitGatewayMetricsOpsPager.GetAll successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				listTransitGatewayMetricsOpsOptionsModel := &transitgatewayapisv1.ListTransitGatewayMetricsOpsOptions{
					LastReportedTimestamp: core.StringPtr("testString"),
					LastCollectedTimestamp: core.StringPtr("testString"),
					AccountID: core.StringPtr("testString"),
					Limit: core.Int64Ptr(int64(10)),
				}

				pager, err := transitGatewayApisService.NewTransitGatewayMetricsOpsPager(listTransitGatewayMetricsOpsOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				allResults, err := pager.GetAll()
				Expect(err).To(BeNil())
				Expect(allResults).ToNot(BeNil())
				Expect(len(allResults)).To(Equal(2))
			})
		})
	})
	Describe(`ListTransitGatewaysMetricsOps(listTransitGatewaysMetricsOpsOptions *ListTransitGatewaysMetricsOpsOptions) - Operation response error`, func() {
		version := "testString"
		listTransitGatewaysMetricsOpsPath := "/ops/transit_gateways/testString/metrics"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewaysMetricsOpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListTransitGatewaysMetricsOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewaysMetricsOpsOptions model
				listTransitGatewaysMetricsOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewaysMetricsOpsOptions)
				listTransitGatewaysMetricsOpsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewaysMetricsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.ListTransitGatewaysMetricsOps(listTransitGatewaysMetricsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.ListTransitGatewaysMetricsOps(listTransitGatewaysMetricsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListTransitGatewaysMetricsOps(listTransitGatewaysMetricsOpsOptions *ListTransitGatewaysMetricsOpsOptions)`, func() {
		version := "testString"
		listTransitGatewaysMetricsOpsPath := "/ops/transit_gateways/testString/metrics"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewaysMetricsOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"account_id": "AccountID", "billing_event_at": "2019-01-01T12:00:00.000Z", "billing_started_at": "2019-01-01T12:00:00.000Z", "bss_std_plan": true, "connection_max": 13, "created_at": "2019-01-01T12:00:00.000Z", "database_id": 987, "device_metrics": "DeviceMetrics", "gateway_id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "last_billed_at": "2019-01-01T12:00:00.000Z", "last_collected": 13, "last_collected_timestamp": "2019-01-01T12:00:00.000Z", "last_reported": 12, "last_reported_timestamp": "2019-01-01T12:00:00.000Z", "metric_type": "local", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke ListTransitGatewaysMetricsOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the ListTransitGatewaysMetricsOpsOptions model
				listTransitGatewaysMetricsOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewaysMetricsOpsOptions)
				listTransitGatewaysMetricsOpsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewaysMetricsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.ListTransitGatewaysMetricsOpsWithContext(ctx, listTransitGatewaysMetricsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.ListTransitGatewaysMetricsOps(listTransitGatewaysMetricsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.ListTransitGatewaysMetricsOpsWithContext(ctx, listTransitGatewaysMetricsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewaysMetricsOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"account_id": "AccountID", "billing_event_at": "2019-01-01T12:00:00.000Z", "billing_started_at": "2019-01-01T12:00:00.000Z", "bss_std_plan": true, "connection_max": 13, "created_at": "2019-01-01T12:00:00.000Z", "database_id": 987, "device_metrics": "DeviceMetrics", "gateway_id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "last_billed_at": "2019-01-01T12:00:00.000Z", "last_collected": 13, "last_collected_timestamp": "2019-01-01T12:00:00.000Z", "last_reported": 12, "last_reported_timestamp": "2019-01-01T12:00:00.000Z", "metric_type": "local", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke ListTransitGatewaysMetricsOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.ListTransitGatewaysMetricsOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListTransitGatewaysMetricsOpsOptions model
				listTransitGatewaysMetricsOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewaysMetricsOpsOptions)
				listTransitGatewaysMetricsOpsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewaysMetricsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.ListTransitGatewaysMetricsOps(listTransitGatewaysMetricsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListTransitGatewaysMetricsOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewaysMetricsOpsOptions model
				listTransitGatewaysMetricsOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewaysMetricsOpsOptions)
				listTransitGatewaysMetricsOpsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewaysMetricsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.ListTransitGatewaysMetricsOps(listTransitGatewaysMetricsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListTransitGatewaysMetricsOpsOptions model with no property values
				listTransitGatewaysMetricsOpsOptionsModelNew := new(transitgatewayapisv1.ListTransitGatewaysMetricsOpsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.ListTransitGatewaysMetricsOps(listTransitGatewaysMetricsOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListTransitGatewaysMetricsOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewaysMetricsOpsOptions model
				listTransitGatewaysMetricsOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewaysMetricsOpsOptions)
				listTransitGatewaysMetricsOpsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewaysMetricsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.ListTransitGatewaysMetricsOps(listTransitGatewaysMetricsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListTransitGatewayConnectionPrefixFiltersOps(listTransitGatewayConnectionPrefixFiltersOpsOptions *ListTransitGatewayConnectionPrefixFiltersOpsOptions) - Operation response error`, func() {
		version := "testString"
		listTransitGatewayConnectionPrefixFiltersOpsPath := "/ops/transit_gateways/testString/connections/testString/prefix_filters"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewayConnectionPrefixFiltersOpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListTransitGatewayConnectionPrefixFiltersOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewayConnectionPrefixFiltersOpsOptions model
				listTransitGatewayConnectionPrefixFiltersOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewayConnectionPrefixFiltersOpsOptions)
				listTransitGatewayConnectionPrefixFiltersOpsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewayConnectionPrefixFiltersOpsOptionsModel.ID = core.StringPtr("testString")
				listTransitGatewayConnectionPrefixFiltersOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayConnectionPrefixFiltersOps(listTransitGatewayConnectionPrefixFiltersOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.ListTransitGatewayConnectionPrefixFiltersOps(listTransitGatewayConnectionPrefixFiltersOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListTransitGatewayConnectionPrefixFiltersOps(listTransitGatewayConnectionPrefixFiltersOpsOptions *ListTransitGatewayConnectionPrefixFiltersOpsOptions)`, func() {
		version := "testString"
		listTransitGatewayConnectionPrefixFiltersOpsPath := "/ops/transit_gateways/testString/connections/testString/prefix_filters"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewayConnectionPrefixFiltersOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"prefix_filters": [{"action": "permit", "before": "1a15dcab-7e40-45e1-b7c5-bc690eaa9782", "created_at": "2019-01-01T12:00:00.000Z", "ge": 0, "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "le": 32, "prefix": "192.168.100.0/24", "updated_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListTransitGatewayConnectionPrefixFiltersOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the ListTransitGatewayConnectionPrefixFiltersOpsOptions model
				listTransitGatewayConnectionPrefixFiltersOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewayConnectionPrefixFiltersOpsOptions)
				listTransitGatewayConnectionPrefixFiltersOpsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewayConnectionPrefixFiltersOpsOptionsModel.ID = core.StringPtr("testString")
				listTransitGatewayConnectionPrefixFiltersOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.ListTransitGatewayConnectionPrefixFiltersOpsWithContext(ctx, listTransitGatewayConnectionPrefixFiltersOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayConnectionPrefixFiltersOps(listTransitGatewayConnectionPrefixFiltersOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.ListTransitGatewayConnectionPrefixFiltersOpsWithContext(ctx, listTransitGatewayConnectionPrefixFiltersOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewayConnectionPrefixFiltersOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"prefix_filters": [{"action": "permit", "before": "1a15dcab-7e40-45e1-b7c5-bc690eaa9782", "created_at": "2019-01-01T12:00:00.000Z", "ge": 0, "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "le": 32, "prefix": "192.168.100.0/24", "updated_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListTransitGatewayConnectionPrefixFiltersOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayConnectionPrefixFiltersOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListTransitGatewayConnectionPrefixFiltersOpsOptions model
				listTransitGatewayConnectionPrefixFiltersOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewayConnectionPrefixFiltersOpsOptions)
				listTransitGatewayConnectionPrefixFiltersOpsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewayConnectionPrefixFiltersOpsOptionsModel.ID = core.StringPtr("testString")
				listTransitGatewayConnectionPrefixFiltersOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.ListTransitGatewayConnectionPrefixFiltersOps(listTransitGatewayConnectionPrefixFiltersOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListTransitGatewayConnectionPrefixFiltersOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewayConnectionPrefixFiltersOpsOptions model
				listTransitGatewayConnectionPrefixFiltersOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewayConnectionPrefixFiltersOpsOptions)
				listTransitGatewayConnectionPrefixFiltersOpsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewayConnectionPrefixFiltersOpsOptionsModel.ID = core.StringPtr("testString")
				listTransitGatewayConnectionPrefixFiltersOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayConnectionPrefixFiltersOps(listTransitGatewayConnectionPrefixFiltersOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListTransitGatewayConnectionPrefixFiltersOpsOptions model with no property values
				listTransitGatewayConnectionPrefixFiltersOpsOptionsModelNew := new(transitgatewayapisv1.ListTransitGatewayConnectionPrefixFiltersOpsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.ListTransitGatewayConnectionPrefixFiltersOps(listTransitGatewayConnectionPrefixFiltersOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListTransitGatewayConnectionPrefixFiltersOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewayConnectionPrefixFiltersOpsOptions model
				listTransitGatewayConnectionPrefixFiltersOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewayConnectionPrefixFiltersOpsOptions)
				listTransitGatewayConnectionPrefixFiltersOpsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewayConnectionPrefixFiltersOpsOptionsModel.ID = core.StringPtr("testString")
				listTransitGatewayConnectionPrefixFiltersOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayConnectionPrefixFiltersOps(listTransitGatewayConnectionPrefixFiltersOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListTransitGatewayConnectionPrefixFilters(listTransitGatewayConnectionPrefixFiltersOptions *ListTransitGatewayConnectionPrefixFiltersOptions) - Operation response error`, func() {
		version := "testString"
		listTransitGatewayConnectionPrefixFiltersPath := "/transit_gateways/testString/connections/testString/prefix_filters"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewayConnectionPrefixFiltersPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListTransitGatewayConnectionPrefixFilters with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewayConnectionPrefixFiltersOptions model
				listTransitGatewayConnectionPrefixFiltersOptionsModel := new(transitgatewayapisv1.ListTransitGatewayConnectionPrefixFiltersOptions)
				listTransitGatewayConnectionPrefixFiltersOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewayConnectionPrefixFiltersOptionsModel.ID = core.StringPtr("testString")
				listTransitGatewayConnectionPrefixFiltersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayConnectionPrefixFilters(listTransitGatewayConnectionPrefixFiltersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.ListTransitGatewayConnectionPrefixFilters(listTransitGatewayConnectionPrefixFiltersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListTransitGatewayConnectionPrefixFilters(listTransitGatewayConnectionPrefixFiltersOptions *ListTransitGatewayConnectionPrefixFiltersOptions)`, func() {
		version := "testString"
		listTransitGatewayConnectionPrefixFiltersPath := "/transit_gateways/testString/connections/testString/prefix_filters"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewayConnectionPrefixFiltersPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"prefix_filters": [{"action": "permit", "before": "1a15dcab-7e40-45e1-b7c5-bc690eaa9782", "created_at": "2019-01-01T12:00:00.000Z", "ge": 0, "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "le": 32, "prefix": "192.168.100.0/24", "updated_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListTransitGatewayConnectionPrefixFilters successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the ListTransitGatewayConnectionPrefixFiltersOptions model
				listTransitGatewayConnectionPrefixFiltersOptionsModel := new(transitgatewayapisv1.ListTransitGatewayConnectionPrefixFiltersOptions)
				listTransitGatewayConnectionPrefixFiltersOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewayConnectionPrefixFiltersOptionsModel.ID = core.StringPtr("testString")
				listTransitGatewayConnectionPrefixFiltersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.ListTransitGatewayConnectionPrefixFiltersWithContext(ctx, listTransitGatewayConnectionPrefixFiltersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayConnectionPrefixFilters(listTransitGatewayConnectionPrefixFiltersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.ListTransitGatewayConnectionPrefixFiltersWithContext(ctx, listTransitGatewayConnectionPrefixFiltersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewayConnectionPrefixFiltersPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"prefix_filters": [{"action": "permit", "before": "1a15dcab-7e40-45e1-b7c5-bc690eaa9782", "created_at": "2019-01-01T12:00:00.000Z", "ge": 0, "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "le": 32, "prefix": "192.168.100.0/24", "updated_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListTransitGatewayConnectionPrefixFilters successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayConnectionPrefixFilters(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListTransitGatewayConnectionPrefixFiltersOptions model
				listTransitGatewayConnectionPrefixFiltersOptionsModel := new(transitgatewayapisv1.ListTransitGatewayConnectionPrefixFiltersOptions)
				listTransitGatewayConnectionPrefixFiltersOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewayConnectionPrefixFiltersOptionsModel.ID = core.StringPtr("testString")
				listTransitGatewayConnectionPrefixFiltersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.ListTransitGatewayConnectionPrefixFilters(listTransitGatewayConnectionPrefixFiltersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListTransitGatewayConnectionPrefixFilters with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewayConnectionPrefixFiltersOptions model
				listTransitGatewayConnectionPrefixFiltersOptionsModel := new(transitgatewayapisv1.ListTransitGatewayConnectionPrefixFiltersOptions)
				listTransitGatewayConnectionPrefixFiltersOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewayConnectionPrefixFiltersOptionsModel.ID = core.StringPtr("testString")
				listTransitGatewayConnectionPrefixFiltersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayConnectionPrefixFilters(listTransitGatewayConnectionPrefixFiltersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListTransitGatewayConnectionPrefixFiltersOptions model with no property values
				listTransitGatewayConnectionPrefixFiltersOptionsModelNew := new(transitgatewayapisv1.ListTransitGatewayConnectionPrefixFiltersOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.ListTransitGatewayConnectionPrefixFilters(listTransitGatewayConnectionPrefixFiltersOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListTransitGatewayConnectionPrefixFilters successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewayConnectionPrefixFiltersOptions model
				listTransitGatewayConnectionPrefixFiltersOptionsModel := new(transitgatewayapisv1.ListTransitGatewayConnectionPrefixFiltersOptions)
				listTransitGatewayConnectionPrefixFiltersOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewayConnectionPrefixFiltersOptionsModel.ID = core.StringPtr("testString")
				listTransitGatewayConnectionPrefixFiltersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayConnectionPrefixFilters(listTransitGatewayConnectionPrefixFiltersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateTransitGatewayConnectionPrefixFilter(createTransitGatewayConnectionPrefixFilterOptions *CreateTransitGatewayConnectionPrefixFilterOptions) - Operation response error`, func() {
		version := "testString"
		createTransitGatewayConnectionPrefixFilterPath := "/transit_gateways/testString/connections/testString/prefix_filters"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createTransitGatewayConnectionPrefixFilterPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateTransitGatewayConnectionPrefixFilter with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateTransitGatewayConnectionPrefixFilterOptions model
				createTransitGatewayConnectionPrefixFilterOptionsModel := new(transitgatewayapisv1.CreateTransitGatewayConnectionPrefixFilterOptions)
				createTransitGatewayConnectionPrefixFilterOptionsModel.TransitGatewayID = core.StringPtr("testString")
				createTransitGatewayConnectionPrefixFilterOptionsModel.ID = core.StringPtr("testString")
				createTransitGatewayConnectionPrefixFilterOptionsModel.Action = core.StringPtr("permit")
				createTransitGatewayConnectionPrefixFilterOptionsModel.Prefix = core.StringPtr("192.168.100.0/24")
				createTransitGatewayConnectionPrefixFilterOptionsModel.Before = core.StringPtr("1a15dcab-7e40-45e1-b7c5-bc690eaa9782")
				createTransitGatewayConnectionPrefixFilterOptionsModel.Ge = core.Int64Ptr(int64(0))
				createTransitGatewayConnectionPrefixFilterOptionsModel.Le = core.Int64Ptr(int64(32))
				createTransitGatewayConnectionPrefixFilterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.CreateTransitGatewayConnectionPrefixFilter(createTransitGatewayConnectionPrefixFilterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.CreateTransitGatewayConnectionPrefixFilter(createTransitGatewayConnectionPrefixFilterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateTransitGatewayConnectionPrefixFilter(createTransitGatewayConnectionPrefixFilterOptions *CreateTransitGatewayConnectionPrefixFilterOptions)`, func() {
		version := "testString"
		createTransitGatewayConnectionPrefixFilterPath := "/transit_gateways/testString/connections/testString/prefix_filters"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createTransitGatewayConnectionPrefixFilterPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"action": "permit", "before": "1a15dcab-7e40-45e1-b7c5-bc690eaa9782", "created_at": "2019-01-01T12:00:00.000Z", "ge": 0, "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "le": 32, "prefix": "192.168.100.0/24", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke CreateTransitGatewayConnectionPrefixFilter successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the CreateTransitGatewayConnectionPrefixFilterOptions model
				createTransitGatewayConnectionPrefixFilterOptionsModel := new(transitgatewayapisv1.CreateTransitGatewayConnectionPrefixFilterOptions)
				createTransitGatewayConnectionPrefixFilterOptionsModel.TransitGatewayID = core.StringPtr("testString")
				createTransitGatewayConnectionPrefixFilterOptionsModel.ID = core.StringPtr("testString")
				createTransitGatewayConnectionPrefixFilterOptionsModel.Action = core.StringPtr("permit")
				createTransitGatewayConnectionPrefixFilterOptionsModel.Prefix = core.StringPtr("192.168.100.0/24")
				createTransitGatewayConnectionPrefixFilterOptionsModel.Before = core.StringPtr("1a15dcab-7e40-45e1-b7c5-bc690eaa9782")
				createTransitGatewayConnectionPrefixFilterOptionsModel.Ge = core.Int64Ptr(int64(0))
				createTransitGatewayConnectionPrefixFilterOptionsModel.Le = core.Int64Ptr(int64(32))
				createTransitGatewayConnectionPrefixFilterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.CreateTransitGatewayConnectionPrefixFilterWithContext(ctx, createTransitGatewayConnectionPrefixFilterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.CreateTransitGatewayConnectionPrefixFilter(createTransitGatewayConnectionPrefixFilterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.CreateTransitGatewayConnectionPrefixFilterWithContext(ctx, createTransitGatewayConnectionPrefixFilterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createTransitGatewayConnectionPrefixFilterPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"action": "permit", "before": "1a15dcab-7e40-45e1-b7c5-bc690eaa9782", "created_at": "2019-01-01T12:00:00.000Z", "ge": 0, "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "le": 32, "prefix": "192.168.100.0/24", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke CreateTransitGatewayConnectionPrefixFilter successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.CreateTransitGatewayConnectionPrefixFilter(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateTransitGatewayConnectionPrefixFilterOptions model
				createTransitGatewayConnectionPrefixFilterOptionsModel := new(transitgatewayapisv1.CreateTransitGatewayConnectionPrefixFilterOptions)
				createTransitGatewayConnectionPrefixFilterOptionsModel.TransitGatewayID = core.StringPtr("testString")
				createTransitGatewayConnectionPrefixFilterOptionsModel.ID = core.StringPtr("testString")
				createTransitGatewayConnectionPrefixFilterOptionsModel.Action = core.StringPtr("permit")
				createTransitGatewayConnectionPrefixFilterOptionsModel.Prefix = core.StringPtr("192.168.100.0/24")
				createTransitGatewayConnectionPrefixFilterOptionsModel.Before = core.StringPtr("1a15dcab-7e40-45e1-b7c5-bc690eaa9782")
				createTransitGatewayConnectionPrefixFilterOptionsModel.Ge = core.Int64Ptr(int64(0))
				createTransitGatewayConnectionPrefixFilterOptionsModel.Le = core.Int64Ptr(int64(32))
				createTransitGatewayConnectionPrefixFilterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.CreateTransitGatewayConnectionPrefixFilter(createTransitGatewayConnectionPrefixFilterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateTransitGatewayConnectionPrefixFilter with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateTransitGatewayConnectionPrefixFilterOptions model
				createTransitGatewayConnectionPrefixFilterOptionsModel := new(transitgatewayapisv1.CreateTransitGatewayConnectionPrefixFilterOptions)
				createTransitGatewayConnectionPrefixFilterOptionsModel.TransitGatewayID = core.StringPtr("testString")
				createTransitGatewayConnectionPrefixFilterOptionsModel.ID = core.StringPtr("testString")
				createTransitGatewayConnectionPrefixFilterOptionsModel.Action = core.StringPtr("permit")
				createTransitGatewayConnectionPrefixFilterOptionsModel.Prefix = core.StringPtr("192.168.100.0/24")
				createTransitGatewayConnectionPrefixFilterOptionsModel.Before = core.StringPtr("1a15dcab-7e40-45e1-b7c5-bc690eaa9782")
				createTransitGatewayConnectionPrefixFilterOptionsModel.Ge = core.Int64Ptr(int64(0))
				createTransitGatewayConnectionPrefixFilterOptionsModel.Le = core.Int64Ptr(int64(32))
				createTransitGatewayConnectionPrefixFilterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.CreateTransitGatewayConnectionPrefixFilter(createTransitGatewayConnectionPrefixFilterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateTransitGatewayConnectionPrefixFilterOptions model with no property values
				createTransitGatewayConnectionPrefixFilterOptionsModelNew := new(transitgatewayapisv1.CreateTransitGatewayConnectionPrefixFilterOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.CreateTransitGatewayConnectionPrefixFilter(createTransitGatewayConnectionPrefixFilterOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateTransitGatewayConnectionPrefixFilter successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateTransitGatewayConnectionPrefixFilterOptions model
				createTransitGatewayConnectionPrefixFilterOptionsModel := new(transitgatewayapisv1.CreateTransitGatewayConnectionPrefixFilterOptions)
				createTransitGatewayConnectionPrefixFilterOptionsModel.TransitGatewayID = core.StringPtr("testString")
				createTransitGatewayConnectionPrefixFilterOptionsModel.ID = core.StringPtr("testString")
				createTransitGatewayConnectionPrefixFilterOptionsModel.Action = core.StringPtr("permit")
				createTransitGatewayConnectionPrefixFilterOptionsModel.Prefix = core.StringPtr("192.168.100.0/24")
				createTransitGatewayConnectionPrefixFilterOptionsModel.Before = core.StringPtr("1a15dcab-7e40-45e1-b7c5-bc690eaa9782")
				createTransitGatewayConnectionPrefixFilterOptionsModel.Ge = core.Int64Ptr(int64(0))
				createTransitGatewayConnectionPrefixFilterOptionsModel.Le = core.Int64Ptr(int64(32))
				createTransitGatewayConnectionPrefixFilterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.CreateTransitGatewayConnectionPrefixFilter(createTransitGatewayConnectionPrefixFilterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceTransitGatewayConnectionPrefixFilter(replaceTransitGatewayConnectionPrefixFilterOptions *ReplaceTransitGatewayConnectionPrefixFilterOptions) - Operation response error`, func() {
		version := "testString"
		replaceTransitGatewayConnectionPrefixFilterPath := "/transit_gateways/testString/connections/testString/prefix_filters"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceTransitGatewayConnectionPrefixFilterPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReplaceTransitGatewayConnectionPrefixFilter with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the PrefixFilterPut model
				prefixFilterPutModel := new(transitgatewayapisv1.PrefixFilterPut)
				prefixFilterPutModel.Action = core.StringPtr("permit")
				prefixFilterPutModel.Ge = core.Int64Ptr(int64(0))
				prefixFilterPutModel.Le = core.Int64Ptr(int64(32))
				prefixFilterPutModel.Prefix = core.StringPtr("192.168.100.0/24")

				// Construct an instance of the ReplaceTransitGatewayConnectionPrefixFilterOptions model
				replaceTransitGatewayConnectionPrefixFilterOptionsModel := new(transitgatewayapisv1.ReplaceTransitGatewayConnectionPrefixFilterOptions)
				replaceTransitGatewayConnectionPrefixFilterOptionsModel.TransitGatewayID = core.StringPtr("testString")
				replaceTransitGatewayConnectionPrefixFilterOptionsModel.ID = core.StringPtr("testString")
				replaceTransitGatewayConnectionPrefixFilterOptionsModel.PrefixFilters = []transitgatewayapisv1.PrefixFilterPut{*prefixFilterPutModel}
				replaceTransitGatewayConnectionPrefixFilterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.ReplaceTransitGatewayConnectionPrefixFilter(replaceTransitGatewayConnectionPrefixFilterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.ReplaceTransitGatewayConnectionPrefixFilter(replaceTransitGatewayConnectionPrefixFilterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceTransitGatewayConnectionPrefixFilter(replaceTransitGatewayConnectionPrefixFilterOptions *ReplaceTransitGatewayConnectionPrefixFilterOptions)`, func() {
		version := "testString"
		replaceTransitGatewayConnectionPrefixFilterPath := "/transit_gateways/testString/connections/testString/prefix_filters"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceTransitGatewayConnectionPrefixFilterPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"prefix_filters": [{"action": "permit", "before": "1a15dcab-7e40-45e1-b7c5-bc690eaa9782", "created_at": "2019-01-01T12:00:00.000Z", "ge": 0, "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "le": 32, "prefix": "192.168.100.0/24", "updated_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ReplaceTransitGatewayConnectionPrefixFilter successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the PrefixFilterPut model
				prefixFilterPutModel := new(transitgatewayapisv1.PrefixFilterPut)
				prefixFilterPutModel.Action = core.StringPtr("permit")
				prefixFilterPutModel.Ge = core.Int64Ptr(int64(0))
				prefixFilterPutModel.Le = core.Int64Ptr(int64(32))
				prefixFilterPutModel.Prefix = core.StringPtr("192.168.100.0/24")

				// Construct an instance of the ReplaceTransitGatewayConnectionPrefixFilterOptions model
				replaceTransitGatewayConnectionPrefixFilterOptionsModel := new(transitgatewayapisv1.ReplaceTransitGatewayConnectionPrefixFilterOptions)
				replaceTransitGatewayConnectionPrefixFilterOptionsModel.TransitGatewayID = core.StringPtr("testString")
				replaceTransitGatewayConnectionPrefixFilterOptionsModel.ID = core.StringPtr("testString")
				replaceTransitGatewayConnectionPrefixFilterOptionsModel.PrefixFilters = []transitgatewayapisv1.PrefixFilterPut{*prefixFilterPutModel}
				replaceTransitGatewayConnectionPrefixFilterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.ReplaceTransitGatewayConnectionPrefixFilterWithContext(ctx, replaceTransitGatewayConnectionPrefixFilterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.ReplaceTransitGatewayConnectionPrefixFilter(replaceTransitGatewayConnectionPrefixFilterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.ReplaceTransitGatewayConnectionPrefixFilterWithContext(ctx, replaceTransitGatewayConnectionPrefixFilterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceTransitGatewayConnectionPrefixFilterPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"prefix_filters": [{"action": "permit", "before": "1a15dcab-7e40-45e1-b7c5-bc690eaa9782", "created_at": "2019-01-01T12:00:00.000Z", "ge": 0, "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "le": 32, "prefix": "192.168.100.0/24", "updated_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ReplaceTransitGatewayConnectionPrefixFilter successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.ReplaceTransitGatewayConnectionPrefixFilter(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PrefixFilterPut model
				prefixFilterPutModel := new(transitgatewayapisv1.PrefixFilterPut)
				prefixFilterPutModel.Action = core.StringPtr("permit")
				prefixFilterPutModel.Ge = core.Int64Ptr(int64(0))
				prefixFilterPutModel.Le = core.Int64Ptr(int64(32))
				prefixFilterPutModel.Prefix = core.StringPtr("192.168.100.0/24")

				// Construct an instance of the ReplaceTransitGatewayConnectionPrefixFilterOptions model
				replaceTransitGatewayConnectionPrefixFilterOptionsModel := new(transitgatewayapisv1.ReplaceTransitGatewayConnectionPrefixFilterOptions)
				replaceTransitGatewayConnectionPrefixFilterOptionsModel.TransitGatewayID = core.StringPtr("testString")
				replaceTransitGatewayConnectionPrefixFilterOptionsModel.ID = core.StringPtr("testString")
				replaceTransitGatewayConnectionPrefixFilterOptionsModel.PrefixFilters = []transitgatewayapisv1.PrefixFilterPut{*prefixFilterPutModel}
				replaceTransitGatewayConnectionPrefixFilterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.ReplaceTransitGatewayConnectionPrefixFilter(replaceTransitGatewayConnectionPrefixFilterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ReplaceTransitGatewayConnectionPrefixFilter with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the PrefixFilterPut model
				prefixFilterPutModel := new(transitgatewayapisv1.PrefixFilterPut)
				prefixFilterPutModel.Action = core.StringPtr("permit")
				prefixFilterPutModel.Ge = core.Int64Ptr(int64(0))
				prefixFilterPutModel.Le = core.Int64Ptr(int64(32))
				prefixFilterPutModel.Prefix = core.StringPtr("192.168.100.0/24")

				// Construct an instance of the ReplaceTransitGatewayConnectionPrefixFilterOptions model
				replaceTransitGatewayConnectionPrefixFilterOptionsModel := new(transitgatewayapisv1.ReplaceTransitGatewayConnectionPrefixFilterOptions)
				replaceTransitGatewayConnectionPrefixFilterOptionsModel.TransitGatewayID = core.StringPtr("testString")
				replaceTransitGatewayConnectionPrefixFilterOptionsModel.ID = core.StringPtr("testString")
				replaceTransitGatewayConnectionPrefixFilterOptionsModel.PrefixFilters = []transitgatewayapisv1.PrefixFilterPut{*prefixFilterPutModel}
				replaceTransitGatewayConnectionPrefixFilterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.ReplaceTransitGatewayConnectionPrefixFilter(replaceTransitGatewayConnectionPrefixFilterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ReplaceTransitGatewayConnectionPrefixFilterOptions model with no property values
				replaceTransitGatewayConnectionPrefixFilterOptionsModelNew := new(transitgatewayapisv1.ReplaceTransitGatewayConnectionPrefixFilterOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.ReplaceTransitGatewayConnectionPrefixFilter(replaceTransitGatewayConnectionPrefixFilterOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke ReplaceTransitGatewayConnectionPrefixFilter successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the PrefixFilterPut model
				prefixFilterPutModel := new(transitgatewayapisv1.PrefixFilterPut)
				prefixFilterPutModel.Action = core.StringPtr("permit")
				prefixFilterPutModel.Ge = core.Int64Ptr(int64(0))
				prefixFilterPutModel.Le = core.Int64Ptr(int64(32))
				prefixFilterPutModel.Prefix = core.StringPtr("192.168.100.0/24")

				// Construct an instance of the ReplaceTransitGatewayConnectionPrefixFilterOptions model
				replaceTransitGatewayConnectionPrefixFilterOptionsModel := new(transitgatewayapisv1.ReplaceTransitGatewayConnectionPrefixFilterOptions)
				replaceTransitGatewayConnectionPrefixFilterOptionsModel.TransitGatewayID = core.StringPtr("testString")
				replaceTransitGatewayConnectionPrefixFilterOptionsModel.ID = core.StringPtr("testString")
				replaceTransitGatewayConnectionPrefixFilterOptionsModel.PrefixFilters = []transitgatewayapisv1.PrefixFilterPut{*prefixFilterPutModel}
				replaceTransitGatewayConnectionPrefixFilterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.ReplaceTransitGatewayConnectionPrefixFilter(replaceTransitGatewayConnectionPrefixFilterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteTransitGatewayConnectionPrefixFilter(deleteTransitGatewayConnectionPrefixFilterOptions *DeleteTransitGatewayConnectionPrefixFilterOptions)`, func() {
		version := "testString"
		deleteTransitGatewayConnectionPrefixFilterPath := "/transit_gateways/testString/connections/testString/prefix_filters/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteTransitGatewayConnectionPrefixFilterPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteTransitGatewayConnectionPrefixFilter successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := transitGatewayApisService.DeleteTransitGatewayConnectionPrefixFilter(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteTransitGatewayConnectionPrefixFilterOptions model
				deleteTransitGatewayConnectionPrefixFilterOptionsModel := new(transitgatewayapisv1.DeleteTransitGatewayConnectionPrefixFilterOptions)
				deleteTransitGatewayConnectionPrefixFilterOptionsModel.TransitGatewayID = core.StringPtr("testString")
				deleteTransitGatewayConnectionPrefixFilterOptionsModel.ID = core.StringPtr("testString")
				deleteTransitGatewayConnectionPrefixFilterOptionsModel.FilterID = core.StringPtr("testString")
				deleteTransitGatewayConnectionPrefixFilterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = transitGatewayApisService.DeleteTransitGatewayConnectionPrefixFilter(deleteTransitGatewayConnectionPrefixFilterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteTransitGatewayConnectionPrefixFilter with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the DeleteTransitGatewayConnectionPrefixFilterOptions model
				deleteTransitGatewayConnectionPrefixFilterOptionsModel := new(transitgatewayapisv1.DeleteTransitGatewayConnectionPrefixFilterOptions)
				deleteTransitGatewayConnectionPrefixFilterOptionsModel.TransitGatewayID = core.StringPtr("testString")
				deleteTransitGatewayConnectionPrefixFilterOptionsModel.ID = core.StringPtr("testString")
				deleteTransitGatewayConnectionPrefixFilterOptionsModel.FilterID = core.StringPtr("testString")
				deleteTransitGatewayConnectionPrefixFilterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := transitGatewayApisService.DeleteTransitGatewayConnectionPrefixFilter(deleteTransitGatewayConnectionPrefixFilterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteTransitGatewayConnectionPrefixFilterOptions model with no property values
				deleteTransitGatewayConnectionPrefixFilterOptionsModelNew := new(transitgatewayapisv1.DeleteTransitGatewayConnectionPrefixFilterOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = transitGatewayApisService.DeleteTransitGatewayConnectionPrefixFilter(deleteTransitGatewayConnectionPrefixFilterOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetTransitGatewayConnectionPrefixFilter(getTransitGatewayConnectionPrefixFilterOptions *GetTransitGatewayConnectionPrefixFilterOptions) - Operation response error`, func() {
		version := "testString"
		getTransitGatewayConnectionPrefixFilterPath := "/transit_gateways/testString/connections/testString/prefix_filters/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTransitGatewayConnectionPrefixFilterPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetTransitGatewayConnectionPrefixFilter with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetTransitGatewayConnectionPrefixFilterOptions model
				getTransitGatewayConnectionPrefixFilterOptionsModel := new(transitgatewayapisv1.GetTransitGatewayConnectionPrefixFilterOptions)
				getTransitGatewayConnectionPrefixFilterOptionsModel.TransitGatewayID = core.StringPtr("testString")
				getTransitGatewayConnectionPrefixFilterOptionsModel.ID = core.StringPtr("testString")
				getTransitGatewayConnectionPrefixFilterOptionsModel.FilterID = core.StringPtr("testString")
				getTransitGatewayConnectionPrefixFilterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.GetTransitGatewayConnectionPrefixFilter(getTransitGatewayConnectionPrefixFilterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.GetTransitGatewayConnectionPrefixFilter(getTransitGatewayConnectionPrefixFilterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetTransitGatewayConnectionPrefixFilter(getTransitGatewayConnectionPrefixFilterOptions *GetTransitGatewayConnectionPrefixFilterOptions)`, func() {
		version := "testString"
		getTransitGatewayConnectionPrefixFilterPath := "/transit_gateways/testString/connections/testString/prefix_filters/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTransitGatewayConnectionPrefixFilterPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"action": "permit", "before": "1a15dcab-7e40-45e1-b7c5-bc690eaa9782", "created_at": "2019-01-01T12:00:00.000Z", "ge": 0, "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "le": 32, "prefix": "192.168.100.0/24", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke GetTransitGatewayConnectionPrefixFilter successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the GetTransitGatewayConnectionPrefixFilterOptions model
				getTransitGatewayConnectionPrefixFilterOptionsModel := new(transitgatewayapisv1.GetTransitGatewayConnectionPrefixFilterOptions)
				getTransitGatewayConnectionPrefixFilterOptionsModel.TransitGatewayID = core.StringPtr("testString")
				getTransitGatewayConnectionPrefixFilterOptionsModel.ID = core.StringPtr("testString")
				getTransitGatewayConnectionPrefixFilterOptionsModel.FilterID = core.StringPtr("testString")
				getTransitGatewayConnectionPrefixFilterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.GetTransitGatewayConnectionPrefixFilterWithContext(ctx, getTransitGatewayConnectionPrefixFilterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.GetTransitGatewayConnectionPrefixFilter(getTransitGatewayConnectionPrefixFilterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.GetTransitGatewayConnectionPrefixFilterWithContext(ctx, getTransitGatewayConnectionPrefixFilterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTransitGatewayConnectionPrefixFilterPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"action": "permit", "before": "1a15dcab-7e40-45e1-b7c5-bc690eaa9782", "created_at": "2019-01-01T12:00:00.000Z", "ge": 0, "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "le": 32, "prefix": "192.168.100.0/24", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke GetTransitGatewayConnectionPrefixFilter successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.GetTransitGatewayConnectionPrefixFilter(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetTransitGatewayConnectionPrefixFilterOptions model
				getTransitGatewayConnectionPrefixFilterOptionsModel := new(transitgatewayapisv1.GetTransitGatewayConnectionPrefixFilterOptions)
				getTransitGatewayConnectionPrefixFilterOptionsModel.TransitGatewayID = core.StringPtr("testString")
				getTransitGatewayConnectionPrefixFilterOptionsModel.ID = core.StringPtr("testString")
				getTransitGatewayConnectionPrefixFilterOptionsModel.FilterID = core.StringPtr("testString")
				getTransitGatewayConnectionPrefixFilterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.GetTransitGatewayConnectionPrefixFilter(getTransitGatewayConnectionPrefixFilterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetTransitGatewayConnectionPrefixFilter with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetTransitGatewayConnectionPrefixFilterOptions model
				getTransitGatewayConnectionPrefixFilterOptionsModel := new(transitgatewayapisv1.GetTransitGatewayConnectionPrefixFilterOptions)
				getTransitGatewayConnectionPrefixFilterOptionsModel.TransitGatewayID = core.StringPtr("testString")
				getTransitGatewayConnectionPrefixFilterOptionsModel.ID = core.StringPtr("testString")
				getTransitGatewayConnectionPrefixFilterOptionsModel.FilterID = core.StringPtr("testString")
				getTransitGatewayConnectionPrefixFilterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.GetTransitGatewayConnectionPrefixFilter(getTransitGatewayConnectionPrefixFilterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetTransitGatewayConnectionPrefixFilterOptions model with no property values
				getTransitGatewayConnectionPrefixFilterOptionsModelNew := new(transitgatewayapisv1.GetTransitGatewayConnectionPrefixFilterOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.GetTransitGatewayConnectionPrefixFilter(getTransitGatewayConnectionPrefixFilterOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetTransitGatewayConnectionPrefixFilter successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetTransitGatewayConnectionPrefixFilterOptions model
				getTransitGatewayConnectionPrefixFilterOptionsModel := new(transitgatewayapisv1.GetTransitGatewayConnectionPrefixFilterOptions)
				getTransitGatewayConnectionPrefixFilterOptionsModel.TransitGatewayID = core.StringPtr("testString")
				getTransitGatewayConnectionPrefixFilterOptionsModel.ID = core.StringPtr("testString")
				getTransitGatewayConnectionPrefixFilterOptionsModel.FilterID = core.StringPtr("testString")
				getTransitGatewayConnectionPrefixFilterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.GetTransitGatewayConnectionPrefixFilter(getTransitGatewayConnectionPrefixFilterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateTransitGatewayConnectionPrefixFilter(updateTransitGatewayConnectionPrefixFilterOptions *UpdateTransitGatewayConnectionPrefixFilterOptions) - Operation response error`, func() {
		version := "testString"
		updateTransitGatewayConnectionPrefixFilterPath := "/transit_gateways/testString/connections/testString/prefix_filters/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateTransitGatewayConnectionPrefixFilterPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateTransitGatewayConnectionPrefixFilter with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the UpdateTransitGatewayConnectionPrefixFilterOptions model
				updateTransitGatewayConnectionPrefixFilterOptionsModel := new(transitgatewayapisv1.UpdateTransitGatewayConnectionPrefixFilterOptions)
				updateTransitGatewayConnectionPrefixFilterOptionsModel.TransitGatewayID = core.StringPtr("testString")
				updateTransitGatewayConnectionPrefixFilterOptionsModel.ID = core.StringPtr("testString")
				updateTransitGatewayConnectionPrefixFilterOptionsModel.FilterID = core.StringPtr("testString")
				updateTransitGatewayConnectionPrefixFilterOptionsModel.Action = core.StringPtr("permit")
				updateTransitGatewayConnectionPrefixFilterOptionsModel.Before = core.StringPtr("1a15dcab-7e40-45e1-b7c5-bc690eaa9782")
				updateTransitGatewayConnectionPrefixFilterOptionsModel.Ge = core.Int64Ptr(int64(0))
				updateTransitGatewayConnectionPrefixFilterOptionsModel.Le = core.Int64Ptr(int64(32))
				updateTransitGatewayConnectionPrefixFilterOptionsModel.Prefix = core.StringPtr("192.168.100.0/24")
				updateTransitGatewayConnectionPrefixFilterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.UpdateTransitGatewayConnectionPrefixFilter(updateTransitGatewayConnectionPrefixFilterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.UpdateTransitGatewayConnectionPrefixFilter(updateTransitGatewayConnectionPrefixFilterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateTransitGatewayConnectionPrefixFilter(updateTransitGatewayConnectionPrefixFilterOptions *UpdateTransitGatewayConnectionPrefixFilterOptions)`, func() {
		version := "testString"
		updateTransitGatewayConnectionPrefixFilterPath := "/transit_gateways/testString/connections/testString/prefix_filters/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateTransitGatewayConnectionPrefixFilterPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"action": "permit", "before": "1a15dcab-7e40-45e1-b7c5-bc690eaa9782", "created_at": "2019-01-01T12:00:00.000Z", "ge": 0, "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "le": 32, "prefix": "192.168.100.0/24", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke UpdateTransitGatewayConnectionPrefixFilter successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the UpdateTransitGatewayConnectionPrefixFilterOptions model
				updateTransitGatewayConnectionPrefixFilterOptionsModel := new(transitgatewayapisv1.UpdateTransitGatewayConnectionPrefixFilterOptions)
				updateTransitGatewayConnectionPrefixFilterOptionsModel.TransitGatewayID = core.StringPtr("testString")
				updateTransitGatewayConnectionPrefixFilterOptionsModel.ID = core.StringPtr("testString")
				updateTransitGatewayConnectionPrefixFilterOptionsModel.FilterID = core.StringPtr("testString")
				updateTransitGatewayConnectionPrefixFilterOptionsModel.Action = core.StringPtr("permit")
				updateTransitGatewayConnectionPrefixFilterOptionsModel.Before = core.StringPtr("1a15dcab-7e40-45e1-b7c5-bc690eaa9782")
				updateTransitGatewayConnectionPrefixFilterOptionsModel.Ge = core.Int64Ptr(int64(0))
				updateTransitGatewayConnectionPrefixFilterOptionsModel.Le = core.Int64Ptr(int64(32))
				updateTransitGatewayConnectionPrefixFilterOptionsModel.Prefix = core.StringPtr("192.168.100.0/24")
				updateTransitGatewayConnectionPrefixFilterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.UpdateTransitGatewayConnectionPrefixFilterWithContext(ctx, updateTransitGatewayConnectionPrefixFilterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.UpdateTransitGatewayConnectionPrefixFilter(updateTransitGatewayConnectionPrefixFilterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.UpdateTransitGatewayConnectionPrefixFilterWithContext(ctx, updateTransitGatewayConnectionPrefixFilterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateTransitGatewayConnectionPrefixFilterPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"action": "permit", "before": "1a15dcab-7e40-45e1-b7c5-bc690eaa9782", "created_at": "2019-01-01T12:00:00.000Z", "ge": 0, "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "le": 32, "prefix": "192.168.100.0/24", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke UpdateTransitGatewayConnectionPrefixFilter successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.UpdateTransitGatewayConnectionPrefixFilter(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateTransitGatewayConnectionPrefixFilterOptions model
				updateTransitGatewayConnectionPrefixFilterOptionsModel := new(transitgatewayapisv1.UpdateTransitGatewayConnectionPrefixFilterOptions)
				updateTransitGatewayConnectionPrefixFilterOptionsModel.TransitGatewayID = core.StringPtr("testString")
				updateTransitGatewayConnectionPrefixFilterOptionsModel.ID = core.StringPtr("testString")
				updateTransitGatewayConnectionPrefixFilterOptionsModel.FilterID = core.StringPtr("testString")
				updateTransitGatewayConnectionPrefixFilterOptionsModel.Action = core.StringPtr("permit")
				updateTransitGatewayConnectionPrefixFilterOptionsModel.Before = core.StringPtr("1a15dcab-7e40-45e1-b7c5-bc690eaa9782")
				updateTransitGatewayConnectionPrefixFilterOptionsModel.Ge = core.Int64Ptr(int64(0))
				updateTransitGatewayConnectionPrefixFilterOptionsModel.Le = core.Int64Ptr(int64(32))
				updateTransitGatewayConnectionPrefixFilterOptionsModel.Prefix = core.StringPtr("192.168.100.0/24")
				updateTransitGatewayConnectionPrefixFilterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.UpdateTransitGatewayConnectionPrefixFilter(updateTransitGatewayConnectionPrefixFilterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateTransitGatewayConnectionPrefixFilter with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the UpdateTransitGatewayConnectionPrefixFilterOptions model
				updateTransitGatewayConnectionPrefixFilterOptionsModel := new(transitgatewayapisv1.UpdateTransitGatewayConnectionPrefixFilterOptions)
				updateTransitGatewayConnectionPrefixFilterOptionsModel.TransitGatewayID = core.StringPtr("testString")
				updateTransitGatewayConnectionPrefixFilterOptionsModel.ID = core.StringPtr("testString")
				updateTransitGatewayConnectionPrefixFilterOptionsModel.FilterID = core.StringPtr("testString")
				updateTransitGatewayConnectionPrefixFilterOptionsModel.Action = core.StringPtr("permit")
				updateTransitGatewayConnectionPrefixFilterOptionsModel.Before = core.StringPtr("1a15dcab-7e40-45e1-b7c5-bc690eaa9782")
				updateTransitGatewayConnectionPrefixFilterOptionsModel.Ge = core.Int64Ptr(int64(0))
				updateTransitGatewayConnectionPrefixFilterOptionsModel.Le = core.Int64Ptr(int64(32))
				updateTransitGatewayConnectionPrefixFilterOptionsModel.Prefix = core.StringPtr("192.168.100.0/24")
				updateTransitGatewayConnectionPrefixFilterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.UpdateTransitGatewayConnectionPrefixFilter(updateTransitGatewayConnectionPrefixFilterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateTransitGatewayConnectionPrefixFilterOptions model with no property values
				updateTransitGatewayConnectionPrefixFilterOptionsModelNew := new(transitgatewayapisv1.UpdateTransitGatewayConnectionPrefixFilterOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.UpdateTransitGatewayConnectionPrefixFilter(updateTransitGatewayConnectionPrefixFilterOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateTransitGatewayConnectionPrefixFilter successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the UpdateTransitGatewayConnectionPrefixFilterOptions model
				updateTransitGatewayConnectionPrefixFilterOptionsModel := new(transitgatewayapisv1.UpdateTransitGatewayConnectionPrefixFilterOptions)
				updateTransitGatewayConnectionPrefixFilterOptionsModel.TransitGatewayID = core.StringPtr("testString")
				updateTransitGatewayConnectionPrefixFilterOptionsModel.ID = core.StringPtr("testString")
				updateTransitGatewayConnectionPrefixFilterOptionsModel.FilterID = core.StringPtr("testString")
				updateTransitGatewayConnectionPrefixFilterOptionsModel.Action = core.StringPtr("permit")
				updateTransitGatewayConnectionPrefixFilterOptionsModel.Before = core.StringPtr("1a15dcab-7e40-45e1-b7c5-bc690eaa9782")
				updateTransitGatewayConnectionPrefixFilterOptionsModel.Ge = core.Int64Ptr(int64(0))
				updateTransitGatewayConnectionPrefixFilterOptionsModel.Le = core.Int64Ptr(int64(32))
				updateTransitGatewayConnectionPrefixFilterOptionsModel.Prefix = core.StringPtr("192.168.100.0/24")
				updateTransitGatewayConnectionPrefixFilterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.UpdateTransitGatewayConnectionPrefixFilter(updateTransitGatewayConnectionPrefixFilterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListRouteDistinguishersOps(listRouteDistinguishersOpsOptions *ListRouteDistinguishersOpsOptions) - Operation response error`, func() {
		version := "testString"
		listRouteDistinguishersOpsPath := "/ops/route_distinguishers"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listRouteDistinguishersOpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					// TODO: Add check for decommissioned query parameter
					Expect(req.URL.Query()["decommissioned_at"]).To(Equal([]string{"testString"}))
					// TODO: Add check for is_associated query parameter
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListRouteDistinguishersOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListRouteDistinguishersOpsOptions model
				listRouteDistinguishersOpsOptionsModel := new(transitgatewayapisv1.ListRouteDistinguishersOpsOptions)
				listRouteDistinguishersOpsOptionsModel.Start = core.StringPtr("testString")
				listRouteDistinguishersOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listRouteDistinguishersOpsOptionsModel.Decommissioned = core.BoolPtr(true)
				listRouteDistinguishersOpsOptionsModel.DecommissionedAt = core.StringPtr("testString")
				listRouteDistinguishersOpsOptionsModel.IsAssociated = core.BoolPtr(true)
				listRouteDistinguishersOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.ListRouteDistinguishersOps(listRouteDistinguishersOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.ListRouteDistinguishersOps(listRouteDistinguishersOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListRouteDistinguishersOps(listRouteDistinguishersOpsOptions *ListRouteDistinguishersOpsOptions)`, func() {
		version := "testString"
		listRouteDistinguishersOpsPath := "/ops/route_distinguishers"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listRouteDistinguishersOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					// TODO: Add check for decommissioned query parameter
					Expect(req.URL.Query()["decommissioned_at"]).To(Equal([]string{"testString"}))
					// TODO: Add check for is_associated query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://internal.transit.cloud.ibm.com/v1/ops/route_distinguishers"}, "limit": 200, "next": {"href": "https://internal.transit.cloud.ibm.com/v1/ops/route_distinguishers?start=55555:3255120092", "start": "44789"}, "route_distinguishers": [{"decommissioned": false, "decommissioned_at": "2021-06-02T20:46:06.088Z", "is_associated": false, "rtrd": "47902:3255120092"}], "total_count": 1840}`)
				}))
			})
			It(`Invoke ListRouteDistinguishersOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the ListRouteDistinguishersOpsOptions model
				listRouteDistinguishersOpsOptionsModel := new(transitgatewayapisv1.ListRouteDistinguishersOpsOptions)
				listRouteDistinguishersOpsOptionsModel.Start = core.StringPtr("testString")
				listRouteDistinguishersOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listRouteDistinguishersOpsOptionsModel.Decommissioned = core.BoolPtr(true)
				listRouteDistinguishersOpsOptionsModel.DecommissionedAt = core.StringPtr("testString")
				listRouteDistinguishersOpsOptionsModel.IsAssociated = core.BoolPtr(true)
				listRouteDistinguishersOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.ListRouteDistinguishersOpsWithContext(ctx, listRouteDistinguishersOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.ListRouteDistinguishersOps(listRouteDistinguishersOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.ListRouteDistinguishersOpsWithContext(ctx, listRouteDistinguishersOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listRouteDistinguishersOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					// TODO: Add check for decommissioned query parameter
					Expect(req.URL.Query()["decommissioned_at"]).To(Equal([]string{"testString"}))
					// TODO: Add check for is_associated query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://internal.transit.cloud.ibm.com/v1/ops/route_distinguishers"}, "limit": 200, "next": {"href": "https://internal.transit.cloud.ibm.com/v1/ops/route_distinguishers?start=55555:3255120092", "start": "44789"}, "route_distinguishers": [{"decommissioned": false, "decommissioned_at": "2021-06-02T20:46:06.088Z", "is_associated": false, "rtrd": "47902:3255120092"}], "total_count": 1840}`)
				}))
			})
			It(`Invoke ListRouteDistinguishersOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.ListRouteDistinguishersOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListRouteDistinguishersOpsOptions model
				listRouteDistinguishersOpsOptionsModel := new(transitgatewayapisv1.ListRouteDistinguishersOpsOptions)
				listRouteDistinguishersOpsOptionsModel.Start = core.StringPtr("testString")
				listRouteDistinguishersOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listRouteDistinguishersOpsOptionsModel.Decommissioned = core.BoolPtr(true)
				listRouteDistinguishersOpsOptionsModel.DecommissionedAt = core.StringPtr("testString")
				listRouteDistinguishersOpsOptionsModel.IsAssociated = core.BoolPtr(true)
				listRouteDistinguishersOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.ListRouteDistinguishersOps(listRouteDistinguishersOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListRouteDistinguishersOps with error: Operation request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListRouteDistinguishersOpsOptions model
				listRouteDistinguishersOpsOptionsModel := new(transitgatewayapisv1.ListRouteDistinguishersOpsOptions)
				listRouteDistinguishersOpsOptionsModel.Start = core.StringPtr("testString")
				listRouteDistinguishersOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listRouteDistinguishersOpsOptionsModel.Decommissioned = core.BoolPtr(true)
				listRouteDistinguishersOpsOptionsModel.DecommissionedAt = core.StringPtr("testString")
				listRouteDistinguishersOpsOptionsModel.IsAssociated = core.BoolPtr(true)
				listRouteDistinguishersOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.ListRouteDistinguishersOps(listRouteDistinguishersOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListRouteDistinguishersOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListRouteDistinguishersOpsOptions model
				listRouteDistinguishersOpsOptionsModel := new(transitgatewayapisv1.ListRouteDistinguishersOpsOptions)
				listRouteDistinguishersOpsOptionsModel.Start = core.StringPtr("testString")
				listRouteDistinguishersOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listRouteDistinguishersOpsOptionsModel.Decommissioned = core.BoolPtr(true)
				listRouteDistinguishersOpsOptionsModel.DecommissionedAt = core.StringPtr("testString")
				listRouteDistinguishersOpsOptionsModel.IsAssociated = core.BoolPtr(true)
				listRouteDistinguishersOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.ListRouteDistinguishersOps(listRouteDistinguishersOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Test pagination helper method on response`, func() {
			It(`Invoke GetNextStart successfully`, func() {
				responseObject := new(transitgatewayapisv1.RouteDistinguisherCollectionOps)
				nextObject := new(transitgatewayapisv1.PaginationNextRDOps)
				nextObject.Start = core.StringPtr("abc-123")
				responseObject.Next = nextObject
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(Equal(core.StringPtr("abc-123")))
			})
			It(`Invoke GetNextStart without a "Next" property in the response`, func() {
				responseObject := new(transitgatewayapisv1.RouteDistinguisherCollectionOps)
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(BeNil())
			})
		})
		Context(`Using mock server endpoint - paginated response`, func() {
			BeforeEach(func() {
				var requestNumber int = 0
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listRouteDistinguishersOpsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					requestNumber++
					if requestNumber == 1 {
						fmt.Fprintf(res, "%s", `{"next":{"start":"1"},"total_count":2,"limit":1,"route_distinguishers":[{"decommissioned":false,"decommissioned_at":"2021-06-02T20:46:06.088Z","is_associated":false,"rtrd":"47902:3255120092"}]}`)
					} else if requestNumber == 2 {
						fmt.Fprintf(res, "%s", `{"total_count":2,"limit":1,"route_distinguishers":[{"decommissioned":false,"decommissioned_at":"2021-06-02T20:46:06.088Z","is_associated":false,"rtrd":"47902:3255120092"}]}`)
					} else {
						res.WriteHeader(400)
					}
				}))
			})
			It(`Use RouteDistinguishersOpsPager.GetNext successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				listRouteDistinguishersOpsOptionsModel := &transitgatewayapisv1.ListRouteDistinguishersOpsOptions{
					Limit: core.Int64Ptr(int64(10)),
					Decommissioned: core.BoolPtr(true),
					DecommissionedAt: core.StringPtr("testString"),
					IsAssociated: core.BoolPtr(true),
				}

				pager, err := transitGatewayApisService.NewRouteDistinguishersOpsPager(listRouteDistinguishersOpsOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				var allResults []transitgatewayapisv1.RouteDistinguisherOps
				for pager.HasNext() {
					nextPage, err := pager.GetNext()
					Expect(err).To(BeNil())
					Expect(nextPage).ToNot(BeNil())
					allResults = append(allResults, nextPage...)
				}
				Expect(len(allResults)).To(Equal(2))
			})
			It(`Use RouteDistinguishersOpsPager.GetAll successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				listRouteDistinguishersOpsOptionsModel := &transitgatewayapisv1.ListRouteDistinguishersOpsOptions{
					Limit: core.Int64Ptr(int64(10)),
					Decommissioned: core.BoolPtr(true),
					DecommissionedAt: core.StringPtr("testString"),
					IsAssociated: core.BoolPtr(true),
				}

				pager, err := transitGatewayApisService.NewRouteDistinguishersOpsPager(listRouteDistinguishersOpsOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				allResults, err := pager.GetAll()
				Expect(err).To(BeNil())
				Expect(allResults).ToNot(BeNil())
				Expect(len(allResults)).To(Equal(2))
			})
		})
	})
	Describe(`DeleteRouteDistinguisherOps(deleteRouteDistinguisherOpsOptions *DeleteRouteDistinguisherOpsOptions)`, func() {
		version := "testString"
		deleteRouteDistinguisherOpsPath := "/ops/route_distinguishers/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteRouteDistinguisherOpsPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteRouteDistinguisherOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := transitGatewayApisService.DeleteRouteDistinguisherOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteRouteDistinguisherOpsOptions model
				deleteRouteDistinguisherOpsOptionsModel := new(transitgatewayapisv1.DeleteRouteDistinguisherOpsOptions)
				deleteRouteDistinguisherOpsOptionsModel.Rtrd = core.StringPtr("testString")
				deleteRouteDistinguisherOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = transitGatewayApisService.DeleteRouteDistinguisherOps(deleteRouteDistinguisherOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteRouteDistinguisherOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the DeleteRouteDistinguisherOpsOptions model
				deleteRouteDistinguisherOpsOptionsModel := new(transitgatewayapisv1.DeleteRouteDistinguisherOpsOptions)
				deleteRouteDistinguisherOpsOptionsModel.Rtrd = core.StringPtr("testString")
				deleteRouteDistinguisherOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := transitGatewayApisService.DeleteRouteDistinguisherOps(deleteRouteDistinguisherOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteRouteDistinguisherOpsOptions model with no property values
				deleteRouteDistinguisherOpsOptionsModelNew := new(transitgatewayapisv1.DeleteRouteDistinguisherOpsOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = transitGatewayApisService.DeleteRouteDistinguisherOps(deleteRouteDistinguisherOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListTransitGatewayRouteReportsOps(listTransitGatewayRouteReportsOpsOptions *ListTransitGatewayRouteReportsOpsOptions) - Operation response error`, func() {
		version := "testString"
		listTransitGatewayRouteReportsOpsPath := "/ops/transit_gateways/testString/route_reports"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewayRouteReportsOpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListTransitGatewayRouteReportsOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewayRouteReportsOpsOptions model
				listTransitGatewayRouteReportsOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewayRouteReportsOpsOptions)
				listTransitGatewayRouteReportsOpsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewayRouteReportsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayRouteReportsOps(listTransitGatewayRouteReportsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.ListTransitGatewayRouteReportsOps(listTransitGatewayRouteReportsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListTransitGatewayRouteReportsOps(listTransitGatewayRouteReportsOpsOptions *ListTransitGatewayRouteReportsOpsOptions)`, func() {
		version := "testString"
		listTransitGatewayRouteReportsOpsPath := "/ops/transit_gateways/testString/route_reports"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewayRouteReportsOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"route_reports": [{"connections": [{"bgps": [{"as_path": "(65201 4201065544) 4203065544", "is_used": true, "local_preference": "190", "prefix": "172.17.0.0/16"}], "id": "3c265a62-91da-4261-a950-950b6af0eb58", "name": "transit-connection-vpc1", "routes": [{"prefix": "192.168.0.0/16"}], "type": "vpc"}], "created_at": "2019-01-01T12:00:00.000Z", "id": "1a15dcab-7e26-45e1-b7c5-bc690eaa9724", "overlapping_routes": [{"routes": [{"connection_id": "d2d985d8-1d8e-4e8b-96cd-cee2290ecaff", "prefix": "Prefix"}]}], "status": "complete", "updated_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListTransitGatewayRouteReportsOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the ListTransitGatewayRouteReportsOpsOptions model
				listTransitGatewayRouteReportsOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewayRouteReportsOpsOptions)
				listTransitGatewayRouteReportsOpsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewayRouteReportsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.ListTransitGatewayRouteReportsOpsWithContext(ctx, listTransitGatewayRouteReportsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayRouteReportsOps(listTransitGatewayRouteReportsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.ListTransitGatewayRouteReportsOpsWithContext(ctx, listTransitGatewayRouteReportsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewayRouteReportsOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"route_reports": [{"connections": [{"bgps": [{"as_path": "(65201 4201065544) 4203065544", "is_used": true, "local_preference": "190", "prefix": "172.17.0.0/16"}], "id": "3c265a62-91da-4261-a950-950b6af0eb58", "name": "transit-connection-vpc1", "routes": [{"prefix": "192.168.0.0/16"}], "type": "vpc"}], "created_at": "2019-01-01T12:00:00.000Z", "id": "1a15dcab-7e26-45e1-b7c5-bc690eaa9724", "overlapping_routes": [{"routes": [{"connection_id": "d2d985d8-1d8e-4e8b-96cd-cee2290ecaff", "prefix": "Prefix"}]}], "status": "complete", "updated_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListTransitGatewayRouteReportsOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayRouteReportsOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListTransitGatewayRouteReportsOpsOptions model
				listTransitGatewayRouteReportsOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewayRouteReportsOpsOptions)
				listTransitGatewayRouteReportsOpsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewayRouteReportsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.ListTransitGatewayRouteReportsOps(listTransitGatewayRouteReportsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListTransitGatewayRouteReportsOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewayRouteReportsOpsOptions model
				listTransitGatewayRouteReportsOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewayRouteReportsOpsOptions)
				listTransitGatewayRouteReportsOpsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewayRouteReportsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayRouteReportsOps(listTransitGatewayRouteReportsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListTransitGatewayRouteReportsOpsOptions model with no property values
				listTransitGatewayRouteReportsOpsOptionsModelNew := new(transitgatewayapisv1.ListTransitGatewayRouteReportsOpsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.ListTransitGatewayRouteReportsOps(listTransitGatewayRouteReportsOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListTransitGatewayRouteReportsOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewayRouteReportsOpsOptions model
				listTransitGatewayRouteReportsOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewayRouteReportsOpsOptions)
				listTransitGatewayRouteReportsOpsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewayRouteReportsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayRouteReportsOps(listTransitGatewayRouteReportsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListTransitGatewayRouteReports(listTransitGatewayRouteReportsOptions *ListTransitGatewayRouteReportsOptions) - Operation response error`, func() {
		version := "testString"
		listTransitGatewayRouteReportsPath := "/transit_gateways/testString/route_reports"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewayRouteReportsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListTransitGatewayRouteReports with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewayRouteReportsOptions model
				listTransitGatewayRouteReportsOptionsModel := new(transitgatewayapisv1.ListTransitGatewayRouteReportsOptions)
				listTransitGatewayRouteReportsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewayRouteReportsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayRouteReports(listTransitGatewayRouteReportsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.ListTransitGatewayRouteReports(listTransitGatewayRouteReportsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListTransitGatewayRouteReports(listTransitGatewayRouteReportsOptions *ListTransitGatewayRouteReportsOptions)`, func() {
		version := "testString"
		listTransitGatewayRouteReportsPath := "/transit_gateways/testString/route_reports"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewayRouteReportsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"route_reports": [{"connections": [{"bgps": [{"as_path": "(65201 4201065544) 4203065544", "is_used": true, "local_preference": "190", "prefix": "172.17.0.0/16"}], "id": "3c265a62-91da-4261-a950-950b6af0eb58", "name": "transit-connection-vpc1", "routes": [{"prefix": "192.168.0.0/16"}], "type": "vpc"}], "created_at": "2019-01-01T12:00:00.000Z", "id": "1a15dcab-7e26-45e1-b7c5-bc690eaa9724", "overlapping_routes": [{"routes": [{"connection_id": "d2d985d8-1d8e-4e8b-96cd-cee2290ecaff", "prefix": "Prefix"}]}], "status": "complete", "updated_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListTransitGatewayRouteReports successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the ListTransitGatewayRouteReportsOptions model
				listTransitGatewayRouteReportsOptionsModel := new(transitgatewayapisv1.ListTransitGatewayRouteReportsOptions)
				listTransitGatewayRouteReportsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewayRouteReportsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.ListTransitGatewayRouteReportsWithContext(ctx, listTransitGatewayRouteReportsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayRouteReports(listTransitGatewayRouteReportsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.ListTransitGatewayRouteReportsWithContext(ctx, listTransitGatewayRouteReportsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewayRouteReportsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"route_reports": [{"connections": [{"bgps": [{"as_path": "(65201 4201065544) 4203065544", "is_used": true, "local_preference": "190", "prefix": "172.17.0.0/16"}], "id": "3c265a62-91da-4261-a950-950b6af0eb58", "name": "transit-connection-vpc1", "routes": [{"prefix": "192.168.0.0/16"}], "type": "vpc"}], "created_at": "2019-01-01T12:00:00.000Z", "id": "1a15dcab-7e26-45e1-b7c5-bc690eaa9724", "overlapping_routes": [{"routes": [{"connection_id": "d2d985d8-1d8e-4e8b-96cd-cee2290ecaff", "prefix": "Prefix"}]}], "status": "complete", "updated_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListTransitGatewayRouteReports successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayRouteReports(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListTransitGatewayRouteReportsOptions model
				listTransitGatewayRouteReportsOptionsModel := new(transitgatewayapisv1.ListTransitGatewayRouteReportsOptions)
				listTransitGatewayRouteReportsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewayRouteReportsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.ListTransitGatewayRouteReports(listTransitGatewayRouteReportsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListTransitGatewayRouteReports with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewayRouteReportsOptions model
				listTransitGatewayRouteReportsOptionsModel := new(transitgatewayapisv1.ListTransitGatewayRouteReportsOptions)
				listTransitGatewayRouteReportsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewayRouteReportsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayRouteReports(listTransitGatewayRouteReportsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListTransitGatewayRouteReportsOptions model with no property values
				listTransitGatewayRouteReportsOptionsModelNew := new(transitgatewayapisv1.ListTransitGatewayRouteReportsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.ListTransitGatewayRouteReports(listTransitGatewayRouteReportsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListTransitGatewayRouteReports successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewayRouteReportsOptions model
				listTransitGatewayRouteReportsOptionsModel := new(transitgatewayapisv1.ListTransitGatewayRouteReportsOptions)
				listTransitGatewayRouteReportsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewayRouteReportsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayRouteReports(listTransitGatewayRouteReportsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateTransitGatewayRouteReport(createTransitGatewayRouteReportOptions *CreateTransitGatewayRouteReportOptions) - Operation response error`, func() {
		version := "testString"
		createTransitGatewayRouteReportPath := "/transit_gateways/testString/route_reports"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createTransitGatewayRouteReportPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateTransitGatewayRouteReport with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateTransitGatewayRouteReportOptions model
				createTransitGatewayRouteReportOptionsModel := new(transitgatewayapisv1.CreateTransitGatewayRouteReportOptions)
				createTransitGatewayRouteReportOptionsModel.TransitGatewayID = core.StringPtr("testString")
				createTransitGatewayRouteReportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.CreateTransitGatewayRouteReport(createTransitGatewayRouteReportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.CreateTransitGatewayRouteReport(createTransitGatewayRouteReportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateTransitGatewayRouteReport(createTransitGatewayRouteReportOptions *CreateTransitGatewayRouteReportOptions)`, func() {
		version := "testString"
		createTransitGatewayRouteReportPath := "/transit_gateways/testString/route_reports"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createTransitGatewayRouteReportPath))
					Expect(req.Method).To(Equal("POST"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"connections": [{"bgps": [{"as_path": "(65201 4201065544) 4203065544", "is_used": true, "local_preference": "190", "prefix": "172.17.0.0/16"}], "id": "3c265a62-91da-4261-a950-950b6af0eb58", "name": "transit-connection-vpc1", "routes": [{"prefix": "192.168.0.0/16"}], "type": "vpc"}], "created_at": "2019-01-01T12:00:00.000Z", "id": "1a15dcab-7e26-45e1-b7c5-bc690eaa9724", "overlapping_routes": [{"routes": [{"connection_id": "d2d985d8-1d8e-4e8b-96cd-cee2290ecaff", "prefix": "Prefix"}]}], "status": "complete", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke CreateTransitGatewayRouteReport successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the CreateTransitGatewayRouteReportOptions model
				createTransitGatewayRouteReportOptionsModel := new(transitgatewayapisv1.CreateTransitGatewayRouteReportOptions)
				createTransitGatewayRouteReportOptionsModel.TransitGatewayID = core.StringPtr("testString")
				createTransitGatewayRouteReportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.CreateTransitGatewayRouteReportWithContext(ctx, createTransitGatewayRouteReportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.CreateTransitGatewayRouteReport(createTransitGatewayRouteReportOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.CreateTransitGatewayRouteReportWithContext(ctx, createTransitGatewayRouteReportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createTransitGatewayRouteReportPath))
					Expect(req.Method).To(Equal("POST"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"connections": [{"bgps": [{"as_path": "(65201 4201065544) 4203065544", "is_used": true, "local_preference": "190", "prefix": "172.17.0.0/16"}], "id": "3c265a62-91da-4261-a950-950b6af0eb58", "name": "transit-connection-vpc1", "routes": [{"prefix": "192.168.0.0/16"}], "type": "vpc"}], "created_at": "2019-01-01T12:00:00.000Z", "id": "1a15dcab-7e26-45e1-b7c5-bc690eaa9724", "overlapping_routes": [{"routes": [{"connection_id": "d2d985d8-1d8e-4e8b-96cd-cee2290ecaff", "prefix": "Prefix"}]}], "status": "complete", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke CreateTransitGatewayRouteReport successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.CreateTransitGatewayRouteReport(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateTransitGatewayRouteReportOptions model
				createTransitGatewayRouteReportOptionsModel := new(transitgatewayapisv1.CreateTransitGatewayRouteReportOptions)
				createTransitGatewayRouteReportOptionsModel.TransitGatewayID = core.StringPtr("testString")
				createTransitGatewayRouteReportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.CreateTransitGatewayRouteReport(createTransitGatewayRouteReportOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateTransitGatewayRouteReport with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateTransitGatewayRouteReportOptions model
				createTransitGatewayRouteReportOptionsModel := new(transitgatewayapisv1.CreateTransitGatewayRouteReportOptions)
				createTransitGatewayRouteReportOptionsModel.TransitGatewayID = core.StringPtr("testString")
				createTransitGatewayRouteReportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.CreateTransitGatewayRouteReport(createTransitGatewayRouteReportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateTransitGatewayRouteReportOptions model with no property values
				createTransitGatewayRouteReportOptionsModelNew := new(transitgatewayapisv1.CreateTransitGatewayRouteReportOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.CreateTransitGatewayRouteReport(createTransitGatewayRouteReportOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke CreateTransitGatewayRouteReport successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateTransitGatewayRouteReportOptions model
				createTransitGatewayRouteReportOptionsModel := new(transitgatewayapisv1.CreateTransitGatewayRouteReportOptions)
				createTransitGatewayRouteReportOptionsModel.TransitGatewayID = core.StringPtr("testString")
				createTransitGatewayRouteReportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.CreateTransitGatewayRouteReport(createTransitGatewayRouteReportOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteTransitGatewayRouteReport(deleteTransitGatewayRouteReportOptions *DeleteTransitGatewayRouteReportOptions)`, func() {
		version := "testString"
		deleteTransitGatewayRouteReportPath := "/transit_gateways/testString/route_reports/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteTransitGatewayRouteReportPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteTransitGatewayRouteReport successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := transitGatewayApisService.DeleteTransitGatewayRouteReport(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteTransitGatewayRouteReportOptions model
				deleteTransitGatewayRouteReportOptionsModel := new(transitgatewayapisv1.DeleteTransitGatewayRouteReportOptions)
				deleteTransitGatewayRouteReportOptionsModel.TransitGatewayID = core.StringPtr("testString")
				deleteTransitGatewayRouteReportOptionsModel.ID = core.StringPtr("testString")
				deleteTransitGatewayRouteReportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = transitGatewayApisService.DeleteTransitGatewayRouteReport(deleteTransitGatewayRouteReportOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteTransitGatewayRouteReport with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the DeleteTransitGatewayRouteReportOptions model
				deleteTransitGatewayRouteReportOptionsModel := new(transitgatewayapisv1.DeleteTransitGatewayRouteReportOptions)
				deleteTransitGatewayRouteReportOptionsModel.TransitGatewayID = core.StringPtr("testString")
				deleteTransitGatewayRouteReportOptionsModel.ID = core.StringPtr("testString")
				deleteTransitGatewayRouteReportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := transitGatewayApisService.DeleteTransitGatewayRouteReport(deleteTransitGatewayRouteReportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteTransitGatewayRouteReportOptions model with no property values
				deleteTransitGatewayRouteReportOptionsModelNew := new(transitgatewayapisv1.DeleteTransitGatewayRouteReportOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = transitGatewayApisService.DeleteTransitGatewayRouteReport(deleteTransitGatewayRouteReportOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetTransitGatewayRouteReport(getTransitGatewayRouteReportOptions *GetTransitGatewayRouteReportOptions) - Operation response error`, func() {
		version := "testString"
		getTransitGatewayRouteReportPath := "/transit_gateways/testString/route_reports/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTransitGatewayRouteReportPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetTransitGatewayRouteReport with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetTransitGatewayRouteReportOptions model
				getTransitGatewayRouteReportOptionsModel := new(transitgatewayapisv1.GetTransitGatewayRouteReportOptions)
				getTransitGatewayRouteReportOptionsModel.TransitGatewayID = core.StringPtr("testString")
				getTransitGatewayRouteReportOptionsModel.ID = core.StringPtr("testString")
				getTransitGatewayRouteReportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.GetTransitGatewayRouteReport(getTransitGatewayRouteReportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.GetTransitGatewayRouteReport(getTransitGatewayRouteReportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetTransitGatewayRouteReport(getTransitGatewayRouteReportOptions *GetTransitGatewayRouteReportOptions)`, func() {
		version := "testString"
		getTransitGatewayRouteReportPath := "/transit_gateways/testString/route_reports/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTransitGatewayRouteReportPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"connections": [{"bgps": [{"as_path": "(65201 4201065544) 4203065544", "is_used": true, "local_preference": "190", "prefix": "172.17.0.0/16"}], "id": "3c265a62-91da-4261-a950-950b6af0eb58", "name": "transit-connection-vpc1", "routes": [{"prefix": "192.168.0.0/16"}], "type": "vpc"}], "created_at": "2019-01-01T12:00:00.000Z", "id": "1a15dcab-7e26-45e1-b7c5-bc690eaa9724", "overlapping_routes": [{"routes": [{"connection_id": "d2d985d8-1d8e-4e8b-96cd-cee2290ecaff", "prefix": "Prefix"}]}], "status": "complete", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke GetTransitGatewayRouteReport successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the GetTransitGatewayRouteReportOptions model
				getTransitGatewayRouteReportOptionsModel := new(transitgatewayapisv1.GetTransitGatewayRouteReportOptions)
				getTransitGatewayRouteReportOptionsModel.TransitGatewayID = core.StringPtr("testString")
				getTransitGatewayRouteReportOptionsModel.ID = core.StringPtr("testString")
				getTransitGatewayRouteReportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.GetTransitGatewayRouteReportWithContext(ctx, getTransitGatewayRouteReportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.GetTransitGatewayRouteReport(getTransitGatewayRouteReportOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.GetTransitGatewayRouteReportWithContext(ctx, getTransitGatewayRouteReportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTransitGatewayRouteReportPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"connections": [{"bgps": [{"as_path": "(65201 4201065544) 4203065544", "is_used": true, "local_preference": "190", "prefix": "172.17.0.0/16"}], "id": "3c265a62-91da-4261-a950-950b6af0eb58", "name": "transit-connection-vpc1", "routes": [{"prefix": "192.168.0.0/16"}], "type": "vpc"}], "created_at": "2019-01-01T12:00:00.000Z", "id": "1a15dcab-7e26-45e1-b7c5-bc690eaa9724", "overlapping_routes": [{"routes": [{"connection_id": "d2d985d8-1d8e-4e8b-96cd-cee2290ecaff", "prefix": "Prefix"}]}], "status": "complete", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke GetTransitGatewayRouteReport successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.GetTransitGatewayRouteReport(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetTransitGatewayRouteReportOptions model
				getTransitGatewayRouteReportOptionsModel := new(transitgatewayapisv1.GetTransitGatewayRouteReportOptions)
				getTransitGatewayRouteReportOptionsModel.TransitGatewayID = core.StringPtr("testString")
				getTransitGatewayRouteReportOptionsModel.ID = core.StringPtr("testString")
				getTransitGatewayRouteReportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.GetTransitGatewayRouteReport(getTransitGatewayRouteReportOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetTransitGatewayRouteReport with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetTransitGatewayRouteReportOptions model
				getTransitGatewayRouteReportOptionsModel := new(transitgatewayapisv1.GetTransitGatewayRouteReportOptions)
				getTransitGatewayRouteReportOptionsModel.TransitGatewayID = core.StringPtr("testString")
				getTransitGatewayRouteReportOptionsModel.ID = core.StringPtr("testString")
				getTransitGatewayRouteReportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.GetTransitGatewayRouteReport(getTransitGatewayRouteReportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetTransitGatewayRouteReportOptions model with no property values
				getTransitGatewayRouteReportOptionsModelNew := new(transitgatewayapisv1.GetTransitGatewayRouteReportOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.GetTransitGatewayRouteReport(getTransitGatewayRouteReportOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetTransitGatewayRouteReport successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetTransitGatewayRouteReportOptions model
				getTransitGatewayRouteReportOptionsModel := new(transitgatewayapisv1.GetTransitGatewayRouteReportOptions)
				getTransitGatewayRouteReportOptionsModel.TransitGatewayID = core.StringPtr("testString")
				getTransitGatewayRouteReportOptionsModel.ID = core.StringPtr("testString")
				getTransitGatewayRouteReportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.GetTransitGatewayRouteReport(getTransitGatewayRouteReportOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListTransitGatewayConnectionsBaseOps(listTransitGatewayConnectionsBaseOpsOptions *ListTransitGatewayConnectionsBaseOpsOptions) - Operation response error`, func() {
		version := "testString"
		listTransitGatewayConnectionsBaseOpsPath := "/ops/transit_gateway_connections"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewayConnectionsBaseOpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["route_target"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["status"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["template_version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["location"]).To(Equal([]string{"testString"}))
					// TODO: Add check for is_deletable query parameter
					Expect(req.URL.Query()["created_at"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["updated_at"]).To(Equal([]string{"testString"}))
					// TODO: Add check for is_billing query parameter
					Expect(req.URL.Query()["network_account_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["network_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["network_type"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["base_connection_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["data_center"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["underlay_connection_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["leak_route_distinguisher"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListTransitGatewayConnectionsBaseOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewayConnectionsBaseOpsOptions model
				listTransitGatewayConnectionsBaseOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewayConnectionsBaseOpsOptions)
				listTransitGatewayConnectionsBaseOpsOptionsModel.AccountID = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.RouteTarget = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.Status = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.Name = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.TemplateVersion = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.Start = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listTransitGatewayConnectionsBaseOpsOptionsModel.Location = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.IsDeletable = core.BoolPtr(true)
				listTransitGatewayConnectionsBaseOpsOptionsModel.CreatedAt = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.UpdatedAt = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.IsBilling = core.BoolPtr(true)
				listTransitGatewayConnectionsBaseOpsOptionsModel.NetworkAccountID = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.NetworkID = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.NetworkType = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.BaseConnectionID = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.DataCenter = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.UnderlayConnectionID = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.LeakRouteDistinguisher = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayConnectionsBaseOps(listTransitGatewayConnectionsBaseOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.ListTransitGatewayConnectionsBaseOps(listTransitGatewayConnectionsBaseOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListTransitGatewayConnectionsBaseOps(listTransitGatewayConnectionsBaseOpsOptions *ListTransitGatewayConnectionsBaseOpsOptions)`, func() {
		version := "testString"
		listTransitGatewayConnectionsBaseOpsPath := "/ops/transit_gateway_connections"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewayConnectionsBaseOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["route_target"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["status"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["template_version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["location"]).To(Equal([]string{"testString"}))
					// TODO: Add check for is_deletable query parameter
					Expect(req.URL.Query()["created_at"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["updated_at"]).To(Equal([]string{"testString"}))
					// TODO: Add check for is_billing query parameter
					Expect(req.URL.Query()["network_account_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["network_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["network_type"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["base_connection_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["data_center"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["underlay_connection_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["leak_route_distinguisher"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://internal.transit.cloud.ibm.com/v1"}, "limit": 20, "next": {"href": "https://internal.transit.cloud.ibm.com/v1"}, "total_count": 132, "transit_gateway_connections": [{"base_network_type": "classic", "name": "Transit_Service_BWTN_SJ_DL", "network_id": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "network_type": "vpc", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "created_at": "2019-01-01T12:00:00.000Z", "network_account_id": "28e4d90ac7504be694471ee66e70d0d5", "request_status": "pending", "status": "up", "updated_at": "2019-01-01T12:00:00.000Z", "base_connection_id": "975f58c1-afe7-469a-9727-7f3d720f2d32", "crn": "crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "data_center": "dal10", "database_id": 234, "gateway_database_id": 987, "gateway_id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "gre_endpoint_prefix": "10.10.0.0/16", "is_billing": true, "is_deletable": false, "leak_route_distinguisher": "47902:3255120092", "local_bgp_asn": 64490, "local_gateway_ip": "192.168.100.1", "local_tunnel_ip": "192.168.129.2", "mtu": 9000, "prefix_filters": [{"action": "permit", "before": "1a15dcab-7e40-45e1-b7c5-bc690eaa9782", "created_at": "2019-01-01T12:00:00.000Z", "ge": 0, "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "le": 32, "prefix": "192.168.100.0/24", "updated_at": "2019-01-01T12:00:00.000Z"}], "prefix_filters_default": "permit", "remote_bgp_asn": 65010, "remote_gateway_ip": "10.242.63.12", "remote_tunnel_ip": "192.168.129.1", "resource_group": {"id": "56969d6043e9465c883cb9f7363e78e8", "href": "https://resource-manager.bluemix.net/v1/resource_groups/56969d6043e9465c883cb9f7363e78e8"}, "route_distinguisher": "47902:3255120092", "route_target": "47902:3255120092", "template_version": "v1", "transit_network_account_id": "28e4d90ac7504be694471ee66e70d0d5", "underlay_connection_id": "0c492442-6f36-4a9b-9712-77379c0ca1e1"}]}`)
				}))
			})
			It(`Invoke ListTransitGatewayConnectionsBaseOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the ListTransitGatewayConnectionsBaseOpsOptions model
				listTransitGatewayConnectionsBaseOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewayConnectionsBaseOpsOptions)
				listTransitGatewayConnectionsBaseOpsOptionsModel.AccountID = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.RouteTarget = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.Status = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.Name = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.TemplateVersion = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.Start = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listTransitGatewayConnectionsBaseOpsOptionsModel.Location = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.IsDeletable = core.BoolPtr(true)
				listTransitGatewayConnectionsBaseOpsOptionsModel.CreatedAt = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.UpdatedAt = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.IsBilling = core.BoolPtr(true)
				listTransitGatewayConnectionsBaseOpsOptionsModel.NetworkAccountID = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.NetworkID = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.NetworkType = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.BaseConnectionID = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.DataCenter = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.UnderlayConnectionID = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.LeakRouteDistinguisher = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.ListTransitGatewayConnectionsBaseOpsWithContext(ctx, listTransitGatewayConnectionsBaseOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayConnectionsBaseOps(listTransitGatewayConnectionsBaseOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.ListTransitGatewayConnectionsBaseOpsWithContext(ctx, listTransitGatewayConnectionsBaseOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewayConnectionsBaseOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["route_target"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["status"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["template_version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["location"]).To(Equal([]string{"testString"}))
					// TODO: Add check for is_deletable query parameter
					Expect(req.URL.Query()["created_at"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["updated_at"]).To(Equal([]string{"testString"}))
					// TODO: Add check for is_billing query parameter
					Expect(req.URL.Query()["network_account_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["network_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["network_type"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["base_connection_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["data_center"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["underlay_connection_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["leak_route_distinguisher"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://internal.transit.cloud.ibm.com/v1"}, "limit": 20, "next": {"href": "https://internal.transit.cloud.ibm.com/v1"}, "total_count": 132, "transit_gateway_connections": [{"base_network_type": "classic", "name": "Transit_Service_BWTN_SJ_DL", "network_id": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "network_type": "vpc", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "created_at": "2019-01-01T12:00:00.000Z", "network_account_id": "28e4d90ac7504be694471ee66e70d0d5", "request_status": "pending", "status": "up", "updated_at": "2019-01-01T12:00:00.000Z", "base_connection_id": "975f58c1-afe7-469a-9727-7f3d720f2d32", "crn": "crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "data_center": "dal10", "database_id": 234, "gateway_database_id": 987, "gateway_id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "gre_endpoint_prefix": "10.10.0.0/16", "is_billing": true, "is_deletable": false, "leak_route_distinguisher": "47902:3255120092", "local_bgp_asn": 64490, "local_gateway_ip": "192.168.100.1", "local_tunnel_ip": "192.168.129.2", "mtu": 9000, "prefix_filters": [{"action": "permit", "before": "1a15dcab-7e40-45e1-b7c5-bc690eaa9782", "created_at": "2019-01-01T12:00:00.000Z", "ge": 0, "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "le": 32, "prefix": "192.168.100.0/24", "updated_at": "2019-01-01T12:00:00.000Z"}], "prefix_filters_default": "permit", "remote_bgp_asn": 65010, "remote_gateway_ip": "10.242.63.12", "remote_tunnel_ip": "192.168.129.1", "resource_group": {"id": "56969d6043e9465c883cb9f7363e78e8", "href": "https://resource-manager.bluemix.net/v1/resource_groups/56969d6043e9465c883cb9f7363e78e8"}, "route_distinguisher": "47902:3255120092", "route_target": "47902:3255120092", "template_version": "v1", "transit_network_account_id": "28e4d90ac7504be694471ee66e70d0d5", "underlay_connection_id": "0c492442-6f36-4a9b-9712-77379c0ca1e1"}]}`)
				}))
			})
			It(`Invoke ListTransitGatewayConnectionsBaseOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayConnectionsBaseOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListTransitGatewayConnectionsBaseOpsOptions model
				listTransitGatewayConnectionsBaseOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewayConnectionsBaseOpsOptions)
				listTransitGatewayConnectionsBaseOpsOptionsModel.AccountID = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.RouteTarget = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.Status = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.Name = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.TemplateVersion = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.Start = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listTransitGatewayConnectionsBaseOpsOptionsModel.Location = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.IsDeletable = core.BoolPtr(true)
				listTransitGatewayConnectionsBaseOpsOptionsModel.CreatedAt = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.UpdatedAt = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.IsBilling = core.BoolPtr(true)
				listTransitGatewayConnectionsBaseOpsOptionsModel.NetworkAccountID = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.NetworkID = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.NetworkType = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.BaseConnectionID = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.DataCenter = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.UnderlayConnectionID = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.LeakRouteDistinguisher = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.ListTransitGatewayConnectionsBaseOps(listTransitGatewayConnectionsBaseOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListTransitGatewayConnectionsBaseOps with error: Operation request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewayConnectionsBaseOpsOptions model
				listTransitGatewayConnectionsBaseOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewayConnectionsBaseOpsOptions)
				listTransitGatewayConnectionsBaseOpsOptionsModel.AccountID = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.RouteTarget = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.Status = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.Name = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.TemplateVersion = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.Start = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listTransitGatewayConnectionsBaseOpsOptionsModel.Location = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.IsDeletable = core.BoolPtr(true)
				listTransitGatewayConnectionsBaseOpsOptionsModel.CreatedAt = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.UpdatedAt = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.IsBilling = core.BoolPtr(true)
				listTransitGatewayConnectionsBaseOpsOptionsModel.NetworkAccountID = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.NetworkID = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.NetworkType = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.BaseConnectionID = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.DataCenter = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.UnderlayConnectionID = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.LeakRouteDistinguisher = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayConnectionsBaseOps(listTransitGatewayConnectionsBaseOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListTransitGatewayConnectionsBaseOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewayConnectionsBaseOpsOptions model
				listTransitGatewayConnectionsBaseOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewayConnectionsBaseOpsOptions)
				listTransitGatewayConnectionsBaseOpsOptionsModel.AccountID = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.RouteTarget = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.Status = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.Name = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.TemplateVersion = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.Start = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listTransitGatewayConnectionsBaseOpsOptionsModel.Location = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.IsDeletable = core.BoolPtr(true)
				listTransitGatewayConnectionsBaseOpsOptionsModel.CreatedAt = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.UpdatedAt = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.IsBilling = core.BoolPtr(true)
				listTransitGatewayConnectionsBaseOpsOptionsModel.NetworkAccountID = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.NetworkID = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.NetworkType = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.BaseConnectionID = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.DataCenter = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.UnderlayConnectionID = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.LeakRouteDistinguisher = core.StringPtr("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayConnectionsBaseOps(listTransitGatewayConnectionsBaseOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Test pagination helper method on response`, func() {
			It(`Invoke GetNextStart successfully`, func() {
				responseObject := new(transitgatewayapisv1.TransitGatewayConnectionsOpsCollection)
				nextObject := new(transitgatewayapisv1.NextOps)
				nextObject.Href = core.StringPtr("ibm.com?start=abc-123")
				responseObject.Next = nextObject
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(Equal(core.StringPtr("abc-123")))
			})
			It(`Invoke GetNextStart without a "Next" property in the response`, func() {
				responseObject := new(transitgatewayapisv1.TransitGatewayConnectionsOpsCollection)
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(BeNil())
			})
			It(`Invoke GetNextStart without any query params in the "Next" URL`, func() {
				responseObject := new(transitgatewayapisv1.TransitGatewayConnectionsOpsCollection)
				nextObject := new(transitgatewayapisv1.NextOps)
				nextObject.Href = core.StringPtr("ibm.com")
				responseObject.Next = nextObject
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(BeNil())
			})
		})
		Context(`Using mock server endpoint - paginated response`, func() {
			BeforeEach(func() {
				var requestNumber int = 0
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewayConnectionsBaseOpsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					requestNumber++
					if requestNumber == 1 {
						fmt.Fprintf(res, "%s", `{"next":{"href":"https://myhost.com/somePath?start=1"},"total_count":2,"limit":1,"transit_gateway_connections":[{"base_network_type":"classic","name":"Transit_Service_BWTN_SJ_DL","network_id":"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b","network_type":"vpc","id":"1a15dca5-7e33-45e1-b7c5-bc690e569531","created_at":"2019-01-01T12:00:00.000Z","network_account_id":"28e4d90ac7504be694471ee66e70d0d5","request_status":"pending","status":"up","updated_at":"2019-01-01T12:00:00.000Z","base_connection_id":"975f58c1-afe7-469a-9727-7f3d720f2d32","crn":"crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4","data_center":"dal10","database_id":234,"gateway_database_id":987,"gateway_id":"1a15dca5-7e33-45e1-b7c5-bc690e569531","gre_endpoint_prefix":"10.10.0.0/16","is_billing":true,"is_deletable":false,"leak_route_distinguisher":"47902:3255120092","local_bgp_asn":64490,"local_gateway_ip":"192.168.100.1","local_tunnel_ip":"192.168.129.2","mtu":9000,"prefix_filters":[{"action":"permit","before":"1a15dcab-7e40-45e1-b7c5-bc690eaa9782","created_at":"2019-01-01T12:00:00.000Z","ge":0,"id":"1a15dcab-7e30-45e1-b7c5-bc690eaa9865","le":32,"prefix":"192.168.100.0/24","updated_at":"2019-01-01T12:00:00.000Z"}],"prefix_filters_default":"permit","remote_bgp_asn":65010,"remote_gateway_ip":"10.242.63.12","remote_tunnel_ip":"192.168.129.1","resource_group":{"id":"56969d6043e9465c883cb9f7363e78e8","href":"https://resource-manager.bluemix.net/v1/resource_groups/56969d6043e9465c883cb9f7363e78e8"},"route_distinguisher":"47902:3255120092","route_target":"47902:3255120092","template_version":"v1","transit_network_account_id":"28e4d90ac7504be694471ee66e70d0d5","underlay_connection_id":"0c492442-6f36-4a9b-9712-77379c0ca1e1"}]}`)
					} else if requestNumber == 2 {
						fmt.Fprintf(res, "%s", `{"total_count":2,"limit":1,"transit_gateway_connections":[{"base_network_type":"classic","name":"Transit_Service_BWTN_SJ_DL","network_id":"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b","network_type":"vpc","id":"1a15dca5-7e33-45e1-b7c5-bc690e569531","created_at":"2019-01-01T12:00:00.000Z","network_account_id":"28e4d90ac7504be694471ee66e70d0d5","request_status":"pending","status":"up","updated_at":"2019-01-01T12:00:00.000Z","base_connection_id":"975f58c1-afe7-469a-9727-7f3d720f2d32","crn":"crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4","data_center":"dal10","database_id":234,"gateway_database_id":987,"gateway_id":"1a15dca5-7e33-45e1-b7c5-bc690e569531","gre_endpoint_prefix":"10.10.0.0/16","is_billing":true,"is_deletable":false,"leak_route_distinguisher":"47902:3255120092","local_bgp_asn":64490,"local_gateway_ip":"192.168.100.1","local_tunnel_ip":"192.168.129.2","mtu":9000,"prefix_filters":[{"action":"permit","before":"1a15dcab-7e40-45e1-b7c5-bc690eaa9782","created_at":"2019-01-01T12:00:00.000Z","ge":0,"id":"1a15dcab-7e30-45e1-b7c5-bc690eaa9865","le":32,"prefix":"192.168.100.0/24","updated_at":"2019-01-01T12:00:00.000Z"}],"prefix_filters_default":"permit","remote_bgp_asn":65010,"remote_gateway_ip":"10.242.63.12","remote_tunnel_ip":"192.168.129.1","resource_group":{"id":"56969d6043e9465c883cb9f7363e78e8","href":"https://resource-manager.bluemix.net/v1/resource_groups/56969d6043e9465c883cb9f7363e78e8"},"route_distinguisher":"47902:3255120092","route_target":"47902:3255120092","template_version":"v1","transit_network_account_id":"28e4d90ac7504be694471ee66e70d0d5","underlay_connection_id":"0c492442-6f36-4a9b-9712-77379c0ca1e1"}]}`)
					} else {
						res.WriteHeader(400)
					}
				}))
			})
			It(`Use TransitGatewayConnectionsBaseOpsPager.GetNext successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				listTransitGatewayConnectionsBaseOpsOptionsModel := &transitgatewayapisv1.ListTransitGatewayConnectionsBaseOpsOptions{
					AccountID: core.StringPtr("testString"),
					RouteTarget: core.StringPtr("testString"),
					Status: core.StringPtr("testString"),
					Name: core.StringPtr("testString"),
					TemplateVersion: core.StringPtr("testString"),
					Limit: core.Int64Ptr(int64(10)),
					Location: core.StringPtr("testString"),
					IsDeletable: core.BoolPtr(true),
					CreatedAt: core.StringPtr("testString"),
					UpdatedAt: core.StringPtr("testString"),
					IsBilling: core.BoolPtr(true),
					NetworkAccountID: core.StringPtr("testString"),
					NetworkID: core.StringPtr("testString"),
					NetworkType: core.StringPtr("testString"),
					BaseConnectionID: core.StringPtr("testString"),
					DataCenter: core.StringPtr("testString"),
					UnderlayConnectionID: core.StringPtr("testString"),
					LeakRouteDistinguisher: core.StringPtr("testString"),
				}

				pager, err := transitGatewayApisService.NewTransitGatewayConnectionsBaseOpsPager(listTransitGatewayConnectionsBaseOpsOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				var allResults []transitgatewayapisv1.TransitGatewayConnectionOps
				for pager.HasNext() {
					nextPage, err := pager.GetNext()
					Expect(err).To(BeNil())
					Expect(nextPage).ToNot(BeNil())
					allResults = append(allResults, nextPage...)
				}
				Expect(len(allResults)).To(Equal(2))
			})
			It(`Use TransitGatewayConnectionsBaseOpsPager.GetAll successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				listTransitGatewayConnectionsBaseOpsOptionsModel := &transitgatewayapisv1.ListTransitGatewayConnectionsBaseOpsOptions{
					AccountID: core.StringPtr("testString"),
					RouteTarget: core.StringPtr("testString"),
					Status: core.StringPtr("testString"),
					Name: core.StringPtr("testString"),
					TemplateVersion: core.StringPtr("testString"),
					Limit: core.Int64Ptr(int64(10)),
					Location: core.StringPtr("testString"),
					IsDeletable: core.BoolPtr(true),
					CreatedAt: core.StringPtr("testString"),
					UpdatedAt: core.StringPtr("testString"),
					IsBilling: core.BoolPtr(true),
					NetworkAccountID: core.StringPtr("testString"),
					NetworkID: core.StringPtr("testString"),
					NetworkType: core.StringPtr("testString"),
					BaseConnectionID: core.StringPtr("testString"),
					DataCenter: core.StringPtr("testString"),
					UnderlayConnectionID: core.StringPtr("testString"),
					LeakRouteDistinguisher: core.StringPtr("testString"),
				}

				pager, err := transitGatewayApisService.NewTransitGatewayConnectionsBaseOpsPager(listTransitGatewayConnectionsBaseOpsOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				allResults, err := pager.GetAll()
				Expect(err).To(BeNil())
				Expect(allResults).ToNot(BeNil())
				Expect(len(allResults)).To(Equal(2))
			})
		})
	})
	Describe(`GetTransitGatewayConnectionsOps(getTransitGatewayConnectionsOpsOptions *GetTransitGatewayConnectionsOpsOptions) - Operation response error`, func() {
		version := "testString"
		getTransitGatewayConnectionsOpsPath := "/ops/transit_gateway_connections/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTransitGatewayConnectionsOpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetTransitGatewayConnectionsOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetTransitGatewayConnectionsOpsOptions model
				getTransitGatewayConnectionsOpsOptionsModel := new(transitgatewayapisv1.GetTransitGatewayConnectionsOpsOptions)
				getTransitGatewayConnectionsOpsOptionsModel.ID = core.StringPtr("testString")
				getTransitGatewayConnectionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.GetTransitGatewayConnectionsOps(getTransitGatewayConnectionsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.GetTransitGatewayConnectionsOps(getTransitGatewayConnectionsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetTransitGatewayConnectionsOps(getTransitGatewayConnectionsOpsOptions *GetTransitGatewayConnectionsOpsOptions)`, func() {
		version := "testString"
		getTransitGatewayConnectionsOpsPath := "/ops/transit_gateway_connections/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTransitGatewayConnectionsOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"base_network_type": "classic", "name": "Transit_Service_BWTN_SJ_DL", "network_id": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "network_type": "vpc", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "created_at": "2019-01-01T12:00:00.000Z", "network_account_id": "28e4d90ac7504be694471ee66e70d0d5", "request_status": "pending", "status": "up", "updated_at": "2019-01-01T12:00:00.000Z", "base_connection_id": "975f58c1-afe7-469a-9727-7f3d720f2d32", "crn": "crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "data_center": "dal10", "database_id": 234, "gateway_database_id": 987, "gateway_id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "gre_endpoint_prefix": "10.10.0.0/16", "is_billing": true, "is_deletable": false, "leak_route_distinguisher": "47902:3255120092", "local_bgp_asn": 64490, "local_gateway_ip": "192.168.100.1", "local_tunnel_ip": "192.168.129.2", "mtu": 9000, "prefix_filters": [{"action": "permit", "before": "1a15dcab-7e40-45e1-b7c5-bc690eaa9782", "created_at": "2019-01-01T12:00:00.000Z", "ge": 0, "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "le": 32, "prefix": "192.168.100.0/24", "updated_at": "2019-01-01T12:00:00.000Z"}], "prefix_filters_default": "permit", "remote_bgp_asn": 65010, "remote_gateway_ip": "10.242.63.12", "remote_tunnel_ip": "192.168.129.1", "resource_group": {"id": "56969d6043e9465c883cb9f7363e78e8", "href": "https://resource-manager.bluemix.net/v1/resource_groups/56969d6043e9465c883cb9f7363e78e8"}, "route_distinguisher": "47902:3255120092", "route_target": "47902:3255120092", "template_version": "v1", "transit_network_account_id": "28e4d90ac7504be694471ee66e70d0d5", "underlay_connection_id": "0c492442-6f36-4a9b-9712-77379c0ca1e1"}`)
				}))
			})
			It(`Invoke GetTransitGatewayConnectionsOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the GetTransitGatewayConnectionsOpsOptions model
				getTransitGatewayConnectionsOpsOptionsModel := new(transitgatewayapisv1.GetTransitGatewayConnectionsOpsOptions)
				getTransitGatewayConnectionsOpsOptionsModel.ID = core.StringPtr("testString")
				getTransitGatewayConnectionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.GetTransitGatewayConnectionsOpsWithContext(ctx, getTransitGatewayConnectionsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.GetTransitGatewayConnectionsOps(getTransitGatewayConnectionsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.GetTransitGatewayConnectionsOpsWithContext(ctx, getTransitGatewayConnectionsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTransitGatewayConnectionsOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"base_network_type": "classic", "name": "Transit_Service_BWTN_SJ_DL", "network_id": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "network_type": "vpc", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "created_at": "2019-01-01T12:00:00.000Z", "network_account_id": "28e4d90ac7504be694471ee66e70d0d5", "request_status": "pending", "status": "up", "updated_at": "2019-01-01T12:00:00.000Z", "base_connection_id": "975f58c1-afe7-469a-9727-7f3d720f2d32", "crn": "crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "data_center": "dal10", "database_id": 234, "gateway_database_id": 987, "gateway_id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "gre_endpoint_prefix": "10.10.0.0/16", "is_billing": true, "is_deletable": false, "leak_route_distinguisher": "47902:3255120092", "local_bgp_asn": 64490, "local_gateway_ip": "192.168.100.1", "local_tunnel_ip": "192.168.129.2", "mtu": 9000, "prefix_filters": [{"action": "permit", "before": "1a15dcab-7e40-45e1-b7c5-bc690eaa9782", "created_at": "2019-01-01T12:00:00.000Z", "ge": 0, "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "le": 32, "prefix": "192.168.100.0/24", "updated_at": "2019-01-01T12:00:00.000Z"}], "prefix_filters_default": "permit", "remote_bgp_asn": 65010, "remote_gateway_ip": "10.242.63.12", "remote_tunnel_ip": "192.168.129.1", "resource_group": {"id": "56969d6043e9465c883cb9f7363e78e8", "href": "https://resource-manager.bluemix.net/v1/resource_groups/56969d6043e9465c883cb9f7363e78e8"}, "route_distinguisher": "47902:3255120092", "route_target": "47902:3255120092", "template_version": "v1", "transit_network_account_id": "28e4d90ac7504be694471ee66e70d0d5", "underlay_connection_id": "0c492442-6f36-4a9b-9712-77379c0ca1e1"}`)
				}))
			})
			It(`Invoke GetTransitGatewayConnectionsOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.GetTransitGatewayConnectionsOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetTransitGatewayConnectionsOpsOptions model
				getTransitGatewayConnectionsOpsOptionsModel := new(transitgatewayapisv1.GetTransitGatewayConnectionsOpsOptions)
				getTransitGatewayConnectionsOpsOptionsModel.ID = core.StringPtr("testString")
				getTransitGatewayConnectionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.GetTransitGatewayConnectionsOps(getTransitGatewayConnectionsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetTransitGatewayConnectionsOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetTransitGatewayConnectionsOpsOptions model
				getTransitGatewayConnectionsOpsOptionsModel := new(transitgatewayapisv1.GetTransitGatewayConnectionsOpsOptions)
				getTransitGatewayConnectionsOpsOptionsModel.ID = core.StringPtr("testString")
				getTransitGatewayConnectionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.GetTransitGatewayConnectionsOps(getTransitGatewayConnectionsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetTransitGatewayConnectionsOpsOptions model with no property values
				getTransitGatewayConnectionsOpsOptionsModelNew := new(transitgatewayapisv1.GetTransitGatewayConnectionsOpsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.GetTransitGatewayConnectionsOps(getTransitGatewayConnectionsOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetTransitGatewayConnectionsOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetTransitGatewayConnectionsOpsOptions model
				getTransitGatewayConnectionsOpsOptionsModel := new(transitgatewayapisv1.GetTransitGatewayConnectionsOpsOptions)
				getTransitGatewayConnectionsOpsOptionsModel.ID = core.StringPtr("testString")
				getTransitGatewayConnectionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.GetTransitGatewayConnectionsOps(getTransitGatewayConnectionsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListTransitGatewaysConnectionsOps(listTransitGatewaysConnectionsOpsOptions *ListTransitGatewaysConnectionsOpsOptions) - Operation response error`, func() {
		version := "testString"
		listTransitGatewaysConnectionsOpsPath := "/ops/transit_gateways/testString/connections"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewaysConnectionsOpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListTransitGatewaysConnectionsOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewaysConnectionsOpsOptions model
				listTransitGatewaysConnectionsOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewaysConnectionsOpsOptions)
				listTransitGatewaysConnectionsOpsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewaysConnectionsOpsOptionsModel.Start = core.StringPtr("testString")
				listTransitGatewaysConnectionsOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listTransitGatewaysConnectionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.ListTransitGatewaysConnectionsOps(listTransitGatewaysConnectionsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.ListTransitGatewaysConnectionsOps(listTransitGatewaysConnectionsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListTransitGatewaysConnectionsOps(listTransitGatewaysConnectionsOpsOptions *ListTransitGatewaysConnectionsOpsOptions)`, func() {
		version := "testString"
		listTransitGatewaysConnectionsOpsPath := "/ops/transit_gateways/testString/connections"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewaysConnectionsOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"connections": [{"base_network_type": "classic", "name": "Transit_Service_BWTN_SJ_DL", "network_id": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "network_type": "vpc", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "created_at": "2019-01-01T12:00:00.000Z", "network_account_id": "28e4d90ac7504be694471ee66e70d0d5", "request_status": "pending", "status": "up", "updated_at": "2019-01-01T12:00:00.000Z", "base_connection_id": "975f58c1-afe7-469a-9727-7f3d720f2d32", "crn": "crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "data_center": "dal10", "database_id": 234, "gateway_database_id": 987, "gateway_id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "gre_endpoint_prefix": "10.10.0.0/16", "is_billing": true, "is_deletable": false, "leak_route_distinguisher": "47902:3255120092", "local_bgp_asn": 64490, "local_gateway_ip": "192.168.100.1", "local_tunnel_ip": "192.168.129.2", "mtu": 9000, "prefix_filters": [{"action": "permit", "before": "1a15dcab-7e40-45e1-b7c5-bc690eaa9782", "created_at": "2019-01-01T12:00:00.000Z", "ge": 0, "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "le": 32, "prefix": "192.168.100.0/24", "updated_at": "2019-01-01T12:00:00.000Z"}], "prefix_filters_default": "permit", "remote_bgp_asn": 65010, "remote_gateway_ip": "10.242.63.12", "remote_tunnel_ip": "192.168.129.1", "resource_group": {"id": "56969d6043e9465c883cb9f7363e78e8", "href": "https://resource-manager.bluemix.net/v1/resource_groups/56969d6043e9465c883cb9f7363e78e8"}, "route_distinguisher": "47902:3255120092", "route_target": "47902:3255120092", "template_version": "v1", "transit_network_account_id": "28e4d90ac7504be694471ee66e70d0d5", "underlay_connection_id": "0c492442-6f36-4a9b-9712-77379c0ca1e1"}], "first": {"href": "https://internal.transit.cloud.ibm.com/v1/ops/transit_gateways/{transit_gateway_id}/connections?limit=50"}, "limit": 50, "next": {"href": "https://internal.transit.cloud.ibm.com/v1/ops/transit_gateways/{transit_gateway_id}/connections?start=MjAyMC0wNS0wOFQxNDoxNzowMy45NzQ5NzNa&limit=50", "start": "MjAyMC0wNS0wOFQxNDoxNzowMy45NzQ5NzNa"}, "total_count": 500}`)
				}))
			})
			It(`Invoke ListTransitGatewaysConnectionsOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the ListTransitGatewaysConnectionsOpsOptions model
				listTransitGatewaysConnectionsOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewaysConnectionsOpsOptions)
				listTransitGatewaysConnectionsOpsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewaysConnectionsOpsOptionsModel.Start = core.StringPtr("testString")
				listTransitGatewaysConnectionsOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listTransitGatewaysConnectionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.ListTransitGatewaysConnectionsOpsWithContext(ctx, listTransitGatewaysConnectionsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.ListTransitGatewaysConnectionsOps(listTransitGatewaysConnectionsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.ListTransitGatewaysConnectionsOpsWithContext(ctx, listTransitGatewaysConnectionsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewaysConnectionsOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"connections": [{"base_network_type": "classic", "name": "Transit_Service_BWTN_SJ_DL", "network_id": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "network_type": "vpc", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "created_at": "2019-01-01T12:00:00.000Z", "network_account_id": "28e4d90ac7504be694471ee66e70d0d5", "request_status": "pending", "status": "up", "updated_at": "2019-01-01T12:00:00.000Z", "base_connection_id": "975f58c1-afe7-469a-9727-7f3d720f2d32", "crn": "crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "data_center": "dal10", "database_id": 234, "gateway_database_id": 987, "gateway_id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "gre_endpoint_prefix": "10.10.0.0/16", "is_billing": true, "is_deletable": false, "leak_route_distinguisher": "47902:3255120092", "local_bgp_asn": 64490, "local_gateway_ip": "192.168.100.1", "local_tunnel_ip": "192.168.129.2", "mtu": 9000, "prefix_filters": [{"action": "permit", "before": "1a15dcab-7e40-45e1-b7c5-bc690eaa9782", "created_at": "2019-01-01T12:00:00.000Z", "ge": 0, "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "le": 32, "prefix": "192.168.100.0/24", "updated_at": "2019-01-01T12:00:00.000Z"}], "prefix_filters_default": "permit", "remote_bgp_asn": 65010, "remote_gateway_ip": "10.242.63.12", "remote_tunnel_ip": "192.168.129.1", "resource_group": {"id": "56969d6043e9465c883cb9f7363e78e8", "href": "https://resource-manager.bluemix.net/v1/resource_groups/56969d6043e9465c883cb9f7363e78e8"}, "route_distinguisher": "47902:3255120092", "route_target": "47902:3255120092", "template_version": "v1", "transit_network_account_id": "28e4d90ac7504be694471ee66e70d0d5", "underlay_connection_id": "0c492442-6f36-4a9b-9712-77379c0ca1e1"}], "first": {"href": "https://internal.transit.cloud.ibm.com/v1/ops/transit_gateways/{transit_gateway_id}/connections?limit=50"}, "limit": 50, "next": {"href": "https://internal.transit.cloud.ibm.com/v1/ops/transit_gateways/{transit_gateway_id}/connections?start=MjAyMC0wNS0wOFQxNDoxNzowMy45NzQ5NzNa&limit=50", "start": "MjAyMC0wNS0wOFQxNDoxNzowMy45NzQ5NzNa"}, "total_count": 500}`)
				}))
			})
			It(`Invoke ListTransitGatewaysConnectionsOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.ListTransitGatewaysConnectionsOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListTransitGatewaysConnectionsOpsOptions model
				listTransitGatewaysConnectionsOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewaysConnectionsOpsOptions)
				listTransitGatewaysConnectionsOpsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewaysConnectionsOpsOptionsModel.Start = core.StringPtr("testString")
				listTransitGatewaysConnectionsOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listTransitGatewaysConnectionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.ListTransitGatewaysConnectionsOps(listTransitGatewaysConnectionsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListTransitGatewaysConnectionsOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewaysConnectionsOpsOptions model
				listTransitGatewaysConnectionsOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewaysConnectionsOpsOptions)
				listTransitGatewaysConnectionsOpsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewaysConnectionsOpsOptionsModel.Start = core.StringPtr("testString")
				listTransitGatewaysConnectionsOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listTransitGatewaysConnectionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.ListTransitGatewaysConnectionsOps(listTransitGatewaysConnectionsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListTransitGatewaysConnectionsOpsOptions model with no property values
				listTransitGatewaysConnectionsOpsOptionsModelNew := new(transitgatewayapisv1.ListTransitGatewaysConnectionsOpsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.ListTransitGatewaysConnectionsOps(listTransitGatewaysConnectionsOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListTransitGatewaysConnectionsOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewaysConnectionsOpsOptions model
				listTransitGatewaysConnectionsOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewaysConnectionsOpsOptions)
				listTransitGatewaysConnectionsOpsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewaysConnectionsOpsOptionsModel.Start = core.StringPtr("testString")
				listTransitGatewaysConnectionsOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listTransitGatewaysConnectionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.ListTransitGatewaysConnectionsOps(listTransitGatewaysConnectionsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Test pagination helper method on response`, func() {
			It(`Invoke GetNextStart successfully`, func() {
				responseObject := new(transitgatewayapisv1.TransitGatewayConnectionOpsCollection)
				nextObject := new(transitgatewayapisv1.PaginationNextTGWConnectionOps)
				nextObject.Start = core.StringPtr("abc-123")
				responseObject.Next = nextObject
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(Equal(core.StringPtr("abc-123")))
			})
			It(`Invoke GetNextStart without a "Next" property in the response`, func() {
				responseObject := new(transitgatewayapisv1.TransitGatewayConnectionOpsCollection)
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(BeNil())
			})
		})
		Context(`Using mock server endpoint - paginated response`, func() {
			BeforeEach(func() {
				var requestNumber int = 0
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewaysConnectionsOpsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					requestNumber++
					if requestNumber == 1 {
						fmt.Fprintf(res, "%s", `{"next":{"start":"1"},"total_count":2,"limit":1,"connections":[{"base_network_type":"classic","name":"Transit_Service_BWTN_SJ_DL","network_id":"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b","network_type":"vpc","id":"1a15dca5-7e33-45e1-b7c5-bc690e569531","created_at":"2019-01-01T12:00:00.000Z","network_account_id":"28e4d90ac7504be694471ee66e70d0d5","request_status":"pending","status":"up","updated_at":"2019-01-01T12:00:00.000Z","base_connection_id":"975f58c1-afe7-469a-9727-7f3d720f2d32","crn":"crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4","data_center":"dal10","database_id":234,"gateway_database_id":987,"gateway_id":"1a15dca5-7e33-45e1-b7c5-bc690e569531","gre_endpoint_prefix":"10.10.0.0/16","is_billing":true,"is_deletable":false,"leak_route_distinguisher":"47902:3255120092","local_bgp_asn":64490,"local_gateway_ip":"192.168.100.1","local_tunnel_ip":"192.168.129.2","mtu":9000,"prefix_filters":[{"action":"permit","before":"1a15dcab-7e40-45e1-b7c5-bc690eaa9782","created_at":"2019-01-01T12:00:00.000Z","ge":0,"id":"1a15dcab-7e30-45e1-b7c5-bc690eaa9865","le":32,"prefix":"192.168.100.0/24","updated_at":"2019-01-01T12:00:00.000Z"}],"prefix_filters_default":"permit","remote_bgp_asn":65010,"remote_gateway_ip":"10.242.63.12","remote_tunnel_ip":"192.168.129.1","resource_group":{"id":"56969d6043e9465c883cb9f7363e78e8","href":"https://resource-manager.bluemix.net/v1/resource_groups/56969d6043e9465c883cb9f7363e78e8"},"route_distinguisher":"47902:3255120092","route_target":"47902:3255120092","template_version":"v1","transit_network_account_id":"28e4d90ac7504be694471ee66e70d0d5","underlay_connection_id":"0c492442-6f36-4a9b-9712-77379c0ca1e1"}]}`)
					} else if requestNumber == 2 {
						fmt.Fprintf(res, "%s", `{"total_count":2,"limit":1,"connections":[{"base_network_type":"classic","name":"Transit_Service_BWTN_SJ_DL","network_id":"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b","network_type":"vpc","id":"1a15dca5-7e33-45e1-b7c5-bc690e569531","created_at":"2019-01-01T12:00:00.000Z","network_account_id":"28e4d90ac7504be694471ee66e70d0d5","request_status":"pending","status":"up","updated_at":"2019-01-01T12:00:00.000Z","base_connection_id":"975f58c1-afe7-469a-9727-7f3d720f2d32","crn":"crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4","data_center":"dal10","database_id":234,"gateway_database_id":987,"gateway_id":"1a15dca5-7e33-45e1-b7c5-bc690e569531","gre_endpoint_prefix":"10.10.0.0/16","is_billing":true,"is_deletable":false,"leak_route_distinguisher":"47902:3255120092","local_bgp_asn":64490,"local_gateway_ip":"192.168.100.1","local_tunnel_ip":"192.168.129.2","mtu":9000,"prefix_filters":[{"action":"permit","before":"1a15dcab-7e40-45e1-b7c5-bc690eaa9782","created_at":"2019-01-01T12:00:00.000Z","ge":0,"id":"1a15dcab-7e30-45e1-b7c5-bc690eaa9865","le":32,"prefix":"192.168.100.0/24","updated_at":"2019-01-01T12:00:00.000Z"}],"prefix_filters_default":"permit","remote_bgp_asn":65010,"remote_gateway_ip":"10.242.63.12","remote_tunnel_ip":"192.168.129.1","resource_group":{"id":"56969d6043e9465c883cb9f7363e78e8","href":"https://resource-manager.bluemix.net/v1/resource_groups/56969d6043e9465c883cb9f7363e78e8"},"route_distinguisher":"47902:3255120092","route_target":"47902:3255120092","template_version":"v1","transit_network_account_id":"28e4d90ac7504be694471ee66e70d0d5","underlay_connection_id":"0c492442-6f36-4a9b-9712-77379c0ca1e1"}]}`)
					} else {
						res.WriteHeader(400)
					}
				}))
			})
			It(`Use TransitGatewaysConnectionsOpsPager.GetNext successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				listTransitGatewaysConnectionsOpsOptionsModel := &transitgatewayapisv1.ListTransitGatewaysConnectionsOpsOptions{
					TransitGatewayID: core.StringPtr("testString"),
					Limit: core.Int64Ptr(int64(10)),
				}

				pager, err := transitGatewayApisService.NewTransitGatewaysConnectionsOpsPager(listTransitGatewaysConnectionsOpsOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				var allResults []transitgatewayapisv1.TransitGatewayConnectionOps
				for pager.HasNext() {
					nextPage, err := pager.GetNext()
					Expect(err).To(BeNil())
					Expect(nextPage).ToNot(BeNil())
					allResults = append(allResults, nextPage...)
				}
				Expect(len(allResults)).To(Equal(2))
			})
			It(`Use TransitGatewaysConnectionsOpsPager.GetAll successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				listTransitGatewaysConnectionsOpsOptionsModel := &transitgatewayapisv1.ListTransitGatewaysConnectionsOpsOptions{
					TransitGatewayID: core.StringPtr("testString"),
					Limit: core.Int64Ptr(int64(10)),
				}

				pager, err := transitGatewayApisService.NewTransitGatewaysConnectionsOpsPager(listTransitGatewaysConnectionsOpsOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				allResults, err := pager.GetAll()
				Expect(err).To(BeNil())
				Expect(allResults).ToNot(BeNil())
				Expect(len(allResults)).To(Equal(2))
			})
		})
	})
	Describe(`DeleteTransitGatewaysConnectionsOps(deleteTransitGatewaysConnectionsOpsOptions *DeleteTransitGatewaysConnectionsOpsOptions)`, func() {
		version := "testString"
		deleteTransitGatewaysConnectionsOpsPath := "/ops/transit_gateways/testString/connections/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteTransitGatewaysConnectionsOpsPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteTransitGatewaysConnectionsOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := transitGatewayApisService.DeleteTransitGatewaysConnectionsOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteTransitGatewaysConnectionsOpsOptions model
				deleteTransitGatewaysConnectionsOpsOptionsModel := new(transitgatewayapisv1.DeleteTransitGatewaysConnectionsOpsOptions)
				deleteTransitGatewaysConnectionsOpsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				deleteTransitGatewaysConnectionsOpsOptionsModel.ID = core.StringPtr("testString")
				deleteTransitGatewaysConnectionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = transitGatewayApisService.DeleteTransitGatewaysConnectionsOps(deleteTransitGatewaysConnectionsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteTransitGatewaysConnectionsOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the DeleteTransitGatewaysConnectionsOpsOptions model
				deleteTransitGatewaysConnectionsOpsOptionsModel := new(transitgatewayapisv1.DeleteTransitGatewaysConnectionsOpsOptions)
				deleteTransitGatewaysConnectionsOpsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				deleteTransitGatewaysConnectionsOpsOptionsModel.ID = core.StringPtr("testString")
				deleteTransitGatewaysConnectionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := transitGatewayApisService.DeleteTransitGatewaysConnectionsOps(deleteTransitGatewaysConnectionsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteTransitGatewaysConnectionsOpsOptions model with no property values
				deleteTransitGatewaysConnectionsOpsOptionsModelNew := new(transitgatewayapisv1.DeleteTransitGatewaysConnectionsOpsOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = transitGatewayApisService.DeleteTransitGatewaysConnectionsOps(deleteTransitGatewaysConnectionsOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetTransitGatewaysConnectionsOps(getTransitGatewaysConnectionsOpsOptions *GetTransitGatewaysConnectionsOpsOptions) - Operation response error`, func() {
		version := "testString"
		getTransitGatewaysConnectionsOpsPath := "/ops/transit_gateways/testString/connections/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTransitGatewaysConnectionsOpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetTransitGatewaysConnectionsOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetTransitGatewaysConnectionsOpsOptions model
				getTransitGatewaysConnectionsOpsOptionsModel := new(transitgatewayapisv1.GetTransitGatewaysConnectionsOpsOptions)
				getTransitGatewaysConnectionsOpsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				getTransitGatewaysConnectionsOpsOptionsModel.ID = core.StringPtr("testString")
				getTransitGatewaysConnectionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.GetTransitGatewaysConnectionsOps(getTransitGatewaysConnectionsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.GetTransitGatewaysConnectionsOps(getTransitGatewaysConnectionsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetTransitGatewaysConnectionsOps(getTransitGatewaysConnectionsOpsOptions *GetTransitGatewaysConnectionsOpsOptions)`, func() {
		version := "testString"
		getTransitGatewaysConnectionsOpsPath := "/ops/transit_gateways/testString/connections/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTransitGatewaysConnectionsOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"base_network_type": "classic", "name": "Transit_Service_BWTN_SJ_DL", "network_id": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "network_type": "vpc", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "created_at": "2019-01-01T12:00:00.000Z", "network_account_id": "28e4d90ac7504be694471ee66e70d0d5", "request_status": "pending", "status": "up", "updated_at": "2019-01-01T12:00:00.000Z", "base_connection_id": "975f58c1-afe7-469a-9727-7f3d720f2d32", "crn": "crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "data_center": "dal10", "database_id": 234, "gateway_database_id": 987, "gateway_id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "gre_endpoint_prefix": "10.10.0.0/16", "is_billing": true, "is_deletable": false, "leak_route_distinguisher": "47902:3255120092", "local_bgp_asn": 64490, "local_gateway_ip": "192.168.100.1", "local_tunnel_ip": "192.168.129.2", "mtu": 9000, "prefix_filters": [{"action": "permit", "before": "1a15dcab-7e40-45e1-b7c5-bc690eaa9782", "created_at": "2019-01-01T12:00:00.000Z", "ge": 0, "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "le": 32, "prefix": "192.168.100.0/24", "updated_at": "2019-01-01T12:00:00.000Z"}], "prefix_filters_default": "permit", "remote_bgp_asn": 65010, "remote_gateway_ip": "10.242.63.12", "remote_tunnel_ip": "192.168.129.1", "resource_group": {"id": "56969d6043e9465c883cb9f7363e78e8", "href": "https://resource-manager.bluemix.net/v1/resource_groups/56969d6043e9465c883cb9f7363e78e8"}, "route_distinguisher": "47902:3255120092", "route_target": "47902:3255120092", "template_version": "v1", "transit_network_account_id": "28e4d90ac7504be694471ee66e70d0d5", "underlay_connection_id": "0c492442-6f36-4a9b-9712-77379c0ca1e1"}`)
				}))
			})
			It(`Invoke GetTransitGatewaysConnectionsOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the GetTransitGatewaysConnectionsOpsOptions model
				getTransitGatewaysConnectionsOpsOptionsModel := new(transitgatewayapisv1.GetTransitGatewaysConnectionsOpsOptions)
				getTransitGatewaysConnectionsOpsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				getTransitGatewaysConnectionsOpsOptionsModel.ID = core.StringPtr("testString")
				getTransitGatewaysConnectionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.GetTransitGatewaysConnectionsOpsWithContext(ctx, getTransitGatewaysConnectionsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.GetTransitGatewaysConnectionsOps(getTransitGatewaysConnectionsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.GetTransitGatewaysConnectionsOpsWithContext(ctx, getTransitGatewaysConnectionsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTransitGatewaysConnectionsOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"base_network_type": "classic", "name": "Transit_Service_BWTN_SJ_DL", "network_id": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "network_type": "vpc", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "created_at": "2019-01-01T12:00:00.000Z", "network_account_id": "28e4d90ac7504be694471ee66e70d0d5", "request_status": "pending", "status": "up", "updated_at": "2019-01-01T12:00:00.000Z", "base_connection_id": "975f58c1-afe7-469a-9727-7f3d720f2d32", "crn": "crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "data_center": "dal10", "database_id": 234, "gateway_database_id": 987, "gateway_id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "gre_endpoint_prefix": "10.10.0.0/16", "is_billing": true, "is_deletable": false, "leak_route_distinguisher": "47902:3255120092", "local_bgp_asn": 64490, "local_gateway_ip": "192.168.100.1", "local_tunnel_ip": "192.168.129.2", "mtu": 9000, "prefix_filters": [{"action": "permit", "before": "1a15dcab-7e40-45e1-b7c5-bc690eaa9782", "created_at": "2019-01-01T12:00:00.000Z", "ge": 0, "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "le": 32, "prefix": "192.168.100.0/24", "updated_at": "2019-01-01T12:00:00.000Z"}], "prefix_filters_default": "permit", "remote_bgp_asn": 65010, "remote_gateway_ip": "10.242.63.12", "remote_tunnel_ip": "192.168.129.1", "resource_group": {"id": "56969d6043e9465c883cb9f7363e78e8", "href": "https://resource-manager.bluemix.net/v1/resource_groups/56969d6043e9465c883cb9f7363e78e8"}, "route_distinguisher": "47902:3255120092", "route_target": "47902:3255120092", "template_version": "v1", "transit_network_account_id": "28e4d90ac7504be694471ee66e70d0d5", "underlay_connection_id": "0c492442-6f36-4a9b-9712-77379c0ca1e1"}`)
				}))
			})
			It(`Invoke GetTransitGatewaysConnectionsOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.GetTransitGatewaysConnectionsOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetTransitGatewaysConnectionsOpsOptions model
				getTransitGatewaysConnectionsOpsOptionsModel := new(transitgatewayapisv1.GetTransitGatewaysConnectionsOpsOptions)
				getTransitGatewaysConnectionsOpsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				getTransitGatewaysConnectionsOpsOptionsModel.ID = core.StringPtr("testString")
				getTransitGatewaysConnectionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.GetTransitGatewaysConnectionsOps(getTransitGatewaysConnectionsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetTransitGatewaysConnectionsOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetTransitGatewaysConnectionsOpsOptions model
				getTransitGatewaysConnectionsOpsOptionsModel := new(transitgatewayapisv1.GetTransitGatewaysConnectionsOpsOptions)
				getTransitGatewaysConnectionsOpsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				getTransitGatewaysConnectionsOpsOptionsModel.ID = core.StringPtr("testString")
				getTransitGatewaysConnectionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.GetTransitGatewaysConnectionsOps(getTransitGatewaysConnectionsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetTransitGatewaysConnectionsOpsOptions model with no property values
				getTransitGatewaysConnectionsOpsOptionsModelNew := new(transitgatewayapisv1.GetTransitGatewaysConnectionsOpsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.GetTransitGatewaysConnectionsOps(getTransitGatewaysConnectionsOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetTransitGatewaysConnectionsOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetTransitGatewaysConnectionsOpsOptions model
				getTransitGatewaysConnectionsOpsOptionsModel := new(transitgatewayapisv1.GetTransitGatewaysConnectionsOpsOptions)
				getTransitGatewaysConnectionsOpsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				getTransitGatewaysConnectionsOpsOptionsModel.ID = core.StringPtr("testString")
				getTransitGatewaysConnectionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.GetTransitGatewaysConnectionsOps(getTransitGatewaysConnectionsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateTransitGatewaysConnectionsOps(updateTransitGatewaysConnectionsOpsOptions *UpdateTransitGatewaysConnectionsOpsOptions) - Operation response error`, func() {
		version := "testString"
		updateTransitGatewaysConnectionsOpsPath := "/ops/transit_gateways/testString/connections/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateTransitGatewaysConnectionsOpsPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateTransitGatewaysConnectionsOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the UpdateTransitGatewaysConnectionsOpsOptions model
				updateTransitGatewaysConnectionsOpsOptionsModel := new(transitgatewayapisv1.UpdateTransitGatewaysConnectionsOpsOptions)
				updateTransitGatewaysConnectionsOpsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				updateTransitGatewaysConnectionsOpsOptionsModel.ID = core.StringPtr("testString")
				updateTransitGatewaysConnectionsOpsOptionsModel.IsDeletable = core.BoolPtr(false)
				updateTransitGatewaysConnectionsOpsOptionsModel.TemplateVersion = core.StringPtr("v1")
				updateTransitGatewaysConnectionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.UpdateTransitGatewaysConnectionsOps(updateTransitGatewaysConnectionsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.UpdateTransitGatewaysConnectionsOps(updateTransitGatewaysConnectionsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateTransitGatewaysConnectionsOps(updateTransitGatewaysConnectionsOpsOptions *UpdateTransitGatewaysConnectionsOpsOptions)`, func() {
		version := "testString"
		updateTransitGatewaysConnectionsOpsPath := "/ops/transit_gateways/testString/connections/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateTransitGatewaysConnectionsOpsPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"base_network_type": "classic", "name": "Transit_Service_BWTN_SJ_DL", "network_id": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "network_type": "vpc", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "created_at": "2019-01-01T12:00:00.000Z", "network_account_id": "28e4d90ac7504be694471ee66e70d0d5", "request_status": "pending", "status": "up", "updated_at": "2019-01-01T12:00:00.000Z", "base_connection_id": "975f58c1-afe7-469a-9727-7f3d720f2d32", "crn": "crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "data_center": "dal10", "database_id": 234, "gateway_database_id": 987, "gateway_id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "gre_endpoint_prefix": "10.10.0.0/16", "is_billing": true, "is_deletable": false, "leak_route_distinguisher": "47902:3255120092", "local_bgp_asn": 64490, "local_gateway_ip": "192.168.100.1", "local_tunnel_ip": "192.168.129.2", "mtu": 9000, "prefix_filters": [{"action": "permit", "before": "1a15dcab-7e40-45e1-b7c5-bc690eaa9782", "created_at": "2019-01-01T12:00:00.000Z", "ge": 0, "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "le": 32, "prefix": "192.168.100.0/24", "updated_at": "2019-01-01T12:00:00.000Z"}], "prefix_filters_default": "permit", "remote_bgp_asn": 65010, "remote_gateway_ip": "10.242.63.12", "remote_tunnel_ip": "192.168.129.1", "resource_group": {"id": "56969d6043e9465c883cb9f7363e78e8", "href": "https://resource-manager.bluemix.net/v1/resource_groups/56969d6043e9465c883cb9f7363e78e8"}, "route_distinguisher": "47902:3255120092", "route_target": "47902:3255120092", "template_version": "v1", "transit_network_account_id": "28e4d90ac7504be694471ee66e70d0d5", "underlay_connection_id": "0c492442-6f36-4a9b-9712-77379c0ca1e1"}`)
				}))
			})
			It(`Invoke UpdateTransitGatewaysConnectionsOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the UpdateTransitGatewaysConnectionsOpsOptions model
				updateTransitGatewaysConnectionsOpsOptionsModel := new(transitgatewayapisv1.UpdateTransitGatewaysConnectionsOpsOptions)
				updateTransitGatewaysConnectionsOpsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				updateTransitGatewaysConnectionsOpsOptionsModel.ID = core.StringPtr("testString")
				updateTransitGatewaysConnectionsOpsOptionsModel.IsDeletable = core.BoolPtr(false)
				updateTransitGatewaysConnectionsOpsOptionsModel.TemplateVersion = core.StringPtr("v1")
				updateTransitGatewaysConnectionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.UpdateTransitGatewaysConnectionsOpsWithContext(ctx, updateTransitGatewaysConnectionsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.UpdateTransitGatewaysConnectionsOps(updateTransitGatewaysConnectionsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.UpdateTransitGatewaysConnectionsOpsWithContext(ctx, updateTransitGatewaysConnectionsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateTransitGatewaysConnectionsOpsPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"base_network_type": "classic", "name": "Transit_Service_BWTN_SJ_DL", "network_id": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "network_type": "vpc", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "created_at": "2019-01-01T12:00:00.000Z", "network_account_id": "28e4d90ac7504be694471ee66e70d0d5", "request_status": "pending", "status": "up", "updated_at": "2019-01-01T12:00:00.000Z", "base_connection_id": "975f58c1-afe7-469a-9727-7f3d720f2d32", "crn": "crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "data_center": "dal10", "database_id": 234, "gateway_database_id": 987, "gateway_id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "gre_endpoint_prefix": "10.10.0.0/16", "is_billing": true, "is_deletable": false, "leak_route_distinguisher": "47902:3255120092", "local_bgp_asn": 64490, "local_gateway_ip": "192.168.100.1", "local_tunnel_ip": "192.168.129.2", "mtu": 9000, "prefix_filters": [{"action": "permit", "before": "1a15dcab-7e40-45e1-b7c5-bc690eaa9782", "created_at": "2019-01-01T12:00:00.000Z", "ge": 0, "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "le": 32, "prefix": "192.168.100.0/24", "updated_at": "2019-01-01T12:00:00.000Z"}], "prefix_filters_default": "permit", "remote_bgp_asn": 65010, "remote_gateway_ip": "10.242.63.12", "remote_tunnel_ip": "192.168.129.1", "resource_group": {"id": "56969d6043e9465c883cb9f7363e78e8", "href": "https://resource-manager.bluemix.net/v1/resource_groups/56969d6043e9465c883cb9f7363e78e8"}, "route_distinguisher": "47902:3255120092", "route_target": "47902:3255120092", "template_version": "v1", "transit_network_account_id": "28e4d90ac7504be694471ee66e70d0d5", "underlay_connection_id": "0c492442-6f36-4a9b-9712-77379c0ca1e1"}`)
				}))
			})
			It(`Invoke UpdateTransitGatewaysConnectionsOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.UpdateTransitGatewaysConnectionsOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateTransitGatewaysConnectionsOpsOptions model
				updateTransitGatewaysConnectionsOpsOptionsModel := new(transitgatewayapisv1.UpdateTransitGatewaysConnectionsOpsOptions)
				updateTransitGatewaysConnectionsOpsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				updateTransitGatewaysConnectionsOpsOptionsModel.ID = core.StringPtr("testString")
				updateTransitGatewaysConnectionsOpsOptionsModel.IsDeletable = core.BoolPtr(false)
				updateTransitGatewaysConnectionsOpsOptionsModel.TemplateVersion = core.StringPtr("v1")
				updateTransitGatewaysConnectionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.UpdateTransitGatewaysConnectionsOps(updateTransitGatewaysConnectionsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateTransitGatewaysConnectionsOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the UpdateTransitGatewaysConnectionsOpsOptions model
				updateTransitGatewaysConnectionsOpsOptionsModel := new(transitgatewayapisv1.UpdateTransitGatewaysConnectionsOpsOptions)
				updateTransitGatewaysConnectionsOpsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				updateTransitGatewaysConnectionsOpsOptionsModel.ID = core.StringPtr("testString")
				updateTransitGatewaysConnectionsOpsOptionsModel.IsDeletable = core.BoolPtr(false)
				updateTransitGatewaysConnectionsOpsOptionsModel.TemplateVersion = core.StringPtr("v1")
				updateTransitGatewaysConnectionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.UpdateTransitGatewaysConnectionsOps(updateTransitGatewaysConnectionsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateTransitGatewaysConnectionsOpsOptions model with no property values
				updateTransitGatewaysConnectionsOpsOptionsModelNew := new(transitgatewayapisv1.UpdateTransitGatewaysConnectionsOpsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.UpdateTransitGatewaysConnectionsOps(updateTransitGatewaysConnectionsOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateTransitGatewaysConnectionsOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the UpdateTransitGatewaysConnectionsOpsOptions model
				updateTransitGatewaysConnectionsOpsOptionsModel := new(transitgatewayapisv1.UpdateTransitGatewaysConnectionsOpsOptions)
				updateTransitGatewaysConnectionsOpsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				updateTransitGatewaysConnectionsOpsOptionsModel.ID = core.StringPtr("testString")
				updateTransitGatewaysConnectionsOpsOptionsModel.IsDeletable = core.BoolPtr(false)
				updateTransitGatewaysConnectionsOpsOptionsModel.TemplateVersion = core.StringPtr("v1")
				updateTransitGatewaysConnectionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.UpdateTransitGatewaysConnectionsOps(updateTransitGatewaysConnectionsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateTransitGatewaysConnectionsActionsOps(createTransitGatewaysConnectionsActionsOpsOptions *CreateTransitGatewaysConnectionsActionsOpsOptions)`, func() {
		version := "testString"
		createTransitGatewaysConnectionsActionsOpsPath := "/ops/transit_gateways/testString/connections/testString/actions"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createTransitGatewaysConnectionsActionsOpsPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke CreateTransitGatewaysConnectionsActionsOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := transitGatewayApisService.CreateTransitGatewaysConnectionsActionsOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the CreateTransitGatewaysConnectionsActionsOpsOptions model
				createTransitGatewaysConnectionsActionsOpsOptionsModel := new(transitgatewayapisv1.CreateTransitGatewaysConnectionsActionsOpsOptions)
				createTransitGatewaysConnectionsActionsOpsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				createTransitGatewaysConnectionsActionsOpsOptionsModel.ID = core.StringPtr("testString")
				createTransitGatewaysConnectionsActionsOpsOptionsModel.Action = core.StringPtr("suspend")
				createTransitGatewaysConnectionsActionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = transitGatewayApisService.CreateTransitGatewaysConnectionsActionsOps(createTransitGatewaysConnectionsActionsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke CreateTransitGatewaysConnectionsActionsOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateTransitGatewaysConnectionsActionsOpsOptions model
				createTransitGatewaysConnectionsActionsOpsOptionsModel := new(transitgatewayapisv1.CreateTransitGatewaysConnectionsActionsOpsOptions)
				createTransitGatewaysConnectionsActionsOpsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				createTransitGatewaysConnectionsActionsOpsOptionsModel.ID = core.StringPtr("testString")
				createTransitGatewaysConnectionsActionsOpsOptionsModel.Action = core.StringPtr("suspend")
				createTransitGatewaysConnectionsActionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := transitGatewayApisService.CreateTransitGatewaysConnectionsActionsOps(createTransitGatewaysConnectionsActionsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the CreateTransitGatewaysConnectionsActionsOpsOptions model with no property values
				createTransitGatewaysConnectionsActionsOpsOptionsModelNew := new(transitgatewayapisv1.CreateTransitGatewaysConnectionsActionsOpsOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = transitGatewayApisService.CreateTransitGatewaysConnectionsActionsOps(createTransitGatewaysConnectionsActionsOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateTransitGatewayConnectionDeviceMapping(createTransitGatewayConnectionDeviceMappingOptions *CreateTransitGatewayConnectionDeviceMappingOptions) - Operation response error`, func() {
		version := "testString"
		createTransitGatewayConnectionDeviceMappingPath := "/ops/transit_gateways/testString/connections/testString/device_mappings"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createTransitGatewayConnectionDeviceMappingPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateTransitGatewayConnectionDeviceMapping with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateTransitGatewayConnectionDeviceMappingOptions model
				createTransitGatewayConnectionDeviceMappingOptionsModel := new(transitgatewayapisv1.CreateTransitGatewayConnectionDeviceMappingOptions)
				createTransitGatewayConnectionDeviceMappingOptionsModel.TransitGatewayID = core.StringPtr("testString")
				createTransitGatewayConnectionDeviceMappingOptionsModel.ID = core.StringPtr("testString")
				createTransitGatewayConnectionDeviceMappingOptionsModel.DeviceID = core.StringPtr("0a06fb9b-820f-4c44-8a31-77f1f0806d28")
				createTransitGatewayConnectionDeviceMappingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.CreateTransitGatewayConnectionDeviceMapping(createTransitGatewayConnectionDeviceMappingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.CreateTransitGatewayConnectionDeviceMapping(createTransitGatewayConnectionDeviceMappingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateTransitGatewayConnectionDeviceMapping(createTransitGatewayConnectionDeviceMappingOptions *CreateTransitGatewayConnectionDeviceMappingOptions)`, func() {
		version := "testString"
		createTransitGatewayConnectionDeviceMappingPath := "/ops/transit_gateways/testString/connections/testString/device_mappings"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createTransitGatewayConnectionDeviceMappingPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"configuration_status": "available", "database_id": 446, "device_database_id": 446, "device_hostname": "tsr01dal01.softlayer.local", "device_id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "hostname": "tsr01dal01.softlayer.local", "id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "mapping_id": "0bc6fb9b-4402-555-8a31-aaaaa0854321", "tunnel_id": 48453}`)
				}))
			})
			It(`Invoke CreateTransitGatewayConnectionDeviceMapping successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the CreateTransitGatewayConnectionDeviceMappingOptions model
				createTransitGatewayConnectionDeviceMappingOptionsModel := new(transitgatewayapisv1.CreateTransitGatewayConnectionDeviceMappingOptions)
				createTransitGatewayConnectionDeviceMappingOptionsModel.TransitGatewayID = core.StringPtr("testString")
				createTransitGatewayConnectionDeviceMappingOptionsModel.ID = core.StringPtr("testString")
				createTransitGatewayConnectionDeviceMappingOptionsModel.DeviceID = core.StringPtr("0a06fb9b-820f-4c44-8a31-77f1f0806d28")
				createTransitGatewayConnectionDeviceMappingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.CreateTransitGatewayConnectionDeviceMappingWithContext(ctx, createTransitGatewayConnectionDeviceMappingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.CreateTransitGatewayConnectionDeviceMapping(createTransitGatewayConnectionDeviceMappingOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.CreateTransitGatewayConnectionDeviceMappingWithContext(ctx, createTransitGatewayConnectionDeviceMappingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createTransitGatewayConnectionDeviceMappingPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"configuration_status": "available", "database_id": 446, "device_database_id": 446, "device_hostname": "tsr01dal01.softlayer.local", "device_id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "hostname": "tsr01dal01.softlayer.local", "id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "mapping_id": "0bc6fb9b-4402-555-8a31-aaaaa0854321", "tunnel_id": 48453}`)
				}))
			})
			It(`Invoke CreateTransitGatewayConnectionDeviceMapping successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.CreateTransitGatewayConnectionDeviceMapping(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateTransitGatewayConnectionDeviceMappingOptions model
				createTransitGatewayConnectionDeviceMappingOptionsModel := new(transitgatewayapisv1.CreateTransitGatewayConnectionDeviceMappingOptions)
				createTransitGatewayConnectionDeviceMappingOptionsModel.TransitGatewayID = core.StringPtr("testString")
				createTransitGatewayConnectionDeviceMappingOptionsModel.ID = core.StringPtr("testString")
				createTransitGatewayConnectionDeviceMappingOptionsModel.DeviceID = core.StringPtr("0a06fb9b-820f-4c44-8a31-77f1f0806d28")
				createTransitGatewayConnectionDeviceMappingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.CreateTransitGatewayConnectionDeviceMapping(createTransitGatewayConnectionDeviceMappingOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateTransitGatewayConnectionDeviceMapping with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateTransitGatewayConnectionDeviceMappingOptions model
				createTransitGatewayConnectionDeviceMappingOptionsModel := new(transitgatewayapisv1.CreateTransitGatewayConnectionDeviceMappingOptions)
				createTransitGatewayConnectionDeviceMappingOptionsModel.TransitGatewayID = core.StringPtr("testString")
				createTransitGatewayConnectionDeviceMappingOptionsModel.ID = core.StringPtr("testString")
				createTransitGatewayConnectionDeviceMappingOptionsModel.DeviceID = core.StringPtr("0a06fb9b-820f-4c44-8a31-77f1f0806d28")
				createTransitGatewayConnectionDeviceMappingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.CreateTransitGatewayConnectionDeviceMapping(createTransitGatewayConnectionDeviceMappingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateTransitGatewayConnectionDeviceMappingOptions model with no property values
				createTransitGatewayConnectionDeviceMappingOptionsModelNew := new(transitgatewayapisv1.CreateTransitGatewayConnectionDeviceMappingOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.CreateTransitGatewayConnectionDeviceMapping(createTransitGatewayConnectionDeviceMappingOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateTransitGatewayConnectionDeviceMapping successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateTransitGatewayConnectionDeviceMappingOptions model
				createTransitGatewayConnectionDeviceMappingOptionsModel := new(transitgatewayapisv1.CreateTransitGatewayConnectionDeviceMappingOptions)
				createTransitGatewayConnectionDeviceMappingOptionsModel.TransitGatewayID = core.StringPtr("testString")
				createTransitGatewayConnectionDeviceMappingOptionsModel.ID = core.StringPtr("testString")
				createTransitGatewayConnectionDeviceMappingOptionsModel.DeviceID = core.StringPtr("0a06fb9b-820f-4c44-8a31-77f1f0806d28")
				createTransitGatewayConnectionDeviceMappingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.CreateTransitGatewayConnectionDeviceMapping(createTransitGatewayConnectionDeviceMappingOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteTransitGatewayConnectionDeviceMapping(deleteTransitGatewayConnectionDeviceMappingOptions *DeleteTransitGatewayConnectionDeviceMappingOptions)`, func() {
		version := "testString"
		deleteTransitGatewayConnectionDeviceMappingPath := "/ops/transit_gateways/testString/connections/testString/device_mappings/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteTransitGatewayConnectionDeviceMappingPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteTransitGatewayConnectionDeviceMapping successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := transitGatewayApisService.DeleteTransitGatewayConnectionDeviceMapping(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteTransitGatewayConnectionDeviceMappingOptions model
				deleteTransitGatewayConnectionDeviceMappingOptionsModel := new(transitgatewayapisv1.DeleteTransitGatewayConnectionDeviceMappingOptions)
				deleteTransitGatewayConnectionDeviceMappingOptionsModel.TransitGatewayID = core.StringPtr("testString")
				deleteTransitGatewayConnectionDeviceMappingOptionsModel.ID = core.StringPtr("testString")
				deleteTransitGatewayConnectionDeviceMappingOptionsModel.MappingID = core.StringPtr("testString")
				deleteTransitGatewayConnectionDeviceMappingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = transitGatewayApisService.DeleteTransitGatewayConnectionDeviceMapping(deleteTransitGatewayConnectionDeviceMappingOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteTransitGatewayConnectionDeviceMapping with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the DeleteTransitGatewayConnectionDeviceMappingOptions model
				deleteTransitGatewayConnectionDeviceMappingOptionsModel := new(transitgatewayapisv1.DeleteTransitGatewayConnectionDeviceMappingOptions)
				deleteTransitGatewayConnectionDeviceMappingOptionsModel.TransitGatewayID = core.StringPtr("testString")
				deleteTransitGatewayConnectionDeviceMappingOptionsModel.ID = core.StringPtr("testString")
				deleteTransitGatewayConnectionDeviceMappingOptionsModel.MappingID = core.StringPtr("testString")
				deleteTransitGatewayConnectionDeviceMappingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := transitGatewayApisService.DeleteTransitGatewayConnectionDeviceMapping(deleteTransitGatewayConnectionDeviceMappingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteTransitGatewayConnectionDeviceMappingOptions model with no property values
				deleteTransitGatewayConnectionDeviceMappingOptionsModelNew := new(transitgatewayapisv1.DeleteTransitGatewayConnectionDeviceMappingOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = transitGatewayApisService.DeleteTransitGatewayConnectionDeviceMapping(deleteTransitGatewayConnectionDeviceMappingOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListTransitGatewaysConnectionDeviceMappings(listTransitGatewaysConnectionDeviceMappingsOptions *ListTransitGatewaysConnectionDeviceMappingsOptions) - Operation response error`, func() {
		version := "testString"
		listTransitGatewaysConnectionDeviceMappingsPath := "/ops/transit_gateways/testString/connections/testString/gateway_devices"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewaysConnectionDeviceMappingsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListTransitGatewaysConnectionDeviceMappings with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewaysConnectionDeviceMappingsOptions model
				listTransitGatewaysConnectionDeviceMappingsOptionsModel := new(transitgatewayapisv1.ListTransitGatewaysConnectionDeviceMappingsOptions)
				listTransitGatewaysConnectionDeviceMappingsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewaysConnectionDeviceMappingsOptionsModel.ID = core.StringPtr("testString")
				listTransitGatewaysConnectionDeviceMappingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.ListTransitGatewaysConnectionDeviceMappings(listTransitGatewaysConnectionDeviceMappingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.ListTransitGatewaysConnectionDeviceMappings(listTransitGatewaysConnectionDeviceMappingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListTransitGatewaysConnectionDeviceMappings(listTransitGatewaysConnectionDeviceMappingsOptions *ListTransitGatewaysConnectionDeviceMappingsOptions)`, func() {
		version := "testString"
		listTransitGatewaysConnectionDeviceMappingsPath := "/ops/transit_gateways/testString/connections/testString/gateway_devices"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewaysConnectionDeviceMappingsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"devices": [{"configuration_status": "available", "database_id": 446, "device_database_id": 446, "device_hostname": "tsr01dal01.softlayer.local", "device_id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "hostname": "tsr01dal01.softlayer.local", "id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "mapping_id": "0bc6fb9b-4402-555-8a31-aaaaa0854321", "tunnel_id": 48453}]}`)
				}))
			})
			It(`Invoke ListTransitGatewaysConnectionDeviceMappings successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the ListTransitGatewaysConnectionDeviceMappingsOptions model
				listTransitGatewaysConnectionDeviceMappingsOptionsModel := new(transitgatewayapisv1.ListTransitGatewaysConnectionDeviceMappingsOptions)
				listTransitGatewaysConnectionDeviceMappingsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewaysConnectionDeviceMappingsOptionsModel.ID = core.StringPtr("testString")
				listTransitGatewaysConnectionDeviceMappingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.ListTransitGatewaysConnectionDeviceMappingsWithContext(ctx, listTransitGatewaysConnectionDeviceMappingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.ListTransitGatewaysConnectionDeviceMappings(listTransitGatewaysConnectionDeviceMappingsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.ListTransitGatewaysConnectionDeviceMappingsWithContext(ctx, listTransitGatewaysConnectionDeviceMappingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewaysConnectionDeviceMappingsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"devices": [{"configuration_status": "available", "database_id": 446, "device_database_id": 446, "device_hostname": "tsr01dal01.softlayer.local", "device_id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "hostname": "tsr01dal01.softlayer.local", "id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "mapping_id": "0bc6fb9b-4402-555-8a31-aaaaa0854321", "tunnel_id": 48453}]}`)
				}))
			})
			It(`Invoke ListTransitGatewaysConnectionDeviceMappings successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.ListTransitGatewaysConnectionDeviceMappings(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListTransitGatewaysConnectionDeviceMappingsOptions model
				listTransitGatewaysConnectionDeviceMappingsOptionsModel := new(transitgatewayapisv1.ListTransitGatewaysConnectionDeviceMappingsOptions)
				listTransitGatewaysConnectionDeviceMappingsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewaysConnectionDeviceMappingsOptionsModel.ID = core.StringPtr("testString")
				listTransitGatewaysConnectionDeviceMappingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.ListTransitGatewaysConnectionDeviceMappings(listTransitGatewaysConnectionDeviceMappingsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListTransitGatewaysConnectionDeviceMappings with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewaysConnectionDeviceMappingsOptions model
				listTransitGatewaysConnectionDeviceMappingsOptionsModel := new(transitgatewayapisv1.ListTransitGatewaysConnectionDeviceMappingsOptions)
				listTransitGatewaysConnectionDeviceMappingsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewaysConnectionDeviceMappingsOptionsModel.ID = core.StringPtr("testString")
				listTransitGatewaysConnectionDeviceMappingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.ListTransitGatewaysConnectionDeviceMappings(listTransitGatewaysConnectionDeviceMappingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListTransitGatewaysConnectionDeviceMappingsOptions model with no property values
				listTransitGatewaysConnectionDeviceMappingsOptionsModelNew := new(transitgatewayapisv1.ListTransitGatewaysConnectionDeviceMappingsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.ListTransitGatewaysConnectionDeviceMappings(listTransitGatewaysConnectionDeviceMappingsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListTransitGatewaysConnectionDeviceMappings successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewaysConnectionDeviceMappingsOptions model
				listTransitGatewaysConnectionDeviceMappingsOptionsModel := new(transitgatewayapisv1.ListTransitGatewaysConnectionDeviceMappingsOptions)
				listTransitGatewaysConnectionDeviceMappingsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewaysConnectionDeviceMappingsOptionsModel.ID = core.StringPtr("testString")
				listTransitGatewaysConnectionDeviceMappingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.ListTransitGatewaysConnectionDeviceMappings(listTransitGatewaysConnectionDeviceMappingsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListTransitGatewaysConnectionsNetworksOps(listTransitGatewaysConnectionsNetworksOpsOptions *ListTransitGatewaysConnectionsNetworksOpsOptions) - Operation response error`, func() {
		version := "testString"
		listTransitGatewaysConnectionsNetworksOpsPath := "/ops/transit_gateways/testString/connections/testString/networks"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewaysConnectionsNetworksOpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListTransitGatewaysConnectionsNetworksOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewaysConnectionsNetworksOpsOptions model
				listTransitGatewaysConnectionsNetworksOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewaysConnectionsNetworksOpsOptions)
				listTransitGatewaysConnectionsNetworksOpsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewaysConnectionsNetworksOpsOptionsModel.ID = core.StringPtr("testString")
				listTransitGatewaysConnectionsNetworksOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.ListTransitGatewaysConnectionsNetworksOps(listTransitGatewaysConnectionsNetworksOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.ListTransitGatewaysConnectionsNetworksOps(listTransitGatewaysConnectionsNetworksOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListTransitGatewaysConnectionsNetworksOps(listTransitGatewaysConnectionsNetworksOpsOptions *ListTransitGatewaysConnectionsNetworksOpsOptions)`, func() {
		version := "testString"
		listTransitGatewaysConnectionsNetworksOpsPath := "/ops/transit_gateways/testString/connections/testString/networks"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewaysConnectionsNetworksOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"networks": ["{"route_target":"13749:1073741824","route_distinguisher":"13749:1073741824"}"], "rest_call": "https://iaas.cloud.ibm.com/internal/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c5333/rt_rd?version=2019-09-09&generation=1", "status_code": 200}`)
				}))
			})
			It(`Invoke ListTransitGatewaysConnectionsNetworksOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the ListTransitGatewaysConnectionsNetworksOpsOptions model
				listTransitGatewaysConnectionsNetworksOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewaysConnectionsNetworksOpsOptions)
				listTransitGatewaysConnectionsNetworksOpsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewaysConnectionsNetworksOpsOptionsModel.ID = core.StringPtr("testString")
				listTransitGatewaysConnectionsNetworksOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.ListTransitGatewaysConnectionsNetworksOpsWithContext(ctx, listTransitGatewaysConnectionsNetworksOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.ListTransitGatewaysConnectionsNetworksOps(listTransitGatewaysConnectionsNetworksOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.ListTransitGatewaysConnectionsNetworksOpsWithContext(ctx, listTransitGatewaysConnectionsNetworksOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewaysConnectionsNetworksOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"networks": ["{"route_target":"13749:1073741824","route_distinguisher":"13749:1073741824"}"], "rest_call": "https://iaas.cloud.ibm.com/internal/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c5333/rt_rd?version=2019-09-09&generation=1", "status_code": 200}`)
				}))
			})
			It(`Invoke ListTransitGatewaysConnectionsNetworksOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.ListTransitGatewaysConnectionsNetworksOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListTransitGatewaysConnectionsNetworksOpsOptions model
				listTransitGatewaysConnectionsNetworksOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewaysConnectionsNetworksOpsOptions)
				listTransitGatewaysConnectionsNetworksOpsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewaysConnectionsNetworksOpsOptionsModel.ID = core.StringPtr("testString")
				listTransitGatewaysConnectionsNetworksOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.ListTransitGatewaysConnectionsNetworksOps(listTransitGatewaysConnectionsNetworksOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListTransitGatewaysConnectionsNetworksOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewaysConnectionsNetworksOpsOptions model
				listTransitGatewaysConnectionsNetworksOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewaysConnectionsNetworksOpsOptions)
				listTransitGatewaysConnectionsNetworksOpsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewaysConnectionsNetworksOpsOptionsModel.ID = core.StringPtr("testString")
				listTransitGatewaysConnectionsNetworksOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.ListTransitGatewaysConnectionsNetworksOps(listTransitGatewaysConnectionsNetworksOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListTransitGatewaysConnectionsNetworksOpsOptions model with no property values
				listTransitGatewaysConnectionsNetworksOpsOptionsModelNew := new(transitgatewayapisv1.ListTransitGatewaysConnectionsNetworksOpsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.ListTransitGatewaysConnectionsNetworksOps(listTransitGatewaysConnectionsNetworksOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListTransitGatewaysConnectionsNetworksOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewaysConnectionsNetworksOpsOptions model
				listTransitGatewaysConnectionsNetworksOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewaysConnectionsNetworksOpsOptions)
				listTransitGatewaysConnectionsNetworksOpsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewaysConnectionsNetworksOpsOptionsModel.ID = core.StringPtr("testString")
				listTransitGatewaysConnectionsNetworksOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.ListTransitGatewaysConnectionsNetworksOps(listTransitGatewaysConnectionsNetworksOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListTransitGatewayConnections(listTransitGatewayConnectionsOptions *ListTransitGatewayConnectionsOptions) - Operation response error`, func() {
		version := "testString"
		listTransitGatewayConnectionsPath := "/transit_gateways/testString/connections"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewayConnectionsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListTransitGatewayConnections with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewayConnectionsOptions model
				listTransitGatewayConnectionsOptionsModel := new(transitgatewayapisv1.ListTransitGatewayConnectionsOptions)
				listTransitGatewayConnectionsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewayConnectionsOptionsModel.Start = core.StringPtr("testString")
				listTransitGatewayConnectionsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listTransitGatewayConnectionsOptionsModel.Name = core.StringPtr("testString")
				listTransitGatewayConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayConnections(listTransitGatewayConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.ListTransitGatewayConnections(listTransitGatewayConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListTransitGatewayConnections(listTransitGatewayConnectionsOptions *ListTransitGatewayConnectionsOptions)`, func() {
		version := "testString"
		listTransitGatewayConnectionsPath := "/transit_gateways/testString/connections"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewayConnectionsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"connections": [{"base_network_type": "classic", "name": "Transit_Service_BWTN_SJ_DL", "network_id": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "network_type": "vpc", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "base_connection_id": "975f58c1-afe7-469a-9727-7f3d720f2d32", "created_at": "2019-01-01T12:00:00.000Z", "local_bgp_asn": 64490, "local_gateway_ip": "192.168.100.1", "local_tunnel_ip": "192.168.129.2", "mtu": 9000, "network_account_id": "28e4d90ac7504be694471ee66e70d0d5", "prefix_filters": [{"action": "permit", "before": "1a15dcab-7e40-45e1-b7c5-bc690eaa9782", "created_at": "2019-01-01T12:00:00.000Z", "ge": 0, "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "le": 32, "prefix": "192.168.100.0/24", "updated_at": "2019-01-01T12:00:00.000Z"}], "prefix_filters_default": "permit", "remote_bgp_asn": 65010, "remote_gateway_ip": "10.242.63.12", "remote_tunnel_ip": "192.168.129.1", "request_status": "pending", "status": "attached", "updated_at": "2019-01-01T12:00:00.000Z", "zone": {"name": "us-south-1"}}], "first": {"href": "https://transit.cloud.ibm.com/v1/transit_gateways/{transit_gateway_id}/connections?limit=50"}, "limit": 50, "next": {"href": "https://transit.cloud.ibm.com/v1/transit_gateways/{transit_gateway_id}/connections?start=MjAyMC0wNS0wOFQxNDoxNzowMy45NzQ5NzNa&limit=50", "start": "MjAyMC0wNS0wOFQxNDoxNzowMy45NzQ5NzNa"}, "total_count": 500}`)
				}))
			})
			It(`Invoke ListTransitGatewayConnections successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the ListTransitGatewayConnectionsOptions model
				listTransitGatewayConnectionsOptionsModel := new(transitgatewayapisv1.ListTransitGatewayConnectionsOptions)
				listTransitGatewayConnectionsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewayConnectionsOptionsModel.Start = core.StringPtr("testString")
				listTransitGatewayConnectionsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listTransitGatewayConnectionsOptionsModel.Name = core.StringPtr("testString")
				listTransitGatewayConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.ListTransitGatewayConnectionsWithContext(ctx, listTransitGatewayConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayConnections(listTransitGatewayConnectionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.ListTransitGatewayConnectionsWithContext(ctx, listTransitGatewayConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewayConnectionsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"connections": [{"base_network_type": "classic", "name": "Transit_Service_BWTN_SJ_DL", "network_id": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "network_type": "vpc", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "base_connection_id": "975f58c1-afe7-469a-9727-7f3d720f2d32", "created_at": "2019-01-01T12:00:00.000Z", "local_bgp_asn": 64490, "local_gateway_ip": "192.168.100.1", "local_tunnel_ip": "192.168.129.2", "mtu": 9000, "network_account_id": "28e4d90ac7504be694471ee66e70d0d5", "prefix_filters": [{"action": "permit", "before": "1a15dcab-7e40-45e1-b7c5-bc690eaa9782", "created_at": "2019-01-01T12:00:00.000Z", "ge": 0, "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "le": 32, "prefix": "192.168.100.0/24", "updated_at": "2019-01-01T12:00:00.000Z"}], "prefix_filters_default": "permit", "remote_bgp_asn": 65010, "remote_gateway_ip": "10.242.63.12", "remote_tunnel_ip": "192.168.129.1", "request_status": "pending", "status": "attached", "updated_at": "2019-01-01T12:00:00.000Z", "zone": {"name": "us-south-1"}}], "first": {"href": "https://transit.cloud.ibm.com/v1/transit_gateways/{transit_gateway_id}/connections?limit=50"}, "limit": 50, "next": {"href": "https://transit.cloud.ibm.com/v1/transit_gateways/{transit_gateway_id}/connections?start=MjAyMC0wNS0wOFQxNDoxNzowMy45NzQ5NzNa&limit=50", "start": "MjAyMC0wNS0wOFQxNDoxNzowMy45NzQ5NzNa"}, "total_count": 500}`)
				}))
			})
			It(`Invoke ListTransitGatewayConnections successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayConnections(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListTransitGatewayConnectionsOptions model
				listTransitGatewayConnectionsOptionsModel := new(transitgatewayapisv1.ListTransitGatewayConnectionsOptions)
				listTransitGatewayConnectionsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewayConnectionsOptionsModel.Start = core.StringPtr("testString")
				listTransitGatewayConnectionsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listTransitGatewayConnectionsOptionsModel.Name = core.StringPtr("testString")
				listTransitGatewayConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.ListTransitGatewayConnections(listTransitGatewayConnectionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListTransitGatewayConnections with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewayConnectionsOptions model
				listTransitGatewayConnectionsOptionsModel := new(transitgatewayapisv1.ListTransitGatewayConnectionsOptions)
				listTransitGatewayConnectionsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewayConnectionsOptionsModel.Start = core.StringPtr("testString")
				listTransitGatewayConnectionsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listTransitGatewayConnectionsOptionsModel.Name = core.StringPtr("testString")
				listTransitGatewayConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayConnections(listTransitGatewayConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListTransitGatewayConnectionsOptions model with no property values
				listTransitGatewayConnectionsOptionsModelNew := new(transitgatewayapisv1.ListTransitGatewayConnectionsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.ListTransitGatewayConnections(listTransitGatewayConnectionsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListTransitGatewayConnections successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewayConnectionsOptions model
				listTransitGatewayConnectionsOptionsModel := new(transitgatewayapisv1.ListTransitGatewayConnectionsOptions)
				listTransitGatewayConnectionsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				listTransitGatewayConnectionsOptionsModel.Start = core.StringPtr("testString")
				listTransitGatewayConnectionsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listTransitGatewayConnectionsOptionsModel.Name = core.StringPtr("testString")
				listTransitGatewayConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.ListTransitGatewayConnections(listTransitGatewayConnectionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Test pagination helper method on response`, func() {
			It(`Invoke GetNextStart successfully`, func() {
				responseObject := new(transitgatewayapisv1.TransitGatewayConnectionCollection)
				nextObject := new(transitgatewayapisv1.PaginationNextTGWConnection)
				nextObject.Start = core.StringPtr("abc-123")
				responseObject.Next = nextObject
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(Equal(core.StringPtr("abc-123")))
			})
			It(`Invoke GetNextStart without a "Next" property in the response`, func() {
				responseObject := new(transitgatewayapisv1.TransitGatewayConnectionCollection)
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(BeNil())
			})
		})
		Context(`Using mock server endpoint - paginated response`, func() {
			BeforeEach(func() {
				var requestNumber int = 0
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewayConnectionsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					requestNumber++
					if requestNumber == 1 {
						fmt.Fprintf(res, "%s", `{"next":{"start":"1"},"total_count":2,"limit":1,"connections":[{"base_network_type":"classic","name":"Transit_Service_BWTN_SJ_DL","network_id":"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b","network_type":"vpc","id":"1a15dca5-7e33-45e1-b7c5-bc690e569531","base_connection_id":"975f58c1-afe7-469a-9727-7f3d720f2d32","created_at":"2019-01-01T12:00:00.000Z","local_bgp_asn":64490,"local_gateway_ip":"192.168.100.1","local_tunnel_ip":"192.168.129.2","mtu":9000,"network_account_id":"28e4d90ac7504be694471ee66e70d0d5","prefix_filters":[{"action":"permit","before":"1a15dcab-7e40-45e1-b7c5-bc690eaa9782","created_at":"2019-01-01T12:00:00.000Z","ge":0,"id":"1a15dcab-7e30-45e1-b7c5-bc690eaa9865","le":32,"prefix":"192.168.100.0/24","updated_at":"2019-01-01T12:00:00.000Z"}],"prefix_filters_default":"permit","remote_bgp_asn":65010,"remote_gateway_ip":"10.242.63.12","remote_tunnel_ip":"192.168.129.1","request_status":"pending","status":"attached","updated_at":"2019-01-01T12:00:00.000Z","zone":{"name":"us-south-1"}}]}`)
					} else if requestNumber == 2 {
						fmt.Fprintf(res, "%s", `{"total_count":2,"limit":1,"connections":[{"base_network_type":"classic","name":"Transit_Service_BWTN_SJ_DL","network_id":"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b","network_type":"vpc","id":"1a15dca5-7e33-45e1-b7c5-bc690e569531","base_connection_id":"975f58c1-afe7-469a-9727-7f3d720f2d32","created_at":"2019-01-01T12:00:00.000Z","local_bgp_asn":64490,"local_gateway_ip":"192.168.100.1","local_tunnel_ip":"192.168.129.2","mtu":9000,"network_account_id":"28e4d90ac7504be694471ee66e70d0d5","prefix_filters":[{"action":"permit","before":"1a15dcab-7e40-45e1-b7c5-bc690eaa9782","created_at":"2019-01-01T12:00:00.000Z","ge":0,"id":"1a15dcab-7e30-45e1-b7c5-bc690eaa9865","le":32,"prefix":"192.168.100.0/24","updated_at":"2019-01-01T12:00:00.000Z"}],"prefix_filters_default":"permit","remote_bgp_asn":65010,"remote_gateway_ip":"10.242.63.12","remote_tunnel_ip":"192.168.129.1","request_status":"pending","status":"attached","updated_at":"2019-01-01T12:00:00.000Z","zone":{"name":"us-south-1"}}]}`)
					} else {
						res.WriteHeader(400)
					}
				}))
			})
			It(`Use TransitGatewayConnectionsPager.GetNext successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				listTransitGatewayConnectionsOptionsModel := &transitgatewayapisv1.ListTransitGatewayConnectionsOptions{
					TransitGatewayID: core.StringPtr("testString"),
					Limit: core.Int64Ptr(int64(10)),
					Name: core.StringPtr("testString"),
				}

				pager, err := transitGatewayApisService.NewTransitGatewayConnectionsPager(listTransitGatewayConnectionsOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				var allResults []transitgatewayapisv1.TransitGatewayConnectionCust
				for pager.HasNext() {
					nextPage, err := pager.GetNext()
					Expect(err).To(BeNil())
					Expect(nextPage).ToNot(BeNil())
					allResults = append(allResults, nextPage...)
				}
				Expect(len(allResults)).To(Equal(2))
			})
			It(`Use TransitGatewayConnectionsPager.GetAll successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				listTransitGatewayConnectionsOptionsModel := &transitgatewayapisv1.ListTransitGatewayConnectionsOptions{
					TransitGatewayID: core.StringPtr("testString"),
					Limit: core.Int64Ptr(int64(10)),
					Name: core.StringPtr("testString"),
				}

				pager, err := transitGatewayApisService.NewTransitGatewayConnectionsPager(listTransitGatewayConnectionsOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				allResults, err := pager.GetAll()
				Expect(err).To(BeNil())
				Expect(allResults).ToNot(BeNil())
				Expect(len(allResults)).To(Equal(2))
			})
		})
	})
	Describe(`CreateTransitGatewayConnection(createTransitGatewayConnectionOptions *CreateTransitGatewayConnectionOptions) - Operation response error`, func() {
		version := "testString"
		createTransitGatewayConnectionPath := "/transit_gateways/testString/connections"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createTransitGatewayConnectionPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateTransitGatewayConnection with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the TransitGatewayConnectionPrefixFilter model
				transitGatewayConnectionPrefixFilterModel := new(transitgatewayapisv1.TransitGatewayConnectionPrefixFilter)
				transitGatewayConnectionPrefixFilterModel.Action = core.StringPtr("permit")
				transitGatewayConnectionPrefixFilterModel.Ge = core.Int64Ptr(int64(0))
				transitGatewayConnectionPrefixFilterModel.Le = core.Int64Ptr(int64(32))
				transitGatewayConnectionPrefixFilterModel.Prefix = core.StringPtr("192.168.100.0/24")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(transitgatewayapisv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the TransitGatewayConnectionTemplateTransitGatewayConnectionNonRedundantGRETemplate model
				transitGatewayConnectionTemplateModel := new(transitgatewayapisv1.TransitGatewayConnectionTemplateTransitGatewayConnectionNonRedundantGRETemplate)
				transitGatewayConnectionTemplateModel.BaseConnectionID = core.StringPtr("975f58c1-afe7-469a-9727-7f3d720f2d32")
				transitGatewayConnectionTemplateModel.BaseNetworkType = core.StringPtr("classic")
				transitGatewayConnectionTemplateModel.LocalGatewayIp = core.StringPtr("192.168.100.1")
				transitGatewayConnectionTemplateModel.LocalTunnelIp = core.StringPtr("192.168.129.2")
				transitGatewayConnectionTemplateModel.Name = core.StringPtr("Transit_Service_BWTN_SJ_DL")
				transitGatewayConnectionTemplateModel.NetworkAccountID = core.StringPtr("28e4d90ac7504be694471ee66e70d0d5")
				transitGatewayConnectionTemplateModel.NetworkID = core.StringPtr("crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b")
				transitGatewayConnectionTemplateModel.NetworkType = core.StringPtr("vpc")
				transitGatewayConnectionTemplateModel.PrefixFilters = []transitgatewayapisv1.TransitGatewayConnectionPrefixFilter{*transitGatewayConnectionPrefixFilterModel}
				transitGatewayConnectionTemplateModel.PrefixFiltersDefault = core.StringPtr("permit")
				transitGatewayConnectionTemplateModel.RemoteBgpAsn = core.Int64Ptr(int64(65010))
				transitGatewayConnectionTemplateModel.RemoteGatewayIp = core.StringPtr("10.242.63.12")
				transitGatewayConnectionTemplateModel.RemoteTunnelIp = core.StringPtr("192.168.129.1")
				transitGatewayConnectionTemplateModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateTransitGatewayConnectionOptions model
				createTransitGatewayConnectionOptionsModel := new(transitgatewayapisv1.CreateTransitGatewayConnectionOptions)
				createTransitGatewayConnectionOptionsModel.TransitGatewayID = core.StringPtr("testString")
				createTransitGatewayConnectionOptionsModel.TransitGatewayConnectionTemplate = transitGatewayConnectionTemplateModel
				createTransitGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.CreateTransitGatewayConnection(createTransitGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.CreateTransitGatewayConnection(createTransitGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateTransitGatewayConnection(createTransitGatewayConnectionOptions *CreateTransitGatewayConnectionOptions)`, func() {
		version := "testString"
		createTransitGatewayConnectionPath := "/transit_gateways/testString/connections"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createTransitGatewayConnectionPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"base_network_type": "classic", "name": "Transit_Service_BWTN_SJ_DL", "network_id": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "network_type": "vpc", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "base_connection_id": "975f58c1-afe7-469a-9727-7f3d720f2d32", "created_at": "2019-01-01T12:00:00.000Z", "local_bgp_asn": 64490, "local_gateway_ip": "192.168.100.1", "local_tunnel_ip": "192.168.129.2", "mtu": 9000, "network_account_id": "28e4d90ac7504be694471ee66e70d0d5", "prefix_filters": [{"action": "permit", "before": "1a15dcab-7e40-45e1-b7c5-bc690eaa9782", "created_at": "2019-01-01T12:00:00.000Z", "ge": 0, "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "le": 32, "prefix": "192.168.100.0/24", "updated_at": "2019-01-01T12:00:00.000Z"}], "prefix_filters_default": "permit", "remote_bgp_asn": 65010, "remote_gateway_ip": "10.242.63.12", "remote_tunnel_ip": "192.168.129.1", "request_status": "pending", "status": "attached", "updated_at": "2019-01-01T12:00:00.000Z", "zone": {"name": "us-south-1"}}`)
				}))
			})
			It(`Invoke CreateTransitGatewayConnection successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the TransitGatewayConnectionPrefixFilter model
				transitGatewayConnectionPrefixFilterModel := new(transitgatewayapisv1.TransitGatewayConnectionPrefixFilter)
				transitGatewayConnectionPrefixFilterModel.Action = core.StringPtr("permit")
				transitGatewayConnectionPrefixFilterModel.Ge = core.Int64Ptr(int64(0))
				transitGatewayConnectionPrefixFilterModel.Le = core.Int64Ptr(int64(32))
				transitGatewayConnectionPrefixFilterModel.Prefix = core.StringPtr("192.168.100.0/24")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(transitgatewayapisv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the TransitGatewayConnectionTemplateTransitGatewayConnectionNonRedundantGRETemplate model
				transitGatewayConnectionTemplateModel := new(transitgatewayapisv1.TransitGatewayConnectionTemplateTransitGatewayConnectionNonRedundantGRETemplate)
				transitGatewayConnectionTemplateModel.BaseConnectionID = core.StringPtr("975f58c1-afe7-469a-9727-7f3d720f2d32")
				transitGatewayConnectionTemplateModel.BaseNetworkType = core.StringPtr("classic")
				transitGatewayConnectionTemplateModel.LocalGatewayIp = core.StringPtr("192.168.100.1")
				transitGatewayConnectionTemplateModel.LocalTunnelIp = core.StringPtr("192.168.129.2")
				transitGatewayConnectionTemplateModel.Name = core.StringPtr("Transit_Service_BWTN_SJ_DL")
				transitGatewayConnectionTemplateModel.NetworkAccountID = core.StringPtr("28e4d90ac7504be694471ee66e70d0d5")
				transitGatewayConnectionTemplateModel.NetworkID = core.StringPtr("crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b")
				transitGatewayConnectionTemplateModel.NetworkType = core.StringPtr("vpc")
				transitGatewayConnectionTemplateModel.PrefixFilters = []transitgatewayapisv1.TransitGatewayConnectionPrefixFilter{*transitGatewayConnectionPrefixFilterModel}
				transitGatewayConnectionTemplateModel.PrefixFiltersDefault = core.StringPtr("permit")
				transitGatewayConnectionTemplateModel.RemoteBgpAsn = core.Int64Ptr(int64(65010))
				transitGatewayConnectionTemplateModel.RemoteGatewayIp = core.StringPtr("10.242.63.12")
				transitGatewayConnectionTemplateModel.RemoteTunnelIp = core.StringPtr("192.168.129.1")
				transitGatewayConnectionTemplateModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateTransitGatewayConnectionOptions model
				createTransitGatewayConnectionOptionsModel := new(transitgatewayapisv1.CreateTransitGatewayConnectionOptions)
				createTransitGatewayConnectionOptionsModel.TransitGatewayID = core.StringPtr("testString")
				createTransitGatewayConnectionOptionsModel.TransitGatewayConnectionTemplate = transitGatewayConnectionTemplateModel
				createTransitGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.CreateTransitGatewayConnectionWithContext(ctx, createTransitGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.CreateTransitGatewayConnection(createTransitGatewayConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.CreateTransitGatewayConnectionWithContext(ctx, createTransitGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createTransitGatewayConnectionPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"base_network_type": "classic", "name": "Transit_Service_BWTN_SJ_DL", "network_id": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "network_type": "vpc", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "base_connection_id": "975f58c1-afe7-469a-9727-7f3d720f2d32", "created_at": "2019-01-01T12:00:00.000Z", "local_bgp_asn": 64490, "local_gateway_ip": "192.168.100.1", "local_tunnel_ip": "192.168.129.2", "mtu": 9000, "network_account_id": "28e4d90ac7504be694471ee66e70d0d5", "prefix_filters": [{"action": "permit", "before": "1a15dcab-7e40-45e1-b7c5-bc690eaa9782", "created_at": "2019-01-01T12:00:00.000Z", "ge": 0, "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "le": 32, "prefix": "192.168.100.0/24", "updated_at": "2019-01-01T12:00:00.000Z"}], "prefix_filters_default": "permit", "remote_bgp_asn": 65010, "remote_gateway_ip": "10.242.63.12", "remote_tunnel_ip": "192.168.129.1", "request_status": "pending", "status": "attached", "updated_at": "2019-01-01T12:00:00.000Z", "zone": {"name": "us-south-1"}}`)
				}))
			})
			It(`Invoke CreateTransitGatewayConnection successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.CreateTransitGatewayConnection(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the TransitGatewayConnectionPrefixFilter model
				transitGatewayConnectionPrefixFilterModel := new(transitgatewayapisv1.TransitGatewayConnectionPrefixFilter)
				transitGatewayConnectionPrefixFilterModel.Action = core.StringPtr("permit")
				transitGatewayConnectionPrefixFilterModel.Ge = core.Int64Ptr(int64(0))
				transitGatewayConnectionPrefixFilterModel.Le = core.Int64Ptr(int64(32))
				transitGatewayConnectionPrefixFilterModel.Prefix = core.StringPtr("192.168.100.0/24")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(transitgatewayapisv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the TransitGatewayConnectionTemplateTransitGatewayConnectionNonRedundantGRETemplate model
				transitGatewayConnectionTemplateModel := new(transitgatewayapisv1.TransitGatewayConnectionTemplateTransitGatewayConnectionNonRedundantGRETemplate)
				transitGatewayConnectionTemplateModel.BaseConnectionID = core.StringPtr("975f58c1-afe7-469a-9727-7f3d720f2d32")
				transitGatewayConnectionTemplateModel.BaseNetworkType = core.StringPtr("classic")
				transitGatewayConnectionTemplateModel.LocalGatewayIp = core.StringPtr("192.168.100.1")
				transitGatewayConnectionTemplateModel.LocalTunnelIp = core.StringPtr("192.168.129.2")
				transitGatewayConnectionTemplateModel.Name = core.StringPtr("Transit_Service_BWTN_SJ_DL")
				transitGatewayConnectionTemplateModel.NetworkAccountID = core.StringPtr("28e4d90ac7504be694471ee66e70d0d5")
				transitGatewayConnectionTemplateModel.NetworkID = core.StringPtr("crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b")
				transitGatewayConnectionTemplateModel.NetworkType = core.StringPtr("vpc")
				transitGatewayConnectionTemplateModel.PrefixFilters = []transitgatewayapisv1.TransitGatewayConnectionPrefixFilter{*transitGatewayConnectionPrefixFilterModel}
				transitGatewayConnectionTemplateModel.PrefixFiltersDefault = core.StringPtr("permit")
				transitGatewayConnectionTemplateModel.RemoteBgpAsn = core.Int64Ptr(int64(65010))
				transitGatewayConnectionTemplateModel.RemoteGatewayIp = core.StringPtr("10.242.63.12")
				transitGatewayConnectionTemplateModel.RemoteTunnelIp = core.StringPtr("192.168.129.1")
				transitGatewayConnectionTemplateModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateTransitGatewayConnectionOptions model
				createTransitGatewayConnectionOptionsModel := new(transitgatewayapisv1.CreateTransitGatewayConnectionOptions)
				createTransitGatewayConnectionOptionsModel.TransitGatewayID = core.StringPtr("testString")
				createTransitGatewayConnectionOptionsModel.TransitGatewayConnectionTemplate = transitGatewayConnectionTemplateModel
				createTransitGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.CreateTransitGatewayConnection(createTransitGatewayConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateTransitGatewayConnection with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the TransitGatewayConnectionPrefixFilter model
				transitGatewayConnectionPrefixFilterModel := new(transitgatewayapisv1.TransitGatewayConnectionPrefixFilter)
				transitGatewayConnectionPrefixFilterModel.Action = core.StringPtr("permit")
				transitGatewayConnectionPrefixFilterModel.Ge = core.Int64Ptr(int64(0))
				transitGatewayConnectionPrefixFilterModel.Le = core.Int64Ptr(int64(32))
				transitGatewayConnectionPrefixFilterModel.Prefix = core.StringPtr("192.168.100.0/24")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(transitgatewayapisv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the TransitGatewayConnectionTemplateTransitGatewayConnectionNonRedundantGRETemplate model
				transitGatewayConnectionTemplateModel := new(transitgatewayapisv1.TransitGatewayConnectionTemplateTransitGatewayConnectionNonRedundantGRETemplate)
				transitGatewayConnectionTemplateModel.BaseConnectionID = core.StringPtr("975f58c1-afe7-469a-9727-7f3d720f2d32")
				transitGatewayConnectionTemplateModel.BaseNetworkType = core.StringPtr("classic")
				transitGatewayConnectionTemplateModel.LocalGatewayIp = core.StringPtr("192.168.100.1")
				transitGatewayConnectionTemplateModel.LocalTunnelIp = core.StringPtr("192.168.129.2")
				transitGatewayConnectionTemplateModel.Name = core.StringPtr("Transit_Service_BWTN_SJ_DL")
				transitGatewayConnectionTemplateModel.NetworkAccountID = core.StringPtr("28e4d90ac7504be694471ee66e70d0d5")
				transitGatewayConnectionTemplateModel.NetworkID = core.StringPtr("crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b")
				transitGatewayConnectionTemplateModel.NetworkType = core.StringPtr("vpc")
				transitGatewayConnectionTemplateModel.PrefixFilters = []transitgatewayapisv1.TransitGatewayConnectionPrefixFilter{*transitGatewayConnectionPrefixFilterModel}
				transitGatewayConnectionTemplateModel.PrefixFiltersDefault = core.StringPtr("permit")
				transitGatewayConnectionTemplateModel.RemoteBgpAsn = core.Int64Ptr(int64(65010))
				transitGatewayConnectionTemplateModel.RemoteGatewayIp = core.StringPtr("10.242.63.12")
				transitGatewayConnectionTemplateModel.RemoteTunnelIp = core.StringPtr("192.168.129.1")
				transitGatewayConnectionTemplateModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateTransitGatewayConnectionOptions model
				createTransitGatewayConnectionOptionsModel := new(transitgatewayapisv1.CreateTransitGatewayConnectionOptions)
				createTransitGatewayConnectionOptionsModel.TransitGatewayID = core.StringPtr("testString")
				createTransitGatewayConnectionOptionsModel.TransitGatewayConnectionTemplate = transitGatewayConnectionTemplateModel
				createTransitGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.CreateTransitGatewayConnection(createTransitGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateTransitGatewayConnectionOptions model with no property values
				createTransitGatewayConnectionOptionsModelNew := new(transitgatewayapisv1.CreateTransitGatewayConnectionOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.CreateTransitGatewayConnection(createTransitGatewayConnectionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateTransitGatewayConnection successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the TransitGatewayConnectionPrefixFilter model
				transitGatewayConnectionPrefixFilterModel := new(transitgatewayapisv1.TransitGatewayConnectionPrefixFilter)
				transitGatewayConnectionPrefixFilterModel.Action = core.StringPtr("permit")
				transitGatewayConnectionPrefixFilterModel.Ge = core.Int64Ptr(int64(0))
				transitGatewayConnectionPrefixFilterModel.Le = core.Int64Ptr(int64(32))
				transitGatewayConnectionPrefixFilterModel.Prefix = core.StringPtr("192.168.100.0/24")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(transitgatewayapisv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the TransitGatewayConnectionTemplateTransitGatewayConnectionNonRedundantGRETemplate model
				transitGatewayConnectionTemplateModel := new(transitgatewayapisv1.TransitGatewayConnectionTemplateTransitGatewayConnectionNonRedundantGRETemplate)
				transitGatewayConnectionTemplateModel.BaseConnectionID = core.StringPtr("975f58c1-afe7-469a-9727-7f3d720f2d32")
				transitGatewayConnectionTemplateModel.BaseNetworkType = core.StringPtr("classic")
				transitGatewayConnectionTemplateModel.LocalGatewayIp = core.StringPtr("192.168.100.1")
				transitGatewayConnectionTemplateModel.LocalTunnelIp = core.StringPtr("192.168.129.2")
				transitGatewayConnectionTemplateModel.Name = core.StringPtr("Transit_Service_BWTN_SJ_DL")
				transitGatewayConnectionTemplateModel.NetworkAccountID = core.StringPtr("28e4d90ac7504be694471ee66e70d0d5")
				transitGatewayConnectionTemplateModel.NetworkID = core.StringPtr("crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b")
				transitGatewayConnectionTemplateModel.NetworkType = core.StringPtr("vpc")
				transitGatewayConnectionTemplateModel.PrefixFilters = []transitgatewayapisv1.TransitGatewayConnectionPrefixFilter{*transitGatewayConnectionPrefixFilterModel}
				transitGatewayConnectionTemplateModel.PrefixFiltersDefault = core.StringPtr("permit")
				transitGatewayConnectionTemplateModel.RemoteBgpAsn = core.Int64Ptr(int64(65010))
				transitGatewayConnectionTemplateModel.RemoteGatewayIp = core.StringPtr("10.242.63.12")
				transitGatewayConnectionTemplateModel.RemoteTunnelIp = core.StringPtr("192.168.129.1")
				transitGatewayConnectionTemplateModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateTransitGatewayConnectionOptions model
				createTransitGatewayConnectionOptionsModel := new(transitgatewayapisv1.CreateTransitGatewayConnectionOptions)
				createTransitGatewayConnectionOptionsModel.TransitGatewayID = core.StringPtr("testString")
				createTransitGatewayConnectionOptionsModel.TransitGatewayConnectionTemplate = transitGatewayConnectionTemplateModel
				createTransitGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.CreateTransitGatewayConnection(createTransitGatewayConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteTransitGatewayConnection(deleteTransitGatewayConnectionOptions *DeleteTransitGatewayConnectionOptions)`, func() {
		version := "testString"
		deleteTransitGatewayConnectionPath := "/transit_gateways/testString/connections/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteTransitGatewayConnectionPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteTransitGatewayConnection successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := transitGatewayApisService.DeleteTransitGatewayConnection(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteTransitGatewayConnectionOptions model
				deleteTransitGatewayConnectionOptionsModel := new(transitgatewayapisv1.DeleteTransitGatewayConnectionOptions)
				deleteTransitGatewayConnectionOptionsModel.TransitGatewayID = core.StringPtr("testString")
				deleteTransitGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				deleteTransitGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = transitGatewayApisService.DeleteTransitGatewayConnection(deleteTransitGatewayConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteTransitGatewayConnection with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the DeleteTransitGatewayConnectionOptions model
				deleteTransitGatewayConnectionOptionsModel := new(transitgatewayapisv1.DeleteTransitGatewayConnectionOptions)
				deleteTransitGatewayConnectionOptionsModel.TransitGatewayID = core.StringPtr("testString")
				deleteTransitGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				deleteTransitGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := transitGatewayApisService.DeleteTransitGatewayConnection(deleteTransitGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteTransitGatewayConnectionOptions model with no property values
				deleteTransitGatewayConnectionOptionsModelNew := new(transitgatewayapisv1.DeleteTransitGatewayConnectionOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = transitGatewayApisService.DeleteTransitGatewayConnection(deleteTransitGatewayConnectionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetTransitGatewayConnection(getTransitGatewayConnectionOptions *GetTransitGatewayConnectionOptions) - Operation response error`, func() {
		version := "testString"
		getTransitGatewayConnectionPath := "/transit_gateways/testString/connections/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTransitGatewayConnectionPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetTransitGatewayConnection with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetTransitGatewayConnectionOptions model
				getTransitGatewayConnectionOptionsModel := new(transitgatewayapisv1.GetTransitGatewayConnectionOptions)
				getTransitGatewayConnectionOptionsModel.TransitGatewayID = core.StringPtr("testString")
				getTransitGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				getTransitGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.GetTransitGatewayConnection(getTransitGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.GetTransitGatewayConnection(getTransitGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetTransitGatewayConnection(getTransitGatewayConnectionOptions *GetTransitGatewayConnectionOptions)`, func() {
		version := "testString"
		getTransitGatewayConnectionPath := "/transit_gateways/testString/connections/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTransitGatewayConnectionPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"base_network_type": "classic", "name": "Transit_Service_BWTN_SJ_DL", "network_id": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "network_type": "vpc", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "base_connection_id": "975f58c1-afe7-469a-9727-7f3d720f2d32", "created_at": "2019-01-01T12:00:00.000Z", "local_bgp_asn": 64490, "local_gateway_ip": "192.168.100.1", "local_tunnel_ip": "192.168.129.2", "mtu": 9000, "network_account_id": "28e4d90ac7504be694471ee66e70d0d5", "prefix_filters": [{"action": "permit", "before": "1a15dcab-7e40-45e1-b7c5-bc690eaa9782", "created_at": "2019-01-01T12:00:00.000Z", "ge": 0, "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "le": 32, "prefix": "192.168.100.0/24", "updated_at": "2019-01-01T12:00:00.000Z"}], "prefix_filters_default": "permit", "remote_bgp_asn": 65010, "remote_gateway_ip": "10.242.63.12", "remote_tunnel_ip": "192.168.129.1", "request_status": "pending", "status": "attached", "updated_at": "2019-01-01T12:00:00.000Z", "zone": {"name": "us-south-1"}}`)
				}))
			})
			It(`Invoke GetTransitGatewayConnection successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the GetTransitGatewayConnectionOptions model
				getTransitGatewayConnectionOptionsModel := new(transitgatewayapisv1.GetTransitGatewayConnectionOptions)
				getTransitGatewayConnectionOptionsModel.TransitGatewayID = core.StringPtr("testString")
				getTransitGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				getTransitGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.GetTransitGatewayConnectionWithContext(ctx, getTransitGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.GetTransitGatewayConnection(getTransitGatewayConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.GetTransitGatewayConnectionWithContext(ctx, getTransitGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTransitGatewayConnectionPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"base_network_type": "classic", "name": "Transit_Service_BWTN_SJ_DL", "network_id": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "network_type": "vpc", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "base_connection_id": "975f58c1-afe7-469a-9727-7f3d720f2d32", "created_at": "2019-01-01T12:00:00.000Z", "local_bgp_asn": 64490, "local_gateway_ip": "192.168.100.1", "local_tunnel_ip": "192.168.129.2", "mtu": 9000, "network_account_id": "28e4d90ac7504be694471ee66e70d0d5", "prefix_filters": [{"action": "permit", "before": "1a15dcab-7e40-45e1-b7c5-bc690eaa9782", "created_at": "2019-01-01T12:00:00.000Z", "ge": 0, "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "le": 32, "prefix": "192.168.100.0/24", "updated_at": "2019-01-01T12:00:00.000Z"}], "prefix_filters_default": "permit", "remote_bgp_asn": 65010, "remote_gateway_ip": "10.242.63.12", "remote_tunnel_ip": "192.168.129.1", "request_status": "pending", "status": "attached", "updated_at": "2019-01-01T12:00:00.000Z", "zone": {"name": "us-south-1"}}`)
				}))
			})
			It(`Invoke GetTransitGatewayConnection successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.GetTransitGatewayConnection(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetTransitGatewayConnectionOptions model
				getTransitGatewayConnectionOptionsModel := new(transitgatewayapisv1.GetTransitGatewayConnectionOptions)
				getTransitGatewayConnectionOptionsModel.TransitGatewayID = core.StringPtr("testString")
				getTransitGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				getTransitGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.GetTransitGatewayConnection(getTransitGatewayConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetTransitGatewayConnection with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetTransitGatewayConnectionOptions model
				getTransitGatewayConnectionOptionsModel := new(transitgatewayapisv1.GetTransitGatewayConnectionOptions)
				getTransitGatewayConnectionOptionsModel.TransitGatewayID = core.StringPtr("testString")
				getTransitGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				getTransitGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.GetTransitGatewayConnection(getTransitGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetTransitGatewayConnectionOptions model with no property values
				getTransitGatewayConnectionOptionsModelNew := new(transitgatewayapisv1.GetTransitGatewayConnectionOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.GetTransitGatewayConnection(getTransitGatewayConnectionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetTransitGatewayConnection successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetTransitGatewayConnectionOptions model
				getTransitGatewayConnectionOptionsModel := new(transitgatewayapisv1.GetTransitGatewayConnectionOptions)
				getTransitGatewayConnectionOptionsModel.TransitGatewayID = core.StringPtr("testString")
				getTransitGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				getTransitGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.GetTransitGatewayConnection(getTransitGatewayConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateTransitGatewayConnection(updateTransitGatewayConnectionOptions *UpdateTransitGatewayConnectionOptions) - Operation response error`, func() {
		version := "testString"
		updateTransitGatewayConnectionPath := "/transit_gateways/testString/connections/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateTransitGatewayConnectionPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateTransitGatewayConnection with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the UpdateTransitGatewayConnectionOptions model
				updateTransitGatewayConnectionOptionsModel := new(transitgatewayapisv1.UpdateTransitGatewayConnectionOptions)
				updateTransitGatewayConnectionOptionsModel.TransitGatewayID = core.StringPtr("testString")
				updateTransitGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				updateTransitGatewayConnectionOptionsModel.Name = core.StringPtr("Transit_Service_BWTN_SJ_DL")
				updateTransitGatewayConnectionOptionsModel.PrefixFiltersDefault = core.StringPtr("permit")
				updateTransitGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.UpdateTransitGatewayConnection(updateTransitGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.UpdateTransitGatewayConnection(updateTransitGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateTransitGatewayConnection(updateTransitGatewayConnectionOptions *UpdateTransitGatewayConnectionOptions)`, func() {
		version := "testString"
		updateTransitGatewayConnectionPath := "/transit_gateways/testString/connections/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateTransitGatewayConnectionPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"base_network_type": "classic", "name": "Transit_Service_BWTN_SJ_DL", "network_id": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "network_type": "vpc", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "base_connection_id": "975f58c1-afe7-469a-9727-7f3d720f2d32", "created_at": "2019-01-01T12:00:00.000Z", "local_bgp_asn": 64490, "local_gateway_ip": "192.168.100.1", "local_tunnel_ip": "192.168.129.2", "mtu": 9000, "network_account_id": "28e4d90ac7504be694471ee66e70d0d5", "prefix_filters": [{"action": "permit", "before": "1a15dcab-7e40-45e1-b7c5-bc690eaa9782", "created_at": "2019-01-01T12:00:00.000Z", "ge": 0, "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "le": 32, "prefix": "192.168.100.0/24", "updated_at": "2019-01-01T12:00:00.000Z"}], "prefix_filters_default": "permit", "remote_bgp_asn": 65010, "remote_gateway_ip": "10.242.63.12", "remote_tunnel_ip": "192.168.129.1", "request_status": "pending", "status": "attached", "updated_at": "2019-01-01T12:00:00.000Z", "zone": {"name": "us-south-1"}}`)
				}))
			})
			It(`Invoke UpdateTransitGatewayConnection successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the UpdateTransitGatewayConnectionOptions model
				updateTransitGatewayConnectionOptionsModel := new(transitgatewayapisv1.UpdateTransitGatewayConnectionOptions)
				updateTransitGatewayConnectionOptionsModel.TransitGatewayID = core.StringPtr("testString")
				updateTransitGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				updateTransitGatewayConnectionOptionsModel.Name = core.StringPtr("Transit_Service_BWTN_SJ_DL")
				updateTransitGatewayConnectionOptionsModel.PrefixFiltersDefault = core.StringPtr("permit")
				updateTransitGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.UpdateTransitGatewayConnectionWithContext(ctx, updateTransitGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.UpdateTransitGatewayConnection(updateTransitGatewayConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.UpdateTransitGatewayConnectionWithContext(ctx, updateTransitGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateTransitGatewayConnectionPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"base_network_type": "classic", "name": "Transit_Service_BWTN_SJ_DL", "network_id": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "network_type": "vpc", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "base_connection_id": "975f58c1-afe7-469a-9727-7f3d720f2d32", "created_at": "2019-01-01T12:00:00.000Z", "local_bgp_asn": 64490, "local_gateway_ip": "192.168.100.1", "local_tunnel_ip": "192.168.129.2", "mtu": 9000, "network_account_id": "28e4d90ac7504be694471ee66e70d0d5", "prefix_filters": [{"action": "permit", "before": "1a15dcab-7e40-45e1-b7c5-bc690eaa9782", "created_at": "2019-01-01T12:00:00.000Z", "ge": 0, "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "le": 32, "prefix": "192.168.100.0/24", "updated_at": "2019-01-01T12:00:00.000Z"}], "prefix_filters_default": "permit", "remote_bgp_asn": 65010, "remote_gateway_ip": "10.242.63.12", "remote_tunnel_ip": "192.168.129.1", "request_status": "pending", "status": "attached", "updated_at": "2019-01-01T12:00:00.000Z", "zone": {"name": "us-south-1"}}`)
				}))
			})
			It(`Invoke UpdateTransitGatewayConnection successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.UpdateTransitGatewayConnection(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateTransitGatewayConnectionOptions model
				updateTransitGatewayConnectionOptionsModel := new(transitgatewayapisv1.UpdateTransitGatewayConnectionOptions)
				updateTransitGatewayConnectionOptionsModel.TransitGatewayID = core.StringPtr("testString")
				updateTransitGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				updateTransitGatewayConnectionOptionsModel.Name = core.StringPtr("Transit_Service_BWTN_SJ_DL")
				updateTransitGatewayConnectionOptionsModel.PrefixFiltersDefault = core.StringPtr("permit")
				updateTransitGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.UpdateTransitGatewayConnection(updateTransitGatewayConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateTransitGatewayConnection with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the UpdateTransitGatewayConnectionOptions model
				updateTransitGatewayConnectionOptionsModel := new(transitgatewayapisv1.UpdateTransitGatewayConnectionOptions)
				updateTransitGatewayConnectionOptionsModel.TransitGatewayID = core.StringPtr("testString")
				updateTransitGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				updateTransitGatewayConnectionOptionsModel.Name = core.StringPtr("Transit_Service_BWTN_SJ_DL")
				updateTransitGatewayConnectionOptionsModel.PrefixFiltersDefault = core.StringPtr("permit")
				updateTransitGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.UpdateTransitGatewayConnection(updateTransitGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateTransitGatewayConnectionOptions model with no property values
				updateTransitGatewayConnectionOptionsModelNew := new(transitgatewayapisv1.UpdateTransitGatewayConnectionOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.UpdateTransitGatewayConnection(updateTransitGatewayConnectionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateTransitGatewayConnection successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the UpdateTransitGatewayConnectionOptions model
				updateTransitGatewayConnectionOptionsModel := new(transitgatewayapisv1.UpdateTransitGatewayConnectionOptions)
				updateTransitGatewayConnectionOptionsModel.TransitGatewayID = core.StringPtr("testString")
				updateTransitGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				updateTransitGatewayConnectionOptionsModel.Name = core.StringPtr("Transit_Service_BWTN_SJ_DL")
				updateTransitGatewayConnectionOptionsModel.PrefixFiltersDefault = core.StringPtr("permit")
				updateTransitGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.UpdateTransitGatewayConnection(updateTransitGatewayConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateTransitGatewayConnectionActions(createTransitGatewayConnectionActionsOptions *CreateTransitGatewayConnectionActionsOptions)`, func() {
		version := "testString"
		createTransitGatewayConnectionActionsPath := "/transit_gateways/testString/connections/testString/actions"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createTransitGatewayConnectionActionsPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke CreateTransitGatewayConnectionActions successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := transitGatewayApisService.CreateTransitGatewayConnectionActions(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the CreateTransitGatewayConnectionActionsOptions model
				createTransitGatewayConnectionActionsOptionsModel := new(transitgatewayapisv1.CreateTransitGatewayConnectionActionsOptions)
				createTransitGatewayConnectionActionsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				createTransitGatewayConnectionActionsOptionsModel.ID = core.StringPtr("testString")
				createTransitGatewayConnectionActionsOptionsModel.Action = core.StringPtr("approve")
				createTransitGatewayConnectionActionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = transitGatewayApisService.CreateTransitGatewayConnectionActions(createTransitGatewayConnectionActionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke CreateTransitGatewayConnectionActions with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateTransitGatewayConnectionActionsOptions model
				createTransitGatewayConnectionActionsOptionsModel := new(transitgatewayapisv1.CreateTransitGatewayConnectionActionsOptions)
				createTransitGatewayConnectionActionsOptionsModel.TransitGatewayID = core.StringPtr("testString")
				createTransitGatewayConnectionActionsOptionsModel.ID = core.StringPtr("testString")
				createTransitGatewayConnectionActionsOptionsModel.Action = core.StringPtr("approve")
				createTransitGatewayConnectionActionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := transitGatewayApisService.CreateTransitGatewayConnectionActions(createTransitGatewayConnectionActionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the CreateTransitGatewayConnectionActionsOptions model with no property values
				createTransitGatewayConnectionActionsOptionsModelNew := new(transitgatewayapisv1.CreateTransitGatewayConnectionActionsOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = transitGatewayApisService.CreateTransitGatewayConnectionActions(createTransitGatewayConnectionActionsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListTransitGatewaysOps(listTransitGatewaysOpsOptions *ListTransitGatewaysOpsOptions) - Operation response error`, func() {
		version := "testString"
		listTransitGatewaysOpsPath := "/ops/transit_gateways"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewaysOpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["route_target"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["status"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["template_version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["location"]).To(Equal([]string{"testString"}))
					// TODO: Add check for is_deletable query parameter
					Expect(req.URL.Query()["created_at"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["updated_at"]).To(Equal([]string{"testString"}))
					// TODO: Add check for is_billing query parameter
					Expect(req.URL.Query()["leak_route_distinguisher"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListTransitGatewaysOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewaysOpsOptions model
				listTransitGatewaysOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewaysOpsOptions)
				listTransitGatewaysOpsOptionsModel.AccountID = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.RouteTarget = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.Status = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.Name = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.TemplateVersion = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.Start = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listTransitGatewaysOpsOptionsModel.Location = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.IsDeletable = core.BoolPtr(true)
				listTransitGatewaysOpsOptionsModel.CreatedAt = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.UpdatedAt = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.IsBilling = core.BoolPtr(true)
				listTransitGatewaysOpsOptionsModel.LeakRouteDistinguisher = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.ListTransitGatewaysOps(listTransitGatewaysOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.ListTransitGatewaysOps(listTransitGatewaysOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListTransitGatewaysOps(listTransitGatewaysOpsOptions *ListTransitGatewaysOpsOptions)`, func() {
		version := "testString"
		listTransitGatewaysOpsPath := "/ops/transit_gateways"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewaysOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["route_target"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["status"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["template_version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["location"]).To(Equal([]string{"testString"}))
					// TODO: Add check for is_deletable query parameter
					Expect(req.URL.Query()["created_at"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["updated_at"]).To(Equal([]string{"testString"}))
					// TODO: Add check for is_billing query parameter
					Expect(req.URL.Query()["leak_route_distinguisher"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://internal.transit.cloud.ibm.com/v1"}, "limit": 20, "next": {"href": "https://internal.transit.cloud.ibm.com/v1"}, "total_count": 132, "transit_gateways": [{"id": "ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "crn": "crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "name": "my-ops-transit-gateway-in-TransitGateway", "location": "us-south", "created_at": "2019-01-01T12:00:00.000Z", "global": true, "resource_group": {"id": "56969d6043e9465c883cb9f7363e78e8", "href": "https://resource-manager.bluemix.net/v1/resource_groups/56969d6043e9465c883cb9f7363e78e8"}, "status": "up", "updated_at": "2019-01-01T12:00:00.000Z", "account_id": "28e4d90ac7504be694471ee66e70d0d5", "database_id": 234, "is_billing": true, "is_deletable": true, "leak_route_distinguisher": "47902:3255120092", "route_distinguisher": "47902:3255120092", "route_target": "47902:3255120092", "template_version": "v1"}]}`)
				}))
			})
			It(`Invoke ListTransitGatewaysOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the ListTransitGatewaysOpsOptions model
				listTransitGatewaysOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewaysOpsOptions)
				listTransitGatewaysOpsOptionsModel.AccountID = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.RouteTarget = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.Status = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.Name = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.TemplateVersion = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.Start = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listTransitGatewaysOpsOptionsModel.Location = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.IsDeletable = core.BoolPtr(true)
				listTransitGatewaysOpsOptionsModel.CreatedAt = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.UpdatedAt = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.IsBilling = core.BoolPtr(true)
				listTransitGatewaysOpsOptionsModel.LeakRouteDistinguisher = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.ListTransitGatewaysOpsWithContext(ctx, listTransitGatewaysOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.ListTransitGatewaysOps(listTransitGatewaysOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.ListTransitGatewaysOpsWithContext(ctx, listTransitGatewaysOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewaysOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["route_target"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["status"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["template_version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["location"]).To(Equal([]string{"testString"}))
					// TODO: Add check for is_deletable query parameter
					Expect(req.URL.Query()["created_at"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["updated_at"]).To(Equal([]string{"testString"}))
					// TODO: Add check for is_billing query parameter
					Expect(req.URL.Query()["leak_route_distinguisher"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://internal.transit.cloud.ibm.com/v1"}, "limit": 20, "next": {"href": "https://internal.transit.cloud.ibm.com/v1"}, "total_count": 132, "transit_gateways": [{"id": "ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "crn": "crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "name": "my-ops-transit-gateway-in-TransitGateway", "location": "us-south", "created_at": "2019-01-01T12:00:00.000Z", "global": true, "resource_group": {"id": "56969d6043e9465c883cb9f7363e78e8", "href": "https://resource-manager.bluemix.net/v1/resource_groups/56969d6043e9465c883cb9f7363e78e8"}, "status": "up", "updated_at": "2019-01-01T12:00:00.000Z", "account_id": "28e4d90ac7504be694471ee66e70d0d5", "database_id": 234, "is_billing": true, "is_deletable": true, "leak_route_distinguisher": "47902:3255120092", "route_distinguisher": "47902:3255120092", "route_target": "47902:3255120092", "template_version": "v1"}]}`)
				}))
			})
			It(`Invoke ListTransitGatewaysOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.ListTransitGatewaysOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListTransitGatewaysOpsOptions model
				listTransitGatewaysOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewaysOpsOptions)
				listTransitGatewaysOpsOptionsModel.AccountID = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.RouteTarget = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.Status = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.Name = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.TemplateVersion = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.Start = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listTransitGatewaysOpsOptionsModel.Location = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.IsDeletable = core.BoolPtr(true)
				listTransitGatewaysOpsOptionsModel.CreatedAt = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.UpdatedAt = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.IsBilling = core.BoolPtr(true)
				listTransitGatewaysOpsOptionsModel.LeakRouteDistinguisher = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.ListTransitGatewaysOps(listTransitGatewaysOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListTransitGatewaysOps with error: Operation request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewaysOpsOptions model
				listTransitGatewaysOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewaysOpsOptions)
				listTransitGatewaysOpsOptionsModel.AccountID = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.RouteTarget = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.Status = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.Name = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.TemplateVersion = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.Start = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listTransitGatewaysOpsOptionsModel.Location = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.IsDeletable = core.BoolPtr(true)
				listTransitGatewaysOpsOptionsModel.CreatedAt = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.UpdatedAt = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.IsBilling = core.BoolPtr(true)
				listTransitGatewaysOpsOptionsModel.LeakRouteDistinguisher = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.ListTransitGatewaysOps(listTransitGatewaysOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListTransitGatewaysOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewaysOpsOptions model
				listTransitGatewaysOpsOptionsModel := new(transitgatewayapisv1.ListTransitGatewaysOpsOptions)
				listTransitGatewaysOpsOptionsModel.AccountID = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.RouteTarget = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.Status = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.Name = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.TemplateVersion = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.Start = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listTransitGatewaysOpsOptionsModel.Location = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.IsDeletable = core.BoolPtr(true)
				listTransitGatewaysOpsOptionsModel.CreatedAt = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.UpdatedAt = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.IsBilling = core.BoolPtr(true)
				listTransitGatewaysOpsOptionsModel.LeakRouteDistinguisher = core.StringPtr("testString")
				listTransitGatewaysOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.ListTransitGatewaysOps(listTransitGatewaysOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Test pagination helper method on response`, func() {
			It(`Invoke GetNextStart successfully`, func() {
				responseObject := new(transitgatewayapisv1.TransitGatewayOpsCollection)
				nextObject := new(transitgatewayapisv1.NextOps)
				nextObject.Href = core.StringPtr("ibm.com?start=abc-123")
				responseObject.Next = nextObject
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(Equal(core.StringPtr("abc-123")))
			})
			It(`Invoke GetNextStart without a "Next" property in the response`, func() {
				responseObject := new(transitgatewayapisv1.TransitGatewayOpsCollection)
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(BeNil())
			})
			It(`Invoke GetNextStart without any query params in the "Next" URL`, func() {
				responseObject := new(transitgatewayapisv1.TransitGatewayOpsCollection)
				nextObject := new(transitgatewayapisv1.NextOps)
				nextObject.Href = core.StringPtr("ibm.com")
				responseObject.Next = nextObject
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(BeNil())
			})
		})
		Context(`Using mock server endpoint - paginated response`, func() {
			BeforeEach(func() {
				var requestNumber int = 0
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewaysOpsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					requestNumber++
					if requestNumber == 1 {
						fmt.Fprintf(res, "%s", `{"next":{"href":"https://myhost.com/somePath?start=1"},"transit_gateways":[{"id":"ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4","crn":"crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4","name":"my-ops-transit-gateway-in-TransitGateway","location":"us-south","created_at":"2019-01-01T12:00:00.000Z","global":true,"resource_group":{"id":"56969d6043e9465c883cb9f7363e78e8","href":"https://resource-manager.bluemix.net/v1/resource_groups/56969d6043e9465c883cb9f7363e78e8"},"status":"up","updated_at":"2019-01-01T12:00:00.000Z","account_id":"28e4d90ac7504be694471ee66e70d0d5","database_id":234,"is_billing":true,"is_deletable":true,"leak_route_distinguisher":"47902:3255120092","route_distinguisher":"47902:3255120092","route_target":"47902:3255120092","template_version":"v1"}],"total_count":2,"limit":1}`)
					} else if requestNumber == 2 {
						fmt.Fprintf(res, "%s", `{"transit_gateways":[{"id":"ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4","crn":"crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4","name":"my-ops-transit-gateway-in-TransitGateway","location":"us-south","created_at":"2019-01-01T12:00:00.000Z","global":true,"resource_group":{"id":"56969d6043e9465c883cb9f7363e78e8","href":"https://resource-manager.bluemix.net/v1/resource_groups/56969d6043e9465c883cb9f7363e78e8"},"status":"up","updated_at":"2019-01-01T12:00:00.000Z","account_id":"28e4d90ac7504be694471ee66e70d0d5","database_id":234,"is_billing":true,"is_deletable":true,"leak_route_distinguisher":"47902:3255120092","route_distinguisher":"47902:3255120092","route_target":"47902:3255120092","template_version":"v1"}],"total_count":2,"limit":1}`)
					} else {
						res.WriteHeader(400)
					}
				}))
			})
			It(`Use TransitGatewaysOpsPager.GetNext successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				listTransitGatewaysOpsOptionsModel := &transitgatewayapisv1.ListTransitGatewaysOpsOptions{
					AccountID: core.StringPtr("testString"),
					RouteTarget: core.StringPtr("testString"),
					Status: core.StringPtr("testString"),
					Name: core.StringPtr("testString"),
					TemplateVersion: core.StringPtr("testString"),
					Limit: core.Int64Ptr(int64(10)),
					Location: core.StringPtr("testString"),
					IsDeletable: core.BoolPtr(true),
					CreatedAt: core.StringPtr("testString"),
					UpdatedAt: core.StringPtr("testString"),
					IsBilling: core.BoolPtr(true),
					LeakRouteDistinguisher: core.StringPtr("testString"),
				}

				pager, err := transitGatewayApisService.NewTransitGatewaysOpsPager(listTransitGatewaysOpsOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				var allResults []transitgatewayapisv1.TransitGatewayOps
				for pager.HasNext() {
					nextPage, err := pager.GetNext()
					Expect(err).To(BeNil())
					Expect(nextPage).ToNot(BeNil())
					allResults = append(allResults, nextPage...)
				}
				Expect(len(allResults)).To(Equal(2))
			})
			It(`Use TransitGatewaysOpsPager.GetAll successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				listTransitGatewaysOpsOptionsModel := &transitgatewayapisv1.ListTransitGatewaysOpsOptions{
					AccountID: core.StringPtr("testString"),
					RouteTarget: core.StringPtr("testString"),
					Status: core.StringPtr("testString"),
					Name: core.StringPtr("testString"),
					TemplateVersion: core.StringPtr("testString"),
					Limit: core.Int64Ptr(int64(10)),
					Location: core.StringPtr("testString"),
					IsDeletable: core.BoolPtr(true),
					CreatedAt: core.StringPtr("testString"),
					UpdatedAt: core.StringPtr("testString"),
					IsBilling: core.BoolPtr(true),
					LeakRouteDistinguisher: core.StringPtr("testString"),
				}

				pager, err := transitGatewayApisService.NewTransitGatewaysOpsPager(listTransitGatewaysOpsOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				allResults, err := pager.GetAll()
				Expect(err).To(BeNil())
				Expect(allResults).ToNot(BeNil())
				Expect(len(allResults)).To(Equal(2))
			})
		})
	})
	Describe(`DeleteTransitGatewayOps(deleteTransitGatewayOpsOptions *DeleteTransitGatewayOpsOptions)`, func() {
		version := "testString"
		deleteTransitGatewayOpsPath := "/ops/transit_gateways/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteTransitGatewayOpsPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteTransitGatewayOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := transitGatewayApisService.DeleteTransitGatewayOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteTransitGatewayOpsOptions model
				deleteTransitGatewayOpsOptionsModel := new(transitgatewayapisv1.DeleteTransitGatewayOpsOptions)
				deleteTransitGatewayOpsOptionsModel.ID = core.StringPtr("testString")
				deleteTransitGatewayOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = transitGatewayApisService.DeleteTransitGatewayOps(deleteTransitGatewayOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteTransitGatewayOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the DeleteTransitGatewayOpsOptions model
				deleteTransitGatewayOpsOptionsModel := new(transitgatewayapisv1.DeleteTransitGatewayOpsOptions)
				deleteTransitGatewayOpsOptionsModel.ID = core.StringPtr("testString")
				deleteTransitGatewayOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := transitGatewayApisService.DeleteTransitGatewayOps(deleteTransitGatewayOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteTransitGatewayOpsOptions model with no property values
				deleteTransitGatewayOpsOptionsModelNew := new(transitgatewayapisv1.DeleteTransitGatewayOpsOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = transitGatewayApisService.DeleteTransitGatewayOps(deleteTransitGatewayOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetTransitGatewaysOps(getTransitGatewaysOpsOptions *GetTransitGatewaysOpsOptions) - Operation response error`, func() {
		version := "testString"
		getTransitGatewaysOpsPath := "/ops/transit_gateways/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTransitGatewaysOpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetTransitGatewaysOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetTransitGatewaysOpsOptions model
				getTransitGatewaysOpsOptionsModel := new(transitgatewayapisv1.GetTransitGatewaysOpsOptions)
				getTransitGatewaysOpsOptionsModel.ID = core.StringPtr("testString")
				getTransitGatewaysOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.GetTransitGatewaysOps(getTransitGatewaysOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.GetTransitGatewaysOps(getTransitGatewaysOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetTransitGatewaysOps(getTransitGatewaysOpsOptions *GetTransitGatewaysOpsOptions)`, func() {
		version := "testString"
		getTransitGatewaysOpsPath := "/ops/transit_gateways/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTransitGatewaysOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "crn": "crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "name": "my-ops-transit-gateway-in-TransitGateway", "location": "us-south", "created_at": "2019-01-01T12:00:00.000Z", "global": true, "resource_group": {"id": "56969d6043e9465c883cb9f7363e78e8", "href": "https://resource-manager.bluemix.net/v1/resource_groups/56969d6043e9465c883cb9f7363e78e8"}, "status": "up", "updated_at": "2019-01-01T12:00:00.000Z", "account_id": "28e4d90ac7504be694471ee66e70d0d5", "database_id": 234, "is_billing": true, "is_deletable": true, "leak_route_distinguisher": "47902:3255120092", "route_distinguisher": "47902:3255120092", "route_target": "47902:3255120092", "template_version": "v1"}`)
				}))
			})
			It(`Invoke GetTransitGatewaysOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the GetTransitGatewaysOpsOptions model
				getTransitGatewaysOpsOptionsModel := new(transitgatewayapisv1.GetTransitGatewaysOpsOptions)
				getTransitGatewaysOpsOptionsModel.ID = core.StringPtr("testString")
				getTransitGatewaysOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.GetTransitGatewaysOpsWithContext(ctx, getTransitGatewaysOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.GetTransitGatewaysOps(getTransitGatewaysOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.GetTransitGatewaysOpsWithContext(ctx, getTransitGatewaysOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTransitGatewaysOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "crn": "crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "name": "my-ops-transit-gateway-in-TransitGateway", "location": "us-south", "created_at": "2019-01-01T12:00:00.000Z", "global": true, "resource_group": {"id": "56969d6043e9465c883cb9f7363e78e8", "href": "https://resource-manager.bluemix.net/v1/resource_groups/56969d6043e9465c883cb9f7363e78e8"}, "status": "up", "updated_at": "2019-01-01T12:00:00.000Z", "account_id": "28e4d90ac7504be694471ee66e70d0d5", "database_id": 234, "is_billing": true, "is_deletable": true, "leak_route_distinguisher": "47902:3255120092", "route_distinguisher": "47902:3255120092", "route_target": "47902:3255120092", "template_version": "v1"}`)
				}))
			})
			It(`Invoke GetTransitGatewaysOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.GetTransitGatewaysOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetTransitGatewaysOpsOptions model
				getTransitGatewaysOpsOptionsModel := new(transitgatewayapisv1.GetTransitGatewaysOpsOptions)
				getTransitGatewaysOpsOptionsModel.ID = core.StringPtr("testString")
				getTransitGatewaysOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.GetTransitGatewaysOps(getTransitGatewaysOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetTransitGatewaysOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetTransitGatewaysOpsOptions model
				getTransitGatewaysOpsOptionsModel := new(transitgatewayapisv1.GetTransitGatewaysOpsOptions)
				getTransitGatewaysOpsOptionsModel.ID = core.StringPtr("testString")
				getTransitGatewaysOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.GetTransitGatewaysOps(getTransitGatewaysOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetTransitGatewaysOpsOptions model with no property values
				getTransitGatewaysOpsOptionsModelNew := new(transitgatewayapisv1.GetTransitGatewaysOpsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.GetTransitGatewaysOps(getTransitGatewaysOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetTransitGatewaysOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetTransitGatewaysOpsOptions model
				getTransitGatewaysOpsOptionsModel := new(transitgatewayapisv1.GetTransitGatewaysOpsOptions)
				getTransitGatewaysOpsOptionsModel.ID = core.StringPtr("testString")
				getTransitGatewaysOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.GetTransitGatewaysOps(getTransitGatewaysOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateTransitGatewayOps(updateTransitGatewayOpsOptions *UpdateTransitGatewayOpsOptions) - Operation response error`, func() {
		version := "testString"
		updateTransitGatewayOpsPath := "/ops/transit_gateways/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateTransitGatewayOpsPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateTransitGatewayOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the UpdateTransitGatewayOpsOptions model
				updateTransitGatewayOpsOptionsModel := new(transitgatewayapisv1.UpdateTransitGatewayOpsOptions)
				updateTransitGatewayOpsOptionsModel.ID = core.StringPtr("testString")
				updateTransitGatewayOpsOptionsModel.IsDeletable = core.BoolPtr(true)
				updateTransitGatewayOpsOptionsModel.TemplateVersion = core.StringPtr("v1")
				updateTransitGatewayOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.UpdateTransitGatewayOps(updateTransitGatewayOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.UpdateTransitGatewayOps(updateTransitGatewayOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateTransitGatewayOps(updateTransitGatewayOpsOptions *UpdateTransitGatewayOpsOptions)`, func() {
		version := "testString"
		updateTransitGatewayOpsPath := "/ops/transit_gateways/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateTransitGatewayOpsPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "crn": "crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "name": "my-ops-transit-gateway-in-TransitGateway", "location": "us-south", "created_at": "2019-01-01T12:00:00.000Z", "global": true, "resource_group": {"id": "56969d6043e9465c883cb9f7363e78e8", "href": "https://resource-manager.bluemix.net/v1/resource_groups/56969d6043e9465c883cb9f7363e78e8"}, "status": "up", "updated_at": "2019-01-01T12:00:00.000Z", "account_id": "28e4d90ac7504be694471ee66e70d0d5", "database_id": 234, "is_billing": true, "is_deletable": true, "leak_route_distinguisher": "47902:3255120092", "route_distinguisher": "47902:3255120092", "route_target": "47902:3255120092", "template_version": "v1"}`)
				}))
			})
			It(`Invoke UpdateTransitGatewayOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the UpdateTransitGatewayOpsOptions model
				updateTransitGatewayOpsOptionsModel := new(transitgatewayapisv1.UpdateTransitGatewayOpsOptions)
				updateTransitGatewayOpsOptionsModel.ID = core.StringPtr("testString")
				updateTransitGatewayOpsOptionsModel.IsDeletable = core.BoolPtr(true)
				updateTransitGatewayOpsOptionsModel.TemplateVersion = core.StringPtr("v1")
				updateTransitGatewayOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.UpdateTransitGatewayOpsWithContext(ctx, updateTransitGatewayOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.UpdateTransitGatewayOps(updateTransitGatewayOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.UpdateTransitGatewayOpsWithContext(ctx, updateTransitGatewayOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateTransitGatewayOpsPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "crn": "crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "name": "my-ops-transit-gateway-in-TransitGateway", "location": "us-south", "created_at": "2019-01-01T12:00:00.000Z", "global": true, "resource_group": {"id": "56969d6043e9465c883cb9f7363e78e8", "href": "https://resource-manager.bluemix.net/v1/resource_groups/56969d6043e9465c883cb9f7363e78e8"}, "status": "up", "updated_at": "2019-01-01T12:00:00.000Z", "account_id": "28e4d90ac7504be694471ee66e70d0d5", "database_id": 234, "is_billing": true, "is_deletable": true, "leak_route_distinguisher": "47902:3255120092", "route_distinguisher": "47902:3255120092", "route_target": "47902:3255120092", "template_version": "v1"}`)
				}))
			})
			It(`Invoke UpdateTransitGatewayOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.UpdateTransitGatewayOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateTransitGatewayOpsOptions model
				updateTransitGatewayOpsOptionsModel := new(transitgatewayapisv1.UpdateTransitGatewayOpsOptions)
				updateTransitGatewayOpsOptionsModel.ID = core.StringPtr("testString")
				updateTransitGatewayOpsOptionsModel.IsDeletable = core.BoolPtr(true)
				updateTransitGatewayOpsOptionsModel.TemplateVersion = core.StringPtr("v1")
				updateTransitGatewayOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.UpdateTransitGatewayOps(updateTransitGatewayOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateTransitGatewayOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the UpdateTransitGatewayOpsOptions model
				updateTransitGatewayOpsOptionsModel := new(transitgatewayapisv1.UpdateTransitGatewayOpsOptions)
				updateTransitGatewayOpsOptionsModel.ID = core.StringPtr("testString")
				updateTransitGatewayOpsOptionsModel.IsDeletable = core.BoolPtr(true)
				updateTransitGatewayOpsOptionsModel.TemplateVersion = core.StringPtr("v1")
				updateTransitGatewayOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.UpdateTransitGatewayOps(updateTransitGatewayOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateTransitGatewayOpsOptions model with no property values
				updateTransitGatewayOpsOptionsModelNew := new(transitgatewayapisv1.UpdateTransitGatewayOpsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.UpdateTransitGatewayOps(updateTransitGatewayOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateTransitGatewayOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the UpdateTransitGatewayOpsOptions model
				updateTransitGatewayOpsOptionsModel := new(transitgatewayapisv1.UpdateTransitGatewayOpsOptions)
				updateTransitGatewayOpsOptionsModel.ID = core.StringPtr("testString")
				updateTransitGatewayOpsOptionsModel.IsDeletable = core.BoolPtr(true)
				updateTransitGatewayOpsOptionsModel.TemplateVersion = core.StringPtr("v1")
				updateTransitGatewayOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.UpdateTransitGatewayOps(updateTransitGatewayOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateTransitGatewayActionsOps(createTransitGatewayActionsOpsOptions *CreateTransitGatewayActionsOpsOptions)`, func() {
		version := "testString"
		createTransitGatewayActionsOpsPath := "/ops/transit_gateways/testString/actions"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createTransitGatewayActionsOpsPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke CreateTransitGatewayActionsOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := transitGatewayApisService.CreateTransitGatewayActionsOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the CreateTransitGatewayActionsOpsOptions model
				createTransitGatewayActionsOpsOptionsModel := new(transitgatewayapisv1.CreateTransitGatewayActionsOpsOptions)
				createTransitGatewayActionsOpsOptionsModel.ID = core.StringPtr("testString")
				createTransitGatewayActionsOpsOptionsModel.Action = core.StringPtr("suspend")
				createTransitGatewayActionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = transitGatewayApisService.CreateTransitGatewayActionsOps(createTransitGatewayActionsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke CreateTransitGatewayActionsOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateTransitGatewayActionsOpsOptions model
				createTransitGatewayActionsOpsOptionsModel := new(transitgatewayapisv1.CreateTransitGatewayActionsOpsOptions)
				createTransitGatewayActionsOpsOptionsModel.ID = core.StringPtr("testString")
				createTransitGatewayActionsOpsOptionsModel.Action = core.StringPtr("suspend")
				createTransitGatewayActionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := transitGatewayApisService.CreateTransitGatewayActionsOps(createTransitGatewayActionsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the CreateTransitGatewayActionsOpsOptions model with no property values
				createTransitGatewayActionsOpsOptionsModelNew := new(transitgatewayapisv1.CreateTransitGatewayActionsOpsOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = transitGatewayApisService.CreateTransitGatewayActionsOps(createTransitGatewayActionsOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateTransitGatewayDeviceMapping(createTransitGatewayDeviceMappingOptions *CreateTransitGatewayDeviceMappingOptions) - Operation response error`, func() {
		version := "testString"
		createTransitGatewayDeviceMappingPath := "/ops/transit_gateways/testString/device_mappings"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createTransitGatewayDeviceMappingPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// TODO: Add check for force query parameter
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateTransitGatewayDeviceMapping with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateTransitGatewayDeviceMappingOptions model
				createTransitGatewayDeviceMappingOptionsModel := new(transitgatewayapisv1.CreateTransitGatewayDeviceMappingOptions)
				createTransitGatewayDeviceMappingOptionsModel.ID = core.StringPtr("testString")
				createTransitGatewayDeviceMappingOptionsModel.DeviceID = core.StringPtr("0a06fb9b-820f-4c44-8a31-77f1f0806d28")
				createTransitGatewayDeviceMappingOptionsModel.Force = core.BoolPtr(true)
				createTransitGatewayDeviceMappingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.CreateTransitGatewayDeviceMapping(createTransitGatewayDeviceMappingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.CreateTransitGatewayDeviceMapping(createTransitGatewayDeviceMappingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateTransitGatewayDeviceMapping(createTransitGatewayDeviceMappingOptions *CreateTransitGatewayDeviceMappingOptions)`, func() {
		version := "testString"
		createTransitGatewayDeviceMappingPath := "/ops/transit_gateways/testString/device_mappings"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createTransitGatewayDeviceMappingPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// TODO: Add check for force query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"configuration_status": "available", "database_id": 446, "device_database_id": 446, "device_hostname": "tsr01dal01.softlayer.local", "device_id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "hostname": "tsr01dal01.softlayer.local", "id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "mapping_id": "0bc6fb9b-4402-555-8a31-aaaaa0854321", "tunnel_id": 48453}`)
				}))
			})
			It(`Invoke CreateTransitGatewayDeviceMapping successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the CreateTransitGatewayDeviceMappingOptions model
				createTransitGatewayDeviceMappingOptionsModel := new(transitgatewayapisv1.CreateTransitGatewayDeviceMappingOptions)
				createTransitGatewayDeviceMappingOptionsModel.ID = core.StringPtr("testString")
				createTransitGatewayDeviceMappingOptionsModel.DeviceID = core.StringPtr("0a06fb9b-820f-4c44-8a31-77f1f0806d28")
				createTransitGatewayDeviceMappingOptionsModel.Force = core.BoolPtr(true)
				createTransitGatewayDeviceMappingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.CreateTransitGatewayDeviceMappingWithContext(ctx, createTransitGatewayDeviceMappingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.CreateTransitGatewayDeviceMapping(createTransitGatewayDeviceMappingOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.CreateTransitGatewayDeviceMappingWithContext(ctx, createTransitGatewayDeviceMappingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createTransitGatewayDeviceMappingPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// TODO: Add check for force query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"configuration_status": "available", "database_id": 446, "device_database_id": 446, "device_hostname": "tsr01dal01.softlayer.local", "device_id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "hostname": "tsr01dal01.softlayer.local", "id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "mapping_id": "0bc6fb9b-4402-555-8a31-aaaaa0854321", "tunnel_id": 48453}`)
				}))
			})
			It(`Invoke CreateTransitGatewayDeviceMapping successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.CreateTransitGatewayDeviceMapping(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateTransitGatewayDeviceMappingOptions model
				createTransitGatewayDeviceMappingOptionsModel := new(transitgatewayapisv1.CreateTransitGatewayDeviceMappingOptions)
				createTransitGatewayDeviceMappingOptionsModel.ID = core.StringPtr("testString")
				createTransitGatewayDeviceMappingOptionsModel.DeviceID = core.StringPtr("0a06fb9b-820f-4c44-8a31-77f1f0806d28")
				createTransitGatewayDeviceMappingOptionsModel.Force = core.BoolPtr(true)
				createTransitGatewayDeviceMappingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.CreateTransitGatewayDeviceMapping(createTransitGatewayDeviceMappingOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateTransitGatewayDeviceMapping with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateTransitGatewayDeviceMappingOptions model
				createTransitGatewayDeviceMappingOptionsModel := new(transitgatewayapisv1.CreateTransitGatewayDeviceMappingOptions)
				createTransitGatewayDeviceMappingOptionsModel.ID = core.StringPtr("testString")
				createTransitGatewayDeviceMappingOptionsModel.DeviceID = core.StringPtr("0a06fb9b-820f-4c44-8a31-77f1f0806d28")
				createTransitGatewayDeviceMappingOptionsModel.Force = core.BoolPtr(true)
				createTransitGatewayDeviceMappingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.CreateTransitGatewayDeviceMapping(createTransitGatewayDeviceMappingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateTransitGatewayDeviceMappingOptions model with no property values
				createTransitGatewayDeviceMappingOptionsModelNew := new(transitgatewayapisv1.CreateTransitGatewayDeviceMappingOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.CreateTransitGatewayDeviceMapping(createTransitGatewayDeviceMappingOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateTransitGatewayDeviceMapping successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateTransitGatewayDeviceMappingOptions model
				createTransitGatewayDeviceMappingOptionsModel := new(transitgatewayapisv1.CreateTransitGatewayDeviceMappingOptions)
				createTransitGatewayDeviceMappingOptionsModel.ID = core.StringPtr("testString")
				createTransitGatewayDeviceMappingOptionsModel.DeviceID = core.StringPtr("0a06fb9b-820f-4c44-8a31-77f1f0806d28")
				createTransitGatewayDeviceMappingOptionsModel.Force = core.BoolPtr(true)
				createTransitGatewayDeviceMappingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.CreateTransitGatewayDeviceMapping(createTransitGatewayDeviceMappingOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteTransitGatewayDeviceMapping(deleteTransitGatewayDeviceMappingOptions *DeleteTransitGatewayDeviceMappingOptions)`, func() {
		version := "testString"
		deleteTransitGatewayDeviceMappingPath := "/ops/transit_gateways/testString/device_mappings/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteTransitGatewayDeviceMappingPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteTransitGatewayDeviceMapping successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := transitGatewayApisService.DeleteTransitGatewayDeviceMapping(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteTransitGatewayDeviceMappingOptions model
				deleteTransitGatewayDeviceMappingOptionsModel := new(transitgatewayapisv1.DeleteTransitGatewayDeviceMappingOptions)
				deleteTransitGatewayDeviceMappingOptionsModel.ID = core.StringPtr("testString")
				deleteTransitGatewayDeviceMappingOptionsModel.MappingID = core.StringPtr("testString")
				deleteTransitGatewayDeviceMappingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = transitGatewayApisService.DeleteTransitGatewayDeviceMapping(deleteTransitGatewayDeviceMappingOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteTransitGatewayDeviceMapping with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the DeleteTransitGatewayDeviceMappingOptions model
				deleteTransitGatewayDeviceMappingOptionsModel := new(transitgatewayapisv1.DeleteTransitGatewayDeviceMappingOptions)
				deleteTransitGatewayDeviceMappingOptionsModel.ID = core.StringPtr("testString")
				deleteTransitGatewayDeviceMappingOptionsModel.MappingID = core.StringPtr("testString")
				deleteTransitGatewayDeviceMappingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := transitGatewayApisService.DeleteTransitGatewayDeviceMapping(deleteTransitGatewayDeviceMappingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteTransitGatewayDeviceMappingOptions model with no property values
				deleteTransitGatewayDeviceMappingOptionsModelNew := new(transitgatewayapisv1.DeleteTransitGatewayDeviceMappingOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = transitGatewayApisService.DeleteTransitGatewayDeviceMapping(deleteTransitGatewayDeviceMappingOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListTransitGatewaysDeviceMappings(listTransitGatewaysDeviceMappingsOptions *ListTransitGatewaysDeviceMappingsOptions) - Operation response error`, func() {
		version := "testString"
		listTransitGatewaysDeviceMappingsPath := "/ops/transit_gateways/testString/gateway_devices"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewaysDeviceMappingsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListTransitGatewaysDeviceMappings with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewaysDeviceMappingsOptions model
				listTransitGatewaysDeviceMappingsOptionsModel := new(transitgatewayapisv1.ListTransitGatewaysDeviceMappingsOptions)
				listTransitGatewaysDeviceMappingsOptionsModel.ID = core.StringPtr("testString")
				listTransitGatewaysDeviceMappingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.ListTransitGatewaysDeviceMappings(listTransitGatewaysDeviceMappingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.ListTransitGatewaysDeviceMappings(listTransitGatewaysDeviceMappingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListTransitGatewaysDeviceMappings(listTransitGatewaysDeviceMappingsOptions *ListTransitGatewaysDeviceMappingsOptions)`, func() {
		version := "testString"
		listTransitGatewaysDeviceMappingsPath := "/ops/transit_gateways/testString/gateway_devices"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewaysDeviceMappingsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"devices": [{"configuration_status": "available", "database_id": 446, "device_database_id": 446, "device_hostname": "tsr01dal01.softlayer.local", "device_id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "hostname": "tsr01dal01.softlayer.local", "id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "mapping_id": "0bc6fb9b-4402-555-8a31-aaaaa0854321", "tunnel_id": 48453}]}`)
				}))
			})
			It(`Invoke ListTransitGatewaysDeviceMappings successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the ListTransitGatewaysDeviceMappingsOptions model
				listTransitGatewaysDeviceMappingsOptionsModel := new(transitgatewayapisv1.ListTransitGatewaysDeviceMappingsOptions)
				listTransitGatewaysDeviceMappingsOptionsModel.ID = core.StringPtr("testString")
				listTransitGatewaysDeviceMappingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.ListTransitGatewaysDeviceMappingsWithContext(ctx, listTransitGatewaysDeviceMappingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.ListTransitGatewaysDeviceMappings(listTransitGatewaysDeviceMappingsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.ListTransitGatewaysDeviceMappingsWithContext(ctx, listTransitGatewaysDeviceMappingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewaysDeviceMappingsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"devices": [{"configuration_status": "available", "database_id": 446, "device_database_id": 446, "device_hostname": "tsr01dal01.softlayer.local", "device_id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "hostname": "tsr01dal01.softlayer.local", "id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "mapping_id": "0bc6fb9b-4402-555-8a31-aaaaa0854321", "tunnel_id": 48453}]}`)
				}))
			})
			It(`Invoke ListTransitGatewaysDeviceMappings successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.ListTransitGatewaysDeviceMappings(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListTransitGatewaysDeviceMappingsOptions model
				listTransitGatewaysDeviceMappingsOptionsModel := new(transitgatewayapisv1.ListTransitGatewaysDeviceMappingsOptions)
				listTransitGatewaysDeviceMappingsOptionsModel.ID = core.StringPtr("testString")
				listTransitGatewaysDeviceMappingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.ListTransitGatewaysDeviceMappings(listTransitGatewaysDeviceMappingsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListTransitGatewaysDeviceMappings with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewaysDeviceMappingsOptions model
				listTransitGatewaysDeviceMappingsOptionsModel := new(transitgatewayapisv1.ListTransitGatewaysDeviceMappingsOptions)
				listTransitGatewaysDeviceMappingsOptionsModel.ID = core.StringPtr("testString")
				listTransitGatewaysDeviceMappingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.ListTransitGatewaysDeviceMappings(listTransitGatewaysDeviceMappingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListTransitGatewaysDeviceMappingsOptions model with no property values
				listTransitGatewaysDeviceMappingsOptionsModelNew := new(transitgatewayapisv1.ListTransitGatewaysDeviceMappingsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.ListTransitGatewaysDeviceMappings(listTransitGatewaysDeviceMappingsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListTransitGatewaysDeviceMappings successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewaysDeviceMappingsOptions model
				listTransitGatewaysDeviceMappingsOptionsModel := new(transitgatewayapisv1.ListTransitGatewaysDeviceMappingsOptions)
				listTransitGatewaysDeviceMappingsOptionsModel.ID = core.StringPtr("testString")
				listTransitGatewaysDeviceMappingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.ListTransitGatewaysDeviceMappings(listTransitGatewaysDeviceMappingsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListTransitGateways(listTransitGatewaysOptions *ListTransitGatewaysOptions) - Operation response error`, func() {
		version := "testString"
		listTransitGatewaysPath := "/transit_gateways"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewaysPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListTransitGateways with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewaysOptions model
				listTransitGatewaysOptionsModel := new(transitgatewayapisv1.ListTransitGatewaysOptions)
				listTransitGatewaysOptionsModel.Limit = core.Int64Ptr(int64(10))
				listTransitGatewaysOptionsModel.Start = core.StringPtr("testString")
				listTransitGatewaysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.ListTransitGateways(listTransitGatewaysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.ListTransitGateways(listTransitGatewaysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListTransitGateways(listTransitGatewaysOptions *ListTransitGatewaysOptions)`, func() {
		version := "testString"
		listTransitGatewaysPath := "/transit_gateways"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewaysPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://transit.cloud.ibm.com/v1/transit_gateways?limit=50"}, "limit": 50, "next": {"href": "https://transit.cloud.ibm.com/v1/transit_gateways?start=MjAyMC0wNS0wOFQxNDoxNzowMy45NzQ5NzNa&limit=50", "start": "MjAyMC0wNS0wOFQxNDoxNzowMy45NzQ5NzNa"}, "transit_gateways": [{"id": "ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "crn": "crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "name": "my-transit-gateway-in-TransitGateway", "location": "us-south", "created_at": "2019-01-01T12:00:00.000Z", "global": true, "resource_group": {"id": "56969d6043e9465c883cb9f7363e78e8", "href": "https://resource-manager.bluemix.net/v1/resource_groups/56969d6043e9465c883cb9f7363e78e8"}, "status": "available", "updated_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListTransitGateways successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the ListTransitGatewaysOptions model
				listTransitGatewaysOptionsModel := new(transitgatewayapisv1.ListTransitGatewaysOptions)
				listTransitGatewaysOptionsModel.Limit = core.Int64Ptr(int64(10))
				listTransitGatewaysOptionsModel.Start = core.StringPtr("testString")
				listTransitGatewaysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.ListTransitGatewaysWithContext(ctx, listTransitGatewaysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.ListTransitGateways(listTransitGatewaysOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.ListTransitGatewaysWithContext(ctx, listTransitGatewaysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewaysPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://transit.cloud.ibm.com/v1/transit_gateways?limit=50"}, "limit": 50, "next": {"href": "https://transit.cloud.ibm.com/v1/transit_gateways?start=MjAyMC0wNS0wOFQxNDoxNzowMy45NzQ5NzNa&limit=50", "start": "MjAyMC0wNS0wOFQxNDoxNzowMy45NzQ5NzNa"}, "transit_gateways": [{"id": "ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "crn": "crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "name": "my-transit-gateway-in-TransitGateway", "location": "us-south", "created_at": "2019-01-01T12:00:00.000Z", "global": true, "resource_group": {"id": "56969d6043e9465c883cb9f7363e78e8", "href": "https://resource-manager.bluemix.net/v1/resource_groups/56969d6043e9465c883cb9f7363e78e8"}, "status": "available", "updated_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListTransitGateways successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.ListTransitGateways(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListTransitGatewaysOptions model
				listTransitGatewaysOptionsModel := new(transitgatewayapisv1.ListTransitGatewaysOptions)
				listTransitGatewaysOptionsModel.Limit = core.Int64Ptr(int64(10))
				listTransitGatewaysOptionsModel.Start = core.StringPtr("testString")
				listTransitGatewaysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.ListTransitGateways(listTransitGatewaysOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListTransitGateways with error: Operation request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewaysOptions model
				listTransitGatewaysOptionsModel := new(transitgatewayapisv1.ListTransitGatewaysOptions)
				listTransitGatewaysOptionsModel.Limit = core.Int64Ptr(int64(10))
				listTransitGatewaysOptionsModel.Start = core.StringPtr("testString")
				listTransitGatewaysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.ListTransitGateways(listTransitGatewaysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListTransitGateways successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListTransitGatewaysOptions model
				listTransitGatewaysOptionsModel := new(transitgatewayapisv1.ListTransitGatewaysOptions)
				listTransitGatewaysOptionsModel.Limit = core.Int64Ptr(int64(10))
				listTransitGatewaysOptionsModel.Start = core.StringPtr("testString")
				listTransitGatewaysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.ListTransitGateways(listTransitGatewaysOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Test pagination helper method on response`, func() {
			It(`Invoke GetNextStart successfully`, func() {
				responseObject := new(transitgatewayapisv1.TransitGatewayCollection)
				nextObject := new(transitgatewayapisv1.PaginationNextTG)
				nextObject.Start = core.StringPtr("abc-123")
				responseObject.Next = nextObject
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(Equal(core.StringPtr("abc-123")))
			})
			It(`Invoke GetNextStart without a "Next" property in the response`, func() {
				responseObject := new(transitgatewayapisv1.TransitGatewayCollection)
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(BeNil())
			})
		})
		Context(`Using mock server endpoint - paginated response`, func() {
			BeforeEach(func() {
				var requestNumber int = 0
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTransitGatewaysPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					requestNumber++
					if requestNumber == 1 {
						fmt.Fprintf(res, "%s", `{"next":{"start":"1"},"transit_gateways":[{"id":"ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4","crn":"crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4","name":"my-transit-gateway-in-TransitGateway","location":"us-south","created_at":"2019-01-01T12:00:00.000Z","global":true,"resource_group":{"id":"56969d6043e9465c883cb9f7363e78e8","href":"https://resource-manager.bluemix.net/v1/resource_groups/56969d6043e9465c883cb9f7363e78e8"},"status":"available","updated_at":"2019-01-01T12:00:00.000Z"}],"total_count":2,"limit":1}`)
					} else if requestNumber == 2 {
						fmt.Fprintf(res, "%s", `{"transit_gateways":[{"id":"ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4","crn":"crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4","name":"my-transit-gateway-in-TransitGateway","location":"us-south","created_at":"2019-01-01T12:00:00.000Z","global":true,"resource_group":{"id":"56969d6043e9465c883cb9f7363e78e8","href":"https://resource-manager.bluemix.net/v1/resource_groups/56969d6043e9465c883cb9f7363e78e8"},"status":"available","updated_at":"2019-01-01T12:00:00.000Z"}],"total_count":2,"limit":1}`)
					} else {
						res.WriteHeader(400)
					}
				}))
			})
			It(`Use TransitGatewaysPager.GetNext successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				listTransitGatewaysOptionsModel := &transitgatewayapisv1.ListTransitGatewaysOptions{
					Limit: core.Int64Ptr(int64(10)),
				}

				pager, err := transitGatewayApisService.NewTransitGatewaysPager(listTransitGatewaysOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				var allResults []transitgatewayapisv1.TransitGateway
				for pager.HasNext() {
					nextPage, err := pager.GetNext()
					Expect(err).To(BeNil())
					Expect(nextPage).ToNot(BeNil())
					allResults = append(allResults, nextPage...)
				}
				Expect(len(allResults)).To(Equal(2))
			})
			It(`Use TransitGatewaysPager.GetAll successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				listTransitGatewaysOptionsModel := &transitgatewayapisv1.ListTransitGatewaysOptions{
					Limit: core.Int64Ptr(int64(10)),
				}

				pager, err := transitGatewayApisService.NewTransitGatewaysPager(listTransitGatewaysOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				allResults, err := pager.GetAll()
				Expect(err).To(BeNil())
				Expect(allResults).ToNot(BeNil())
				Expect(len(allResults)).To(Equal(2))
			})
		})
	})
	Describe(`CreateTransitGateway(createTransitGatewayOptions *CreateTransitGatewayOptions) - Operation response error`, func() {
		version := "testString"
		createTransitGatewayPath := "/transit_gateways"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createTransitGatewayPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateTransitGateway with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentity model
				resourceGroupIdentityModel := new(transitgatewayapisv1.ResourceGroupIdentity)
				resourceGroupIdentityModel.ID = core.StringPtr("56969d6043e9465c883cb9f7363e78e8")

				// Construct an instance of the CreateTransitGatewayOptions model
				createTransitGatewayOptionsModel := new(transitgatewayapisv1.CreateTransitGatewayOptions)
				createTransitGatewayOptionsModel.Location = core.StringPtr("us-south")
				createTransitGatewayOptionsModel.Name = core.StringPtr("Transit_Service_BWTN_SJ_DL")
				createTransitGatewayOptionsModel.Global = core.BoolPtr(true)
				createTransitGatewayOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createTransitGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.CreateTransitGateway(createTransitGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.CreateTransitGateway(createTransitGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateTransitGateway(createTransitGatewayOptions *CreateTransitGatewayOptions)`, func() {
		version := "testString"
		createTransitGatewayPath := "/transit_gateways"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createTransitGatewayPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "crn": "crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "name": "my-transit-gateway-in-TransitGateway", "location": "us-south", "created_at": "2019-01-01T12:00:00.000Z", "global": true, "resource_group": {"id": "56969d6043e9465c883cb9f7363e78e8", "href": "https://resource-manager.bluemix.net/v1/resource_groups/56969d6043e9465c883cb9f7363e78e8"}, "status": "available", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke CreateTransitGateway successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the ResourceGroupIdentity model
				resourceGroupIdentityModel := new(transitgatewayapisv1.ResourceGroupIdentity)
				resourceGroupIdentityModel.ID = core.StringPtr("56969d6043e9465c883cb9f7363e78e8")

				// Construct an instance of the CreateTransitGatewayOptions model
				createTransitGatewayOptionsModel := new(transitgatewayapisv1.CreateTransitGatewayOptions)
				createTransitGatewayOptionsModel.Location = core.StringPtr("us-south")
				createTransitGatewayOptionsModel.Name = core.StringPtr("Transit_Service_BWTN_SJ_DL")
				createTransitGatewayOptionsModel.Global = core.BoolPtr(true)
				createTransitGatewayOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createTransitGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.CreateTransitGatewayWithContext(ctx, createTransitGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.CreateTransitGateway(createTransitGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.CreateTransitGatewayWithContext(ctx, createTransitGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createTransitGatewayPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "crn": "crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "name": "my-transit-gateway-in-TransitGateway", "location": "us-south", "created_at": "2019-01-01T12:00:00.000Z", "global": true, "resource_group": {"id": "56969d6043e9465c883cb9f7363e78e8", "href": "https://resource-manager.bluemix.net/v1/resource_groups/56969d6043e9465c883cb9f7363e78e8"}, "status": "available", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke CreateTransitGateway successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.CreateTransitGateway(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ResourceGroupIdentity model
				resourceGroupIdentityModel := new(transitgatewayapisv1.ResourceGroupIdentity)
				resourceGroupIdentityModel.ID = core.StringPtr("56969d6043e9465c883cb9f7363e78e8")

				// Construct an instance of the CreateTransitGatewayOptions model
				createTransitGatewayOptionsModel := new(transitgatewayapisv1.CreateTransitGatewayOptions)
				createTransitGatewayOptionsModel.Location = core.StringPtr("us-south")
				createTransitGatewayOptionsModel.Name = core.StringPtr("Transit_Service_BWTN_SJ_DL")
				createTransitGatewayOptionsModel.Global = core.BoolPtr(true)
				createTransitGatewayOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createTransitGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.CreateTransitGateway(createTransitGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateTransitGateway with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentity model
				resourceGroupIdentityModel := new(transitgatewayapisv1.ResourceGroupIdentity)
				resourceGroupIdentityModel.ID = core.StringPtr("56969d6043e9465c883cb9f7363e78e8")

				// Construct an instance of the CreateTransitGatewayOptions model
				createTransitGatewayOptionsModel := new(transitgatewayapisv1.CreateTransitGatewayOptions)
				createTransitGatewayOptionsModel.Location = core.StringPtr("us-south")
				createTransitGatewayOptionsModel.Name = core.StringPtr("Transit_Service_BWTN_SJ_DL")
				createTransitGatewayOptionsModel.Global = core.BoolPtr(true)
				createTransitGatewayOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createTransitGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.CreateTransitGateway(createTransitGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateTransitGatewayOptions model with no property values
				createTransitGatewayOptionsModelNew := new(transitgatewayapisv1.CreateTransitGatewayOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.CreateTransitGateway(createTransitGatewayOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateTransitGateway successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentity model
				resourceGroupIdentityModel := new(transitgatewayapisv1.ResourceGroupIdentity)
				resourceGroupIdentityModel.ID = core.StringPtr("56969d6043e9465c883cb9f7363e78e8")

				// Construct an instance of the CreateTransitGatewayOptions model
				createTransitGatewayOptionsModel := new(transitgatewayapisv1.CreateTransitGatewayOptions)
				createTransitGatewayOptionsModel.Location = core.StringPtr("us-south")
				createTransitGatewayOptionsModel.Name = core.StringPtr("Transit_Service_BWTN_SJ_DL")
				createTransitGatewayOptionsModel.Global = core.BoolPtr(true)
				createTransitGatewayOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createTransitGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.CreateTransitGateway(createTransitGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteTransitGateway(deleteTransitGatewayOptions *DeleteTransitGatewayOptions)`, func() {
		version := "testString"
		deleteTransitGatewayPath := "/transit_gateways/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteTransitGatewayPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteTransitGateway successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := transitGatewayApisService.DeleteTransitGateway(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteTransitGatewayOptions model
				deleteTransitGatewayOptionsModel := new(transitgatewayapisv1.DeleteTransitGatewayOptions)
				deleteTransitGatewayOptionsModel.ID = core.StringPtr("testString")
				deleteTransitGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = transitGatewayApisService.DeleteTransitGateway(deleteTransitGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteTransitGateway with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the DeleteTransitGatewayOptions model
				deleteTransitGatewayOptionsModel := new(transitgatewayapisv1.DeleteTransitGatewayOptions)
				deleteTransitGatewayOptionsModel.ID = core.StringPtr("testString")
				deleteTransitGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := transitGatewayApisService.DeleteTransitGateway(deleteTransitGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteTransitGatewayOptions model with no property values
				deleteTransitGatewayOptionsModelNew := new(transitgatewayapisv1.DeleteTransitGatewayOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = transitGatewayApisService.DeleteTransitGateway(deleteTransitGatewayOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetTransitGateway(getTransitGatewayOptions *GetTransitGatewayOptions) - Operation response error`, func() {
		version := "testString"
		getTransitGatewayPath := "/transit_gateways/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTransitGatewayPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetTransitGateway with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetTransitGatewayOptions model
				getTransitGatewayOptionsModel := new(transitgatewayapisv1.GetTransitGatewayOptions)
				getTransitGatewayOptionsModel.ID = core.StringPtr("testString")
				getTransitGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.GetTransitGateway(getTransitGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.GetTransitGateway(getTransitGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetTransitGateway(getTransitGatewayOptions *GetTransitGatewayOptions)`, func() {
		version := "testString"
		getTransitGatewayPath := "/transit_gateways/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTransitGatewayPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "crn": "crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "name": "my-transit-gateway-in-TransitGateway", "location": "us-south", "created_at": "2019-01-01T12:00:00.000Z", "global": true, "resource_group": {"id": "56969d6043e9465c883cb9f7363e78e8", "href": "https://resource-manager.bluemix.net/v1/resource_groups/56969d6043e9465c883cb9f7363e78e8"}, "status": "available", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke GetTransitGateway successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the GetTransitGatewayOptions model
				getTransitGatewayOptionsModel := new(transitgatewayapisv1.GetTransitGatewayOptions)
				getTransitGatewayOptionsModel.ID = core.StringPtr("testString")
				getTransitGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.GetTransitGatewayWithContext(ctx, getTransitGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.GetTransitGateway(getTransitGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.GetTransitGatewayWithContext(ctx, getTransitGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTransitGatewayPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "crn": "crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "name": "my-transit-gateway-in-TransitGateway", "location": "us-south", "created_at": "2019-01-01T12:00:00.000Z", "global": true, "resource_group": {"id": "56969d6043e9465c883cb9f7363e78e8", "href": "https://resource-manager.bluemix.net/v1/resource_groups/56969d6043e9465c883cb9f7363e78e8"}, "status": "available", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke GetTransitGateway successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.GetTransitGateway(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetTransitGatewayOptions model
				getTransitGatewayOptionsModel := new(transitgatewayapisv1.GetTransitGatewayOptions)
				getTransitGatewayOptionsModel.ID = core.StringPtr("testString")
				getTransitGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.GetTransitGateway(getTransitGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetTransitGateway with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetTransitGatewayOptions model
				getTransitGatewayOptionsModel := new(transitgatewayapisv1.GetTransitGatewayOptions)
				getTransitGatewayOptionsModel.ID = core.StringPtr("testString")
				getTransitGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.GetTransitGateway(getTransitGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetTransitGatewayOptions model with no property values
				getTransitGatewayOptionsModelNew := new(transitgatewayapisv1.GetTransitGatewayOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.GetTransitGateway(getTransitGatewayOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetTransitGateway successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetTransitGatewayOptions model
				getTransitGatewayOptionsModel := new(transitgatewayapisv1.GetTransitGatewayOptions)
				getTransitGatewayOptionsModel.ID = core.StringPtr("testString")
				getTransitGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.GetTransitGateway(getTransitGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateTransitGateway(updateTransitGatewayOptions *UpdateTransitGatewayOptions) - Operation response error`, func() {
		version := "testString"
		updateTransitGatewayPath := "/transit_gateways/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateTransitGatewayPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateTransitGateway with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the UpdateTransitGatewayOptions model
				updateTransitGatewayOptionsModel := new(transitgatewayapisv1.UpdateTransitGatewayOptions)
				updateTransitGatewayOptionsModel.ID = core.StringPtr("testString")
				updateTransitGatewayOptionsModel.Global = core.BoolPtr(true)
				updateTransitGatewayOptionsModel.Name = core.StringPtr("my-transit-gateway")
				updateTransitGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.UpdateTransitGateway(updateTransitGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.UpdateTransitGateway(updateTransitGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateTransitGateway(updateTransitGatewayOptions *UpdateTransitGatewayOptions)`, func() {
		version := "testString"
		updateTransitGatewayPath := "/transit_gateways/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateTransitGatewayPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "crn": "crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "name": "my-transit-gateway-in-TransitGateway", "location": "us-south", "created_at": "2019-01-01T12:00:00.000Z", "global": true, "resource_group": {"id": "56969d6043e9465c883cb9f7363e78e8", "href": "https://resource-manager.bluemix.net/v1/resource_groups/56969d6043e9465c883cb9f7363e78e8"}, "status": "available", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke UpdateTransitGateway successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the UpdateTransitGatewayOptions model
				updateTransitGatewayOptionsModel := new(transitgatewayapisv1.UpdateTransitGatewayOptions)
				updateTransitGatewayOptionsModel.ID = core.StringPtr("testString")
				updateTransitGatewayOptionsModel.Global = core.BoolPtr(true)
				updateTransitGatewayOptionsModel.Name = core.StringPtr("my-transit-gateway")
				updateTransitGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.UpdateTransitGatewayWithContext(ctx, updateTransitGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.UpdateTransitGateway(updateTransitGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.UpdateTransitGatewayWithContext(ctx, updateTransitGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateTransitGatewayPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "crn": "crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "name": "my-transit-gateway-in-TransitGateway", "location": "us-south", "created_at": "2019-01-01T12:00:00.000Z", "global": true, "resource_group": {"id": "56969d6043e9465c883cb9f7363e78e8", "href": "https://resource-manager.bluemix.net/v1/resource_groups/56969d6043e9465c883cb9f7363e78e8"}, "status": "available", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke UpdateTransitGateway successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.UpdateTransitGateway(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateTransitGatewayOptions model
				updateTransitGatewayOptionsModel := new(transitgatewayapisv1.UpdateTransitGatewayOptions)
				updateTransitGatewayOptionsModel.ID = core.StringPtr("testString")
				updateTransitGatewayOptionsModel.Global = core.BoolPtr(true)
				updateTransitGatewayOptionsModel.Name = core.StringPtr("my-transit-gateway")
				updateTransitGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.UpdateTransitGateway(updateTransitGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateTransitGateway with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the UpdateTransitGatewayOptions model
				updateTransitGatewayOptionsModel := new(transitgatewayapisv1.UpdateTransitGatewayOptions)
				updateTransitGatewayOptionsModel.ID = core.StringPtr("testString")
				updateTransitGatewayOptionsModel.Global = core.BoolPtr(true)
				updateTransitGatewayOptionsModel.Name = core.StringPtr("my-transit-gateway")
				updateTransitGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.UpdateTransitGateway(updateTransitGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateTransitGatewayOptions model with no property values
				updateTransitGatewayOptionsModelNew := new(transitgatewayapisv1.UpdateTransitGatewayOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.UpdateTransitGateway(updateTransitGatewayOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateTransitGateway successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the UpdateTransitGatewayOptions model
				updateTransitGatewayOptionsModel := new(transitgatewayapisv1.UpdateTransitGatewayOptions)
				updateTransitGatewayOptionsModel.ID = core.StringPtr("testString")
				updateTransitGatewayOptionsModel.Global = core.BoolPtr(true)
				updateTransitGatewayOptionsModel.Name = core.StringPtr("my-transit-gateway")
				updateTransitGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.UpdateTransitGateway(updateTransitGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListProvisionTestResultsOps(listProvisionTestResultsOpsOptions *ListProvisionTestResultsOpsOptions) - Operation response error`, func() {
		version := "testString"
		listProvisionTestResultsOpsPath := "/ops/provision_test_results"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listProvisionTestResultsOpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["control_plane_location"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["vpc_location"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["created_at"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["updated_at"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["status"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListProvisionTestResultsOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListProvisionTestResultsOpsOptions model
				listProvisionTestResultsOpsOptionsModel := new(transitgatewayapisv1.ListProvisionTestResultsOpsOptions)
				listProvisionTestResultsOpsOptionsModel.ControlPlaneLocation = core.StringPtr("testString")
				listProvisionTestResultsOpsOptionsModel.VpcLocation = core.StringPtr("testString")
				listProvisionTestResultsOpsOptionsModel.CreatedAt = core.StringPtr("testString")
				listProvisionTestResultsOpsOptionsModel.UpdatedAt = core.StringPtr("testString")
				listProvisionTestResultsOpsOptionsModel.Status = core.StringPtr("testString")
				listProvisionTestResultsOpsOptionsModel.Start = core.StringPtr("testString")
				listProvisionTestResultsOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listProvisionTestResultsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.ListProvisionTestResultsOps(listProvisionTestResultsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.ListProvisionTestResultsOps(listProvisionTestResultsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListProvisionTestResultsOps(listProvisionTestResultsOpsOptions *ListProvisionTestResultsOpsOptions)`, func() {
		version := "testString"
		listProvisionTestResultsOpsPath := "/ops/provision_test_results"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listProvisionTestResultsOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["control_plane_location"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["vpc_location"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["created_at"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["updated_at"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["status"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://internal.transit.cloud.ibm.com/v1"}, "limit": 20, "next": {"href": "https://internal.transit.cloud.ibm.com/v1"}, "total_count": 132, "results": [{"control_plane_location": "us-south", "created_at": "2019-01-01T12:00:00.000Z", "database_id": 234, "elapsed_time": 2412, "gateway_location": "us-south", "id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "status": "success", "updated_at": "2019-01-01T12:00:00.000Z", "vpc_location": "jp-tok"}]}`)
				}))
			})
			It(`Invoke ListProvisionTestResultsOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the ListProvisionTestResultsOpsOptions model
				listProvisionTestResultsOpsOptionsModel := new(transitgatewayapisv1.ListProvisionTestResultsOpsOptions)
				listProvisionTestResultsOpsOptionsModel.ControlPlaneLocation = core.StringPtr("testString")
				listProvisionTestResultsOpsOptionsModel.VpcLocation = core.StringPtr("testString")
				listProvisionTestResultsOpsOptionsModel.CreatedAt = core.StringPtr("testString")
				listProvisionTestResultsOpsOptionsModel.UpdatedAt = core.StringPtr("testString")
				listProvisionTestResultsOpsOptionsModel.Status = core.StringPtr("testString")
				listProvisionTestResultsOpsOptionsModel.Start = core.StringPtr("testString")
				listProvisionTestResultsOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listProvisionTestResultsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.ListProvisionTestResultsOpsWithContext(ctx, listProvisionTestResultsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.ListProvisionTestResultsOps(listProvisionTestResultsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.ListProvisionTestResultsOpsWithContext(ctx, listProvisionTestResultsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listProvisionTestResultsOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["control_plane_location"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["vpc_location"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["created_at"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["updated_at"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["status"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://internal.transit.cloud.ibm.com/v1"}, "limit": 20, "next": {"href": "https://internal.transit.cloud.ibm.com/v1"}, "total_count": 132, "results": [{"control_plane_location": "us-south", "created_at": "2019-01-01T12:00:00.000Z", "database_id": 234, "elapsed_time": 2412, "gateway_location": "us-south", "id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "status": "success", "updated_at": "2019-01-01T12:00:00.000Z", "vpc_location": "jp-tok"}]}`)
				}))
			})
			It(`Invoke ListProvisionTestResultsOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.ListProvisionTestResultsOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListProvisionTestResultsOpsOptions model
				listProvisionTestResultsOpsOptionsModel := new(transitgatewayapisv1.ListProvisionTestResultsOpsOptions)
				listProvisionTestResultsOpsOptionsModel.ControlPlaneLocation = core.StringPtr("testString")
				listProvisionTestResultsOpsOptionsModel.VpcLocation = core.StringPtr("testString")
				listProvisionTestResultsOpsOptionsModel.CreatedAt = core.StringPtr("testString")
				listProvisionTestResultsOpsOptionsModel.UpdatedAt = core.StringPtr("testString")
				listProvisionTestResultsOpsOptionsModel.Status = core.StringPtr("testString")
				listProvisionTestResultsOpsOptionsModel.Start = core.StringPtr("testString")
				listProvisionTestResultsOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listProvisionTestResultsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.ListProvisionTestResultsOps(listProvisionTestResultsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListProvisionTestResultsOps with error: Operation request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListProvisionTestResultsOpsOptions model
				listProvisionTestResultsOpsOptionsModel := new(transitgatewayapisv1.ListProvisionTestResultsOpsOptions)
				listProvisionTestResultsOpsOptionsModel.ControlPlaneLocation = core.StringPtr("testString")
				listProvisionTestResultsOpsOptionsModel.VpcLocation = core.StringPtr("testString")
				listProvisionTestResultsOpsOptionsModel.CreatedAt = core.StringPtr("testString")
				listProvisionTestResultsOpsOptionsModel.UpdatedAt = core.StringPtr("testString")
				listProvisionTestResultsOpsOptionsModel.Status = core.StringPtr("testString")
				listProvisionTestResultsOpsOptionsModel.Start = core.StringPtr("testString")
				listProvisionTestResultsOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listProvisionTestResultsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.ListProvisionTestResultsOps(listProvisionTestResultsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListProvisionTestResultsOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListProvisionTestResultsOpsOptions model
				listProvisionTestResultsOpsOptionsModel := new(transitgatewayapisv1.ListProvisionTestResultsOpsOptions)
				listProvisionTestResultsOpsOptionsModel.ControlPlaneLocation = core.StringPtr("testString")
				listProvisionTestResultsOpsOptionsModel.VpcLocation = core.StringPtr("testString")
				listProvisionTestResultsOpsOptionsModel.CreatedAt = core.StringPtr("testString")
				listProvisionTestResultsOpsOptionsModel.UpdatedAt = core.StringPtr("testString")
				listProvisionTestResultsOpsOptionsModel.Status = core.StringPtr("testString")
				listProvisionTestResultsOpsOptionsModel.Start = core.StringPtr("testString")
				listProvisionTestResultsOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listProvisionTestResultsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.ListProvisionTestResultsOps(listProvisionTestResultsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Test pagination helper method on response`, func() {
			It(`Invoke GetNextStart successfully`, func() {
				responseObject := new(transitgatewayapisv1.ProvisionTestResultsCollection)
				nextObject := new(transitgatewayapisv1.NextOps)
				nextObject.Href = core.StringPtr("ibm.com?start=abc-123")
				responseObject.Next = nextObject
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(Equal(core.StringPtr("abc-123")))
			})
			It(`Invoke GetNextStart without a "Next" property in the response`, func() {
				responseObject := new(transitgatewayapisv1.ProvisionTestResultsCollection)
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(BeNil())
			})
			It(`Invoke GetNextStart without any query params in the "Next" URL`, func() {
				responseObject := new(transitgatewayapisv1.ProvisionTestResultsCollection)
				nextObject := new(transitgatewayapisv1.NextOps)
				nextObject.Href = core.StringPtr("ibm.com")
				responseObject.Next = nextObject
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(BeNil())
			})
		})
		Context(`Using mock server endpoint - paginated response`, func() {
			BeforeEach(func() {
				var requestNumber int = 0
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listProvisionTestResultsOpsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					requestNumber++
					if requestNumber == 1 {
						fmt.Fprintf(res, "%s", `{"next":{"href":"https://myhost.com/somePath?start=1"},"total_count":2,"limit":1,"results":[{"control_plane_location":"us-south","created_at":"2019-01-01T12:00:00.000Z","database_id":234,"elapsed_time":2412,"gateway_location":"us-south","id":"0a06fb9b-820f-4c44-8a31-77f1f0806d28","status":"success","updated_at":"2019-01-01T12:00:00.000Z","vpc_location":"jp-tok"}]}`)
					} else if requestNumber == 2 {
						fmt.Fprintf(res, "%s", `{"total_count":2,"limit":1,"results":[{"control_plane_location":"us-south","created_at":"2019-01-01T12:00:00.000Z","database_id":234,"elapsed_time":2412,"gateway_location":"us-south","id":"0a06fb9b-820f-4c44-8a31-77f1f0806d28","status":"success","updated_at":"2019-01-01T12:00:00.000Z","vpc_location":"jp-tok"}]}`)
					} else {
						res.WriteHeader(400)
					}
				}))
			})
			It(`Use ProvisionTestResultsOpsPager.GetNext successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				listProvisionTestResultsOpsOptionsModel := &transitgatewayapisv1.ListProvisionTestResultsOpsOptions{
					ControlPlaneLocation: core.StringPtr("testString"),
					VpcLocation: core.StringPtr("testString"),
					CreatedAt: core.StringPtr("testString"),
					UpdatedAt: core.StringPtr("testString"),
					Status: core.StringPtr("testString"),
					Limit: core.Int64Ptr(int64(10)),
				}

				pager, err := transitGatewayApisService.NewProvisionTestResultsOpsPager(listProvisionTestResultsOpsOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				var allResults []transitgatewayapisv1.ProvisionTestResultBasic
				for pager.HasNext() {
					nextPage, err := pager.GetNext()
					Expect(err).To(BeNil())
					Expect(nextPage).ToNot(BeNil())
					allResults = append(allResults, nextPage...)
				}
				Expect(len(allResults)).To(Equal(2))
			})
			It(`Use ProvisionTestResultsOpsPager.GetAll successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				listProvisionTestResultsOpsOptionsModel := &transitgatewayapisv1.ListProvisionTestResultsOpsOptions{
					ControlPlaneLocation: core.StringPtr("testString"),
					VpcLocation: core.StringPtr("testString"),
					CreatedAt: core.StringPtr("testString"),
					UpdatedAt: core.StringPtr("testString"),
					Status: core.StringPtr("testString"),
					Limit: core.Int64Ptr(int64(10)),
				}

				pager, err := transitGatewayApisService.NewProvisionTestResultsOpsPager(listProvisionTestResultsOpsOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				allResults, err := pager.GetAll()
				Expect(err).To(BeNil())
				Expect(allResults).ToNot(BeNil())
				Expect(len(allResults)).To(Equal(2))
			})
		})
	})
	Describe(`GetProvisionTestResultOps(getProvisionTestResultOpsOptions *GetProvisionTestResultOpsOptions) - Operation response error`, func() {
		version := "testString"
		getProvisionTestResultOpsPath := "/ops/provision_test_results/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getProvisionTestResultOpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetProvisionTestResultOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetProvisionTestResultOpsOptions model
				getProvisionTestResultOpsOptionsModel := new(transitgatewayapisv1.GetProvisionTestResultOpsOptions)
				getProvisionTestResultOpsOptionsModel.ID = core.StringPtr("testString")
				getProvisionTestResultOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.GetProvisionTestResultOps(getProvisionTestResultOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.GetProvisionTestResultOps(getProvisionTestResultOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetProvisionTestResultOps(getProvisionTestResultOpsOptions *GetProvisionTestResultOpsOptions)`, func() {
		version := "testString"
		getProvisionTestResultOpsPath := "/ops/provision_test_results/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getProvisionTestResultOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"control_plane_location": "us-south", "created_at": "2019-01-01T12:00:00.000Z", "database_id": 234, "elapsed_time": 2412, "gateway_location": "us-south", "id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "status": "success", "updated_at": "2019-01-01T12:00:00.000Z", "vpc_location": "jp-tok", "steps": [{"created_at": "2019-01-01T12:00:00.000Z", "database_id": 234, "elapsed_time": 2412, "id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "passed": true, "request_id": "c9687a66-734e-4d58-a6f4-6ba0e31419ac", "resource_type": "connection", "resource_uuid": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "step_name": "create_connection", "updated_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke GetProvisionTestResultOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the GetProvisionTestResultOpsOptions model
				getProvisionTestResultOpsOptionsModel := new(transitgatewayapisv1.GetProvisionTestResultOpsOptions)
				getProvisionTestResultOpsOptionsModel.ID = core.StringPtr("testString")
				getProvisionTestResultOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.GetProvisionTestResultOpsWithContext(ctx, getProvisionTestResultOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.GetProvisionTestResultOps(getProvisionTestResultOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.GetProvisionTestResultOpsWithContext(ctx, getProvisionTestResultOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getProvisionTestResultOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"control_plane_location": "us-south", "created_at": "2019-01-01T12:00:00.000Z", "database_id": 234, "elapsed_time": 2412, "gateway_location": "us-south", "id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "status": "success", "updated_at": "2019-01-01T12:00:00.000Z", "vpc_location": "jp-tok", "steps": [{"created_at": "2019-01-01T12:00:00.000Z", "database_id": 234, "elapsed_time": 2412, "id": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "passed": true, "request_id": "c9687a66-734e-4d58-a6f4-6ba0e31419ac", "resource_type": "connection", "resource_uuid": "0a06fb9b-820f-4c44-8a31-77f1f0806d28", "step_name": "create_connection", "updated_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke GetProvisionTestResultOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.GetProvisionTestResultOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetProvisionTestResultOpsOptions model
				getProvisionTestResultOpsOptionsModel := new(transitgatewayapisv1.GetProvisionTestResultOpsOptions)
				getProvisionTestResultOpsOptionsModel.ID = core.StringPtr("testString")
				getProvisionTestResultOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.GetProvisionTestResultOps(getProvisionTestResultOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetProvisionTestResultOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetProvisionTestResultOpsOptions model
				getProvisionTestResultOpsOptionsModel := new(transitgatewayapisv1.GetProvisionTestResultOpsOptions)
				getProvisionTestResultOpsOptionsModel.ID = core.StringPtr("testString")
				getProvisionTestResultOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.GetProvisionTestResultOps(getProvisionTestResultOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetProvisionTestResultOpsOptions model with no property values
				getProvisionTestResultOpsOptionsModelNew := new(transitgatewayapisv1.GetProvisionTestResultOpsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.GetProvisionTestResultOps(getProvisionTestResultOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetProvisionTestResultOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetProvisionTestResultOpsOptions model
				getProvisionTestResultOpsOptionsModel := new(transitgatewayapisv1.GetProvisionTestResultOpsOptions)
				getProvisionTestResultOpsOptionsModel.ID = core.StringPtr("testString")
				getProvisionTestResultOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.GetProvisionTestResultOps(getProvisionTestResultOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListUnderlayConnectionsOps(listUnderlayConnectionsOpsOptions *ListUnderlayConnectionsOpsOptions) - Operation response error`, func() {
		version := "testString"
		listUnderlayConnectionsOpsPath := "/ops/underlay_connections"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listUnderlayConnectionsOpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListUnderlayConnectionsOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListUnderlayConnectionsOpsOptions model
				listUnderlayConnectionsOpsOptionsModel := new(transitgatewayapisv1.ListUnderlayConnectionsOpsOptions)
				listUnderlayConnectionsOpsOptionsModel.Start = core.StringPtr("testString")
				listUnderlayConnectionsOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listUnderlayConnectionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.ListUnderlayConnectionsOps(listUnderlayConnectionsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.ListUnderlayConnectionsOps(listUnderlayConnectionsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListUnderlayConnectionsOps(listUnderlayConnectionsOpsOptions *ListUnderlayConnectionsOpsOptions)`, func() {
		version := "testString"
		listUnderlayConnectionsOpsPath := "/ops/underlay_connections"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listUnderlayConnectionsOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://internal.transit.cloud.ibm.com/v1"}, "limit": 20, "next": {"href": "https://internal.transit.cloud.ibm.com/v1"}, "total_count": 132, "underlay_connections": [{"created_at": "2019-01-01T12:00:00.000Z", "database_id": 234, "id": "0c492442-6f36-4a9b-9712-77379c0ca1e1", "leak_route_distinguisher": "47902:3255120092", "network_account_id": "28e4d90ac7504be694471ee66e70d0d5", "network_id": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "network_type": "vpc", "route_distinguisher": "47902:3255120092", "route_target": "47902:3255120092", "updated_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListUnderlayConnectionsOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the ListUnderlayConnectionsOpsOptions model
				listUnderlayConnectionsOpsOptionsModel := new(transitgatewayapisv1.ListUnderlayConnectionsOpsOptions)
				listUnderlayConnectionsOpsOptionsModel.Start = core.StringPtr("testString")
				listUnderlayConnectionsOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listUnderlayConnectionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.ListUnderlayConnectionsOpsWithContext(ctx, listUnderlayConnectionsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.ListUnderlayConnectionsOps(listUnderlayConnectionsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.ListUnderlayConnectionsOpsWithContext(ctx, listUnderlayConnectionsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listUnderlayConnectionsOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://internal.transit.cloud.ibm.com/v1"}, "limit": 20, "next": {"href": "https://internal.transit.cloud.ibm.com/v1"}, "total_count": 132, "underlay_connections": [{"created_at": "2019-01-01T12:00:00.000Z", "database_id": 234, "id": "0c492442-6f36-4a9b-9712-77379c0ca1e1", "leak_route_distinguisher": "47902:3255120092", "network_account_id": "28e4d90ac7504be694471ee66e70d0d5", "network_id": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "network_type": "vpc", "route_distinguisher": "47902:3255120092", "route_target": "47902:3255120092", "updated_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListUnderlayConnectionsOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.ListUnderlayConnectionsOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListUnderlayConnectionsOpsOptions model
				listUnderlayConnectionsOpsOptionsModel := new(transitgatewayapisv1.ListUnderlayConnectionsOpsOptions)
				listUnderlayConnectionsOpsOptionsModel.Start = core.StringPtr("testString")
				listUnderlayConnectionsOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listUnderlayConnectionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.ListUnderlayConnectionsOps(listUnderlayConnectionsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListUnderlayConnectionsOps with error: Operation request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListUnderlayConnectionsOpsOptions model
				listUnderlayConnectionsOpsOptionsModel := new(transitgatewayapisv1.ListUnderlayConnectionsOpsOptions)
				listUnderlayConnectionsOpsOptionsModel.Start = core.StringPtr("testString")
				listUnderlayConnectionsOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listUnderlayConnectionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.ListUnderlayConnectionsOps(listUnderlayConnectionsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListUnderlayConnectionsOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListUnderlayConnectionsOpsOptions model
				listUnderlayConnectionsOpsOptionsModel := new(transitgatewayapisv1.ListUnderlayConnectionsOpsOptions)
				listUnderlayConnectionsOpsOptionsModel.Start = core.StringPtr("testString")
				listUnderlayConnectionsOpsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listUnderlayConnectionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.ListUnderlayConnectionsOps(listUnderlayConnectionsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Test pagination helper method on response`, func() {
			It(`Invoke GetNextStart successfully`, func() {
				responseObject := new(transitgatewayapisv1.UnderlayConnectionOpsCollection)
				nextObject := new(transitgatewayapisv1.NextOps)
				nextObject.Href = core.StringPtr("ibm.com?start=abc-123")
				responseObject.Next = nextObject
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(Equal(core.StringPtr("abc-123")))
			})
			It(`Invoke GetNextStart without a "Next" property in the response`, func() {
				responseObject := new(transitgatewayapisv1.UnderlayConnectionOpsCollection)
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(BeNil())
			})
			It(`Invoke GetNextStart without any query params in the "Next" URL`, func() {
				responseObject := new(transitgatewayapisv1.UnderlayConnectionOpsCollection)
				nextObject := new(transitgatewayapisv1.NextOps)
				nextObject.Href = core.StringPtr("ibm.com")
				responseObject.Next = nextObject
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(BeNil())
			})
		})
		Context(`Using mock server endpoint - paginated response`, func() {
			BeforeEach(func() {
				var requestNumber int = 0
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listUnderlayConnectionsOpsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					requestNumber++
					if requestNumber == 1 {
						fmt.Fprintf(res, "%s", `{"underlay_connections":[{"created_at":"2019-01-01T12:00:00.000Z","database_id":234,"id":"0c492442-6f36-4a9b-9712-77379c0ca1e1","leak_route_distinguisher":"47902:3255120092","network_account_id":"28e4d90ac7504be694471ee66e70d0d5","network_id":"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b","network_type":"vpc","route_distinguisher":"47902:3255120092","route_target":"47902:3255120092","updated_at":"2019-01-01T12:00:00.000Z"}],"next":{"href":"https://myhost.com/somePath?start=1"},"total_count":2,"limit":1}`)
					} else if requestNumber == 2 {
						fmt.Fprintf(res, "%s", `{"underlay_connections":[{"created_at":"2019-01-01T12:00:00.000Z","database_id":234,"id":"0c492442-6f36-4a9b-9712-77379c0ca1e1","leak_route_distinguisher":"47902:3255120092","network_account_id":"28e4d90ac7504be694471ee66e70d0d5","network_id":"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b","network_type":"vpc","route_distinguisher":"47902:3255120092","route_target":"47902:3255120092","updated_at":"2019-01-01T12:00:00.000Z"}],"total_count":2,"limit":1}`)
					} else {
						res.WriteHeader(400)
					}
				}))
			})
			It(`Use UnderlayConnectionsOpsPager.GetNext successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				listUnderlayConnectionsOpsOptionsModel := &transitgatewayapisv1.ListUnderlayConnectionsOpsOptions{
					Limit: core.Int64Ptr(int64(10)),
				}

				pager, err := transitGatewayApisService.NewUnderlayConnectionsOpsPager(listUnderlayConnectionsOpsOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				var allResults []transitgatewayapisv1.UnderlayConnectionOps
				for pager.HasNext() {
					nextPage, err := pager.GetNext()
					Expect(err).To(BeNil())
					Expect(nextPage).ToNot(BeNil())
					allResults = append(allResults, nextPage...)
				}
				Expect(len(allResults)).To(Equal(2))
			})
			It(`Use UnderlayConnectionsOpsPager.GetAll successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				listUnderlayConnectionsOpsOptionsModel := &transitgatewayapisv1.ListUnderlayConnectionsOpsOptions{
					Limit: core.Int64Ptr(int64(10)),
				}

				pager, err := transitGatewayApisService.NewUnderlayConnectionsOpsPager(listUnderlayConnectionsOpsOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				allResults, err := pager.GetAll()
				Expect(err).To(BeNil())
				Expect(allResults).ToNot(BeNil())
				Expect(len(allResults)).To(Equal(2))
			})
		})
	})
	Describe(`DeleteUnderlayConnectionOps(deleteUnderlayConnectionOpsOptions *DeleteUnderlayConnectionOpsOptions)`, func() {
		version := "testString"
		deleteUnderlayConnectionOpsPath := "/ops/underlay_connections/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteUnderlayConnectionOpsPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteUnderlayConnectionOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := transitGatewayApisService.DeleteUnderlayConnectionOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteUnderlayConnectionOpsOptions model
				deleteUnderlayConnectionOpsOptionsModel := new(transitgatewayapisv1.DeleteUnderlayConnectionOpsOptions)
				deleteUnderlayConnectionOpsOptionsModel.ID = core.StringPtr("testString")
				deleteUnderlayConnectionOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = transitGatewayApisService.DeleteUnderlayConnectionOps(deleteUnderlayConnectionOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteUnderlayConnectionOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the DeleteUnderlayConnectionOpsOptions model
				deleteUnderlayConnectionOpsOptionsModel := new(transitgatewayapisv1.DeleteUnderlayConnectionOpsOptions)
				deleteUnderlayConnectionOpsOptionsModel.ID = core.StringPtr("testString")
				deleteUnderlayConnectionOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := transitGatewayApisService.DeleteUnderlayConnectionOps(deleteUnderlayConnectionOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteUnderlayConnectionOpsOptions model with no property values
				deleteUnderlayConnectionOpsOptionsModelNew := new(transitgatewayapisv1.DeleteUnderlayConnectionOpsOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = transitGatewayApisService.DeleteUnderlayConnectionOps(deleteUnderlayConnectionOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetUnderlayConnectionOps(getUnderlayConnectionOpsOptions *GetUnderlayConnectionOpsOptions) - Operation response error`, func() {
		version := "testString"
		getUnderlayConnectionOpsPath := "/ops/underlay_connections/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getUnderlayConnectionOpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetUnderlayConnectionOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetUnderlayConnectionOpsOptions model
				getUnderlayConnectionOpsOptionsModel := new(transitgatewayapisv1.GetUnderlayConnectionOpsOptions)
				getUnderlayConnectionOpsOptionsModel.ID = core.StringPtr("testString")
				getUnderlayConnectionOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.GetUnderlayConnectionOps(getUnderlayConnectionOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.GetUnderlayConnectionOps(getUnderlayConnectionOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetUnderlayConnectionOps(getUnderlayConnectionOpsOptions *GetUnderlayConnectionOpsOptions)`, func() {
		version := "testString"
		getUnderlayConnectionOpsPath := "/ops/underlay_connections/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getUnderlayConnectionOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "database_id": 234, "id": "0c492442-6f36-4a9b-9712-77379c0ca1e1", "leak_route_distinguisher": "47902:3255120092", "network_account_id": "28e4d90ac7504be694471ee66e70d0d5", "network_id": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "network_type": "vpc", "route_distinguisher": "47902:3255120092", "route_target": "47902:3255120092", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke GetUnderlayConnectionOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the GetUnderlayConnectionOpsOptions model
				getUnderlayConnectionOpsOptionsModel := new(transitgatewayapisv1.GetUnderlayConnectionOpsOptions)
				getUnderlayConnectionOpsOptionsModel.ID = core.StringPtr("testString")
				getUnderlayConnectionOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.GetUnderlayConnectionOpsWithContext(ctx, getUnderlayConnectionOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.GetUnderlayConnectionOps(getUnderlayConnectionOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.GetUnderlayConnectionOpsWithContext(ctx, getUnderlayConnectionOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getUnderlayConnectionOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "database_id": 234, "id": "0c492442-6f36-4a9b-9712-77379c0ca1e1", "leak_route_distinguisher": "47902:3255120092", "network_account_id": "28e4d90ac7504be694471ee66e70d0d5", "network_id": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "network_type": "vpc", "route_distinguisher": "47902:3255120092", "route_target": "47902:3255120092", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke GetUnderlayConnectionOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.GetUnderlayConnectionOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetUnderlayConnectionOpsOptions model
				getUnderlayConnectionOpsOptionsModel := new(transitgatewayapisv1.GetUnderlayConnectionOpsOptions)
				getUnderlayConnectionOpsOptionsModel.ID = core.StringPtr("testString")
				getUnderlayConnectionOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.GetUnderlayConnectionOps(getUnderlayConnectionOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetUnderlayConnectionOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetUnderlayConnectionOpsOptions model
				getUnderlayConnectionOpsOptionsModel := new(transitgatewayapisv1.GetUnderlayConnectionOpsOptions)
				getUnderlayConnectionOpsOptionsModel.ID = core.StringPtr("testString")
				getUnderlayConnectionOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.GetUnderlayConnectionOps(getUnderlayConnectionOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetUnderlayConnectionOpsOptions model with no property values
				getUnderlayConnectionOpsOptionsModelNew := new(transitgatewayapisv1.GetUnderlayConnectionOpsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.GetUnderlayConnectionOps(getUnderlayConnectionOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetUnderlayConnectionOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetUnderlayConnectionOpsOptions model
				getUnderlayConnectionOpsOptionsModel := new(transitgatewayapisv1.GetUnderlayConnectionOpsOptions)
				getUnderlayConnectionOpsOptionsModel.ID = core.StringPtr("testString")
				getUnderlayConnectionOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.GetUnderlayConnectionOps(getUnderlayConnectionOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetTransitGatewayNetworksOps(getTransitGatewayNetworksOpsOptions *GetTransitGatewayNetworksOpsOptions) - Operation response error`, func() {
		version := "testString"
		getTransitGatewayNetworksOpsPath := "/ops/network_types/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTransitGatewayNetworksOpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["network_id"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetTransitGatewayNetworksOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetTransitGatewayNetworksOpsOptions model
				getTransitGatewayNetworksOpsOptionsModel := new(transitgatewayapisv1.GetTransitGatewayNetworksOpsOptions)
				getTransitGatewayNetworksOpsOptionsModel.NetworkType = core.StringPtr("testString")
				getTransitGatewayNetworksOpsOptionsModel.NetworkID = core.StringPtr("testString")
				getTransitGatewayNetworksOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.GetTransitGatewayNetworksOps(getTransitGatewayNetworksOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.GetTransitGatewayNetworksOps(getTransitGatewayNetworksOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetTransitGatewayNetworksOps(getTransitGatewayNetworksOpsOptions *GetTransitGatewayNetworksOpsOptions)`, func() {
		version := "testString"
		getTransitGatewayNetworksOpsPath := "/ops/network_types/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTransitGatewayNetworksOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["network_id"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"crn": "crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "imported_route_targets": ["47902:3255120092"], "name": "vpc1", "resource_group": {"id": "56969d6043e9465c883cb9f7363e78e8", "href": "https://resource-manager.bluemix.net/v1/resource_groups/56969d6043e9465c883cb9f7363e78e8"}, "route_distinguisher": "47902:3255120092", "route_target": "47902:3255120092", "status": "available", "classic_access": false, "health_state": "degraded", "is_fused": false, "resource_type": "vpc"}`)
				}))
			})
			It(`Invoke GetTransitGatewayNetworksOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the GetTransitGatewayNetworksOpsOptions model
				getTransitGatewayNetworksOpsOptionsModel := new(transitgatewayapisv1.GetTransitGatewayNetworksOpsOptions)
				getTransitGatewayNetworksOpsOptionsModel.NetworkType = core.StringPtr("testString")
				getTransitGatewayNetworksOpsOptionsModel.NetworkID = core.StringPtr("testString")
				getTransitGatewayNetworksOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.GetTransitGatewayNetworksOpsWithContext(ctx, getTransitGatewayNetworksOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.GetTransitGatewayNetworksOps(getTransitGatewayNetworksOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.GetTransitGatewayNetworksOpsWithContext(ctx, getTransitGatewayNetworksOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTransitGatewayNetworksOpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["network_id"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"crn": "crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4", "imported_route_targets": ["47902:3255120092"], "name": "vpc1", "resource_group": {"id": "56969d6043e9465c883cb9f7363e78e8", "href": "https://resource-manager.bluemix.net/v1/resource_groups/56969d6043e9465c883cb9f7363e78e8"}, "route_distinguisher": "47902:3255120092", "route_target": "47902:3255120092", "status": "available", "classic_access": false, "health_state": "degraded", "is_fused": false, "resource_type": "vpc"}`)
				}))
			})
			It(`Invoke GetTransitGatewayNetworksOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.GetTransitGatewayNetworksOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetTransitGatewayNetworksOpsOptions model
				getTransitGatewayNetworksOpsOptionsModel := new(transitgatewayapisv1.GetTransitGatewayNetworksOpsOptions)
				getTransitGatewayNetworksOpsOptionsModel.NetworkType = core.StringPtr("testString")
				getTransitGatewayNetworksOpsOptionsModel.NetworkID = core.StringPtr("testString")
				getTransitGatewayNetworksOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.GetTransitGatewayNetworksOps(getTransitGatewayNetworksOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetTransitGatewayNetworksOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetTransitGatewayNetworksOpsOptions model
				getTransitGatewayNetworksOpsOptionsModel := new(transitgatewayapisv1.GetTransitGatewayNetworksOpsOptions)
				getTransitGatewayNetworksOpsOptionsModel.NetworkType = core.StringPtr("testString")
				getTransitGatewayNetworksOpsOptionsModel.NetworkID = core.StringPtr("testString")
				getTransitGatewayNetworksOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.GetTransitGatewayNetworksOps(getTransitGatewayNetworksOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetTransitGatewayNetworksOpsOptions model with no property values
				getTransitGatewayNetworksOpsOptionsModelNew := new(transitgatewayapisv1.GetTransitGatewayNetworksOpsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.GetTransitGatewayNetworksOps(getTransitGatewayNetworksOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetTransitGatewayNetworksOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the GetTransitGatewayNetworksOpsOptions model
				getTransitGatewayNetworksOpsOptionsModel := new(transitgatewayapisv1.GetTransitGatewayNetworksOpsOptions)
				getTransitGatewayNetworksOpsOptionsModel.NetworkType = core.StringPtr("testString")
				getTransitGatewayNetworksOpsOptionsModel.NetworkID = core.StringPtr("testString")
				getTransitGatewayNetworksOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.GetTransitGatewayNetworksOps(getTransitGatewayNetworksOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateTransitGatewayNetworksActionsOps(createTransitGatewayNetworksActionsOpsOptions *CreateTransitGatewayNetworksActionsOpsOptions) - Operation response error`, func() {
		version := "testString"
		createTransitGatewayNetworksActionsOpsPath := "/ops/network_types/testString/actions"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createTransitGatewayNetworksActionsOpsPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["network_id"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateTransitGatewayNetworksActionsOps with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateTransitGatewayNetworksActionsOpsOptions model
				createTransitGatewayNetworksActionsOpsOptionsModel := new(transitgatewayapisv1.CreateTransitGatewayNetworksActionsOpsOptions)
				createTransitGatewayNetworksActionsOpsOptionsModel.NetworkType = core.StringPtr("testString")
				createTransitGatewayNetworksActionsOpsOptionsModel.NetworkID = core.StringPtr("testString")
				createTransitGatewayNetworksActionsOpsOptionsModel.Action = core.StringPtr("validate_configuration")
				createTransitGatewayNetworksActionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.CreateTransitGatewayNetworksActionsOps(createTransitGatewayNetworksActionsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.CreateTransitGatewayNetworksActionsOps(createTransitGatewayNetworksActionsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateTransitGatewayNetworksActionsOps(createTransitGatewayNetworksActionsOpsOptions *CreateTransitGatewayNetworksActionsOpsOptions)`, func() {
		version := "testString"
		createTransitGatewayNetworksActionsOpsPath := "/ops/network_types/testString/actions"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createTransitGatewayNetworksActionsOpsPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["network_id"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"extra_network_gateways": ["47902:3255120092"], "missing_network_gateways": ["47902:3255120092"]}`)
				}))
			})
			It(`Invoke CreateTransitGatewayNetworksActionsOps successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the CreateTransitGatewayNetworksActionsOpsOptions model
				createTransitGatewayNetworksActionsOpsOptionsModel := new(transitgatewayapisv1.CreateTransitGatewayNetworksActionsOpsOptions)
				createTransitGatewayNetworksActionsOpsOptionsModel.NetworkType = core.StringPtr("testString")
				createTransitGatewayNetworksActionsOpsOptionsModel.NetworkID = core.StringPtr("testString")
				createTransitGatewayNetworksActionsOpsOptionsModel.Action = core.StringPtr("validate_configuration")
				createTransitGatewayNetworksActionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.CreateTransitGatewayNetworksActionsOpsWithContext(ctx, createTransitGatewayNetworksActionsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.CreateTransitGatewayNetworksActionsOps(createTransitGatewayNetworksActionsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.CreateTransitGatewayNetworksActionsOpsWithContext(ctx, createTransitGatewayNetworksActionsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createTransitGatewayNetworksActionsOpsPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["network_id"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"extra_network_gateways": ["47902:3255120092"], "missing_network_gateways": ["47902:3255120092"]}`)
				}))
			})
			It(`Invoke CreateTransitGatewayNetworksActionsOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.CreateTransitGatewayNetworksActionsOps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateTransitGatewayNetworksActionsOpsOptions model
				createTransitGatewayNetworksActionsOpsOptionsModel := new(transitgatewayapisv1.CreateTransitGatewayNetworksActionsOpsOptions)
				createTransitGatewayNetworksActionsOpsOptionsModel.NetworkType = core.StringPtr("testString")
				createTransitGatewayNetworksActionsOpsOptionsModel.NetworkID = core.StringPtr("testString")
				createTransitGatewayNetworksActionsOpsOptionsModel.Action = core.StringPtr("validate_configuration")
				createTransitGatewayNetworksActionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.CreateTransitGatewayNetworksActionsOps(createTransitGatewayNetworksActionsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateTransitGatewayNetworksActionsOps with error: Operation validation and request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateTransitGatewayNetworksActionsOpsOptions model
				createTransitGatewayNetworksActionsOpsOptionsModel := new(transitgatewayapisv1.CreateTransitGatewayNetworksActionsOpsOptions)
				createTransitGatewayNetworksActionsOpsOptionsModel.NetworkType = core.StringPtr("testString")
				createTransitGatewayNetworksActionsOpsOptionsModel.NetworkID = core.StringPtr("testString")
				createTransitGatewayNetworksActionsOpsOptionsModel.Action = core.StringPtr("validate_configuration")
				createTransitGatewayNetworksActionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.CreateTransitGatewayNetworksActionsOps(createTransitGatewayNetworksActionsOpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateTransitGatewayNetworksActionsOpsOptions model with no property values
				createTransitGatewayNetworksActionsOpsOptionsModelNew := new(transitgatewayapisv1.CreateTransitGatewayNetworksActionsOpsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = transitGatewayApisService.CreateTransitGatewayNetworksActionsOps(createTransitGatewayNetworksActionsOpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateTransitGatewayNetworksActionsOps successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the CreateTransitGatewayNetworksActionsOpsOptions model
				createTransitGatewayNetworksActionsOpsOptionsModel := new(transitgatewayapisv1.CreateTransitGatewayNetworksActionsOpsOptions)
				createTransitGatewayNetworksActionsOpsOptionsModel.NetworkType = core.StringPtr("testString")
				createTransitGatewayNetworksActionsOpsOptionsModel.NetworkID = core.StringPtr("testString")
				createTransitGatewayNetworksActionsOpsOptionsModel.Action = core.StringPtr("validate_configuration")
				createTransitGatewayNetworksActionsOpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.CreateTransitGatewayNetworksActionsOps(createTransitGatewayNetworksActionsOpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListConnections(listConnectionsOptions *ListConnectionsOptions) - Operation response error`, func() {
		version := "testString"
		listConnectionsPath := "/connections"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listConnectionsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["network_id"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListConnections with error: Operation response processing error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListConnectionsOptions model
				listConnectionsOptionsModel := new(transitgatewayapisv1.ListConnectionsOptions)
				listConnectionsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listConnectionsOptionsModel.Start = core.StringPtr("testString")
				listConnectionsOptionsModel.NetworkID = core.StringPtr("testString")
				listConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := transitGatewayApisService.ListConnections(listConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				transitGatewayApisService.EnableRetries(0, 0)
				result, response, operationErr = transitGatewayApisService.ListConnections(listConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListConnections(listConnectionsOptions *ListConnectionsOptions)`, func() {
		version := "testString"
		listConnectionsPath := "/connections"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listConnectionsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["network_id"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"connections": [{"base_connection_id": "975f58c1-afe7-469a-9727-7f3d720f2d32", "created_at": "2019-01-01T12:00:00.000Z", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "local_bgp_asn": 64490, "local_gateway_ip": "192.168.100.1", "local_tunnel_ip": "192.168.129.2", "mtu": 9000, "name": "Transit_Service_SJ_DL", "network_account_id": "28e4d90ac7504be694471ee66e70d0d5", "network_id": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "network_type": "vpc", "prefix_filters": [{"action": "permit", "before": "1a15dcab-7e40-45e1-b7c5-bc690eaa9782", "created_at": "2019-01-01T12:00:00.000Z", "ge": 0, "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "le": 32, "prefix": "192.168.100.0/24", "updated_at": "2019-01-01T12:00:00.000Z"}], "prefix_filters_default": "permit", "remote_bgp_asn": 65010, "remote_gateway_ip": "10.242.63.12", "remote_tunnel_ip": "192.168.129.1", "request_status": "pending", "status": "attached", "transit_gateway": {"crn": "crn:v1:bluemix:public:transit:us-south:a/123456::gateway:456f58c1-afe7-123a-0a0a-7f3d720f1a44", "id": "456f58c1-afe7-123a-0a0a-7f3d720f1a44", "name": "my-transit-gw100"}, "updated_at": "2019-01-01T12:00:00.000Z", "zone": {"name": "us-south-1"}}], "first": {"href": "https://transit.cloud.ibm.com/v1/connections?limit=50"}, "limit": 50, "next": {"href": "https://transit.cloud.ibm.com/v1/connections?start=MjAyMC0wNS0wOFQxNDoxNzowMy45NzQ5NzNa&limit=50", "start": "MjAyMC0wNS0wOFQxNDoxNzowMy45NzQ5NzNa"}}`)
				}))
			})
			It(`Invoke ListConnections successfully with retries`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())
				transitGatewayApisService.EnableRetries(0, 0)

				// Construct an instance of the ListConnectionsOptions model
				listConnectionsOptionsModel := new(transitgatewayapisv1.ListConnectionsOptions)
				listConnectionsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listConnectionsOptionsModel.Start = core.StringPtr("testString")
				listConnectionsOptionsModel.NetworkID = core.StringPtr("testString")
				listConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := transitGatewayApisService.ListConnectionsWithContext(ctx, listConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				transitGatewayApisService.DisableRetries()
				result, response, operationErr := transitGatewayApisService.ListConnections(listConnectionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = transitGatewayApisService.ListConnectionsWithContext(ctx, listConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listConnectionsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["network_id"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"connections": [{"base_connection_id": "975f58c1-afe7-469a-9727-7f3d720f2d32", "created_at": "2019-01-01T12:00:00.000Z", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "local_bgp_asn": 64490, "local_gateway_ip": "192.168.100.1", "local_tunnel_ip": "192.168.129.2", "mtu": 9000, "name": "Transit_Service_SJ_DL", "network_account_id": "28e4d90ac7504be694471ee66e70d0d5", "network_id": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "network_type": "vpc", "prefix_filters": [{"action": "permit", "before": "1a15dcab-7e40-45e1-b7c5-bc690eaa9782", "created_at": "2019-01-01T12:00:00.000Z", "ge": 0, "id": "1a15dcab-7e30-45e1-b7c5-bc690eaa9865", "le": 32, "prefix": "192.168.100.0/24", "updated_at": "2019-01-01T12:00:00.000Z"}], "prefix_filters_default": "permit", "remote_bgp_asn": 65010, "remote_gateway_ip": "10.242.63.12", "remote_tunnel_ip": "192.168.129.1", "request_status": "pending", "status": "attached", "transit_gateway": {"crn": "crn:v1:bluemix:public:transit:us-south:a/123456::gateway:456f58c1-afe7-123a-0a0a-7f3d720f1a44", "id": "456f58c1-afe7-123a-0a0a-7f3d720f1a44", "name": "my-transit-gw100"}, "updated_at": "2019-01-01T12:00:00.000Z", "zone": {"name": "us-south-1"}}], "first": {"href": "https://transit.cloud.ibm.com/v1/connections?limit=50"}, "limit": 50, "next": {"href": "https://transit.cloud.ibm.com/v1/connections?start=MjAyMC0wNS0wOFQxNDoxNzowMy45NzQ5NzNa&limit=50", "start": "MjAyMC0wNS0wOFQxNDoxNzowMy45NzQ5NzNa"}}`)
				}))
			})
			It(`Invoke ListConnections successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := transitGatewayApisService.ListConnections(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListConnectionsOptions model
				listConnectionsOptionsModel := new(transitgatewayapisv1.ListConnectionsOptions)
				listConnectionsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listConnectionsOptionsModel.Start = core.StringPtr("testString")
				listConnectionsOptionsModel.NetworkID = core.StringPtr("testString")
				listConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = transitGatewayApisService.ListConnections(listConnectionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListConnections with error: Operation request error`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListConnectionsOptions model
				listConnectionsOptionsModel := new(transitgatewayapisv1.ListConnectionsOptions)
				listConnectionsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listConnectionsOptionsModel.Start = core.StringPtr("testString")
				listConnectionsOptionsModel.NetworkID = core.StringPtr("testString")
				listConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := transitGatewayApisService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := transitGatewayApisService.ListConnections(listConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListConnections successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				// Construct an instance of the ListConnectionsOptions model
				listConnectionsOptionsModel := new(transitgatewayapisv1.ListConnectionsOptions)
				listConnectionsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listConnectionsOptionsModel.Start = core.StringPtr("testString")
				listConnectionsOptionsModel.NetworkID = core.StringPtr("testString")
				listConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := transitGatewayApisService.ListConnections(listConnectionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Test pagination helper method on response`, func() {
			It(`Invoke GetNextStart successfully`, func() {
				responseObject := new(transitgatewayapisv1.TransitConnectionCollection)
				nextObject := new(transitgatewayapisv1.PaginationNextConnection)
				nextObject.Start = core.StringPtr("abc-123")
				responseObject.Next = nextObject
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(Equal(core.StringPtr("abc-123")))
			})
			It(`Invoke GetNextStart without a "Next" property in the response`, func() {
				responseObject := new(transitgatewayapisv1.TransitConnectionCollection)
	
				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(BeNil())
			})
		})
		Context(`Using mock server endpoint - paginated response`, func() {
			BeforeEach(func() {
				var requestNumber int = 0
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listConnectionsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					requestNumber++
					if requestNumber == 1 {
						fmt.Fprintf(res, "%s", `{"next":{"start":"1"},"total_count":2,"limit":1,"connections":[{"base_connection_id":"975f58c1-afe7-469a-9727-7f3d720f2d32","created_at":"2019-01-01T12:00:00.000Z","id":"1a15dca5-7e33-45e1-b7c5-bc690e569531","local_bgp_asn":64490,"local_gateway_ip":"192.168.100.1","local_tunnel_ip":"192.168.129.2","mtu":9000,"name":"Transit_Service_SJ_DL","network_account_id":"28e4d90ac7504be694471ee66e70d0d5","network_id":"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b","network_type":"vpc","prefix_filters":[{"action":"permit","before":"1a15dcab-7e40-45e1-b7c5-bc690eaa9782","created_at":"2019-01-01T12:00:00.000Z","ge":0,"id":"1a15dcab-7e30-45e1-b7c5-bc690eaa9865","le":32,"prefix":"192.168.100.0/24","updated_at":"2019-01-01T12:00:00.000Z"}],"prefix_filters_default":"permit","remote_bgp_asn":65010,"remote_gateway_ip":"10.242.63.12","remote_tunnel_ip":"192.168.129.1","request_status":"pending","status":"attached","transit_gateway":{"crn":"crn:v1:bluemix:public:transit:us-south:a/123456::gateway:456f58c1-afe7-123a-0a0a-7f3d720f1a44","id":"456f58c1-afe7-123a-0a0a-7f3d720f1a44","name":"my-transit-gw100"},"updated_at":"2019-01-01T12:00:00.000Z","zone":{"name":"us-south-1"}}]}`)
					} else if requestNumber == 2 {
						fmt.Fprintf(res, "%s", `{"total_count":2,"limit":1,"connections":[{"base_connection_id":"975f58c1-afe7-469a-9727-7f3d720f2d32","created_at":"2019-01-01T12:00:00.000Z","id":"1a15dca5-7e33-45e1-b7c5-bc690e569531","local_bgp_asn":64490,"local_gateway_ip":"192.168.100.1","local_tunnel_ip":"192.168.129.2","mtu":9000,"name":"Transit_Service_SJ_DL","network_account_id":"28e4d90ac7504be694471ee66e70d0d5","network_id":"crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b","network_type":"vpc","prefix_filters":[{"action":"permit","before":"1a15dcab-7e40-45e1-b7c5-bc690eaa9782","created_at":"2019-01-01T12:00:00.000Z","ge":0,"id":"1a15dcab-7e30-45e1-b7c5-bc690eaa9865","le":32,"prefix":"192.168.100.0/24","updated_at":"2019-01-01T12:00:00.000Z"}],"prefix_filters_default":"permit","remote_bgp_asn":65010,"remote_gateway_ip":"10.242.63.12","remote_tunnel_ip":"192.168.129.1","request_status":"pending","status":"attached","transit_gateway":{"crn":"crn:v1:bluemix:public:transit:us-south:a/123456::gateway:456f58c1-afe7-123a-0a0a-7f3d720f1a44","id":"456f58c1-afe7-123a-0a0a-7f3d720f1a44","name":"my-transit-gw100"},"updated_at":"2019-01-01T12:00:00.000Z","zone":{"name":"us-south-1"}}]}`)
					} else {
						res.WriteHeader(400)
					}
				}))
			})
			It(`Use ConnectionsPager.GetNext successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				listConnectionsOptionsModel := &transitgatewayapisv1.ListConnectionsOptions{
					Limit: core.Int64Ptr(int64(10)),
					NetworkID: core.StringPtr("testString"),
				}

				pager, err := transitGatewayApisService.NewConnectionsPager(listConnectionsOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				var allResults []transitgatewayapisv1.TransitConnection
				for pager.HasNext() {
					nextPage, err := pager.GetNext()
					Expect(err).To(BeNil())
					Expect(nextPage).ToNot(BeNil())
					allResults = append(allResults, nextPage...)
				}
				Expect(len(allResults)).To(Equal(2))
			})
			It(`Use ConnectionsPager.GetAll successfully`, func() {
				transitGatewayApisService, serviceErr := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version: core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(transitGatewayApisService).ToNot(BeNil())

				listConnectionsOptionsModel := &transitgatewayapisv1.ListConnectionsOptions{
					Limit: core.Int64Ptr(int64(10)),
					NetworkID: core.StringPtr("testString"),
				}

				pager, err := transitGatewayApisService.NewConnectionsPager(listConnectionsOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				allResults, err := pager.GetAll()
				Expect(err).To(BeNil())
				Expect(allResults).ToNot(BeNil())
				Expect(len(allResults)).To(Equal(2))
			})
		})
	})
	Describe(`Model constructor tests`, func() {
		Context(`Using a service client instance`, func() {
			version := "testString"
			transitGatewayApisService, _ := transitgatewayapisv1.NewTransitGatewayApisV1(&transitgatewayapisv1.TransitGatewayApisV1Options{
				URL:           "http://transitgatewayapisv1modelgenerator.com",
				Authenticator: &core.NoAuthAuthenticator{},
				Version: core.StringPtr(version),
			})
			It(`Invoke NewCreateDataCenterOpsOptions successfully`, func() {
				// Construct an instance of the CreateDataCenterOpsOptions model
				locationName := "testString"
				createDataCenterOpsOptionsHidden := false
				createDataCenterOpsOptionsName := "dal10"
				createDataCenterOpsOptionsTargetDeviceQuantity := int64(2)
				createDataCenterOpsOptionsTgrBgpAsn := int64(4201065540)
				createDataCenterOpsOptionsZoneName := "us-south-1"
				createDataCenterOpsOptionsModel := transitGatewayApisService.NewCreateDataCenterOpsOptions(locationName, createDataCenterOpsOptionsHidden, createDataCenterOpsOptionsName, createDataCenterOpsOptionsTargetDeviceQuantity, createDataCenterOpsOptionsTgrBgpAsn, createDataCenterOpsOptionsZoneName)
				createDataCenterOpsOptionsModel.SetLocationName("testString")
				createDataCenterOpsOptionsModel.SetHidden(false)
				createDataCenterOpsOptionsModel.SetName("dal10")
				createDataCenterOpsOptionsModel.SetTargetDeviceQuantity(int64(2))
				createDataCenterOpsOptionsModel.SetTgrBgpAsn(int64(4201065540))
				createDataCenterOpsOptionsModel.SetZoneName("us-south-1")
				createDataCenterOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createDataCenterOpsOptionsModel).ToNot(BeNil())
				Expect(createDataCenterOpsOptionsModel.LocationName).To(Equal(core.StringPtr("testString")))
				Expect(createDataCenterOpsOptionsModel.Hidden).To(Equal(core.BoolPtr(false)))
				Expect(createDataCenterOpsOptionsModel.Name).To(Equal(core.StringPtr("dal10")))
				Expect(createDataCenterOpsOptionsModel.TargetDeviceQuantity).To(Equal(core.Int64Ptr(int64(2))))
				Expect(createDataCenterOpsOptionsModel.TgrBgpAsn).To(Equal(core.Int64Ptr(int64(4201065540))))
				Expect(createDataCenterOpsOptionsModel.ZoneName).To(Equal(core.StringPtr("us-south-1")))
				Expect(createDataCenterOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateExecutionGatewayDeviceActionOptions successfully`, func() {
				// Construct an instance of the CreateExecutionGatewayDeviceActionOptions model
				id := "testString"
				createExecutionGatewayDeviceActionOptionsAction := "enable"
				createExecutionGatewayDeviceActionOptionsModel := transitGatewayApisService.NewCreateExecutionGatewayDeviceActionOptions(id, createExecutionGatewayDeviceActionOptionsAction)
				createExecutionGatewayDeviceActionOptionsModel.SetID("testString")
				createExecutionGatewayDeviceActionOptionsModel.SetAction("enable")
				createExecutionGatewayDeviceActionOptionsModel.SetDatabaseID("234")
				createExecutionGatewayDeviceActionOptionsModel.SetGatewayID("234")
				createExecutionGatewayDeviceActionOptionsModel.SetSyncCommand("start")
				createExecutionGatewayDeviceActionOptionsModel.SetTunnelID(int64(48453))
				createExecutionGatewayDeviceActionOptionsModel.SetWorkflow("delete_transit_connection")
				createExecutionGatewayDeviceActionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createExecutionGatewayDeviceActionOptionsModel).ToNot(BeNil())
				Expect(createExecutionGatewayDeviceActionOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(createExecutionGatewayDeviceActionOptionsModel.Action).To(Equal(core.StringPtr("enable")))
				Expect(createExecutionGatewayDeviceActionOptionsModel.DatabaseID).To(Equal(core.StringPtr("234")))
				Expect(createExecutionGatewayDeviceActionOptionsModel.GatewayID).To(Equal(core.StringPtr("234")))
				Expect(createExecutionGatewayDeviceActionOptionsModel.SyncCommand).To(Equal(core.StringPtr("start")))
				Expect(createExecutionGatewayDeviceActionOptionsModel.TunnelID).To(Equal(core.Int64Ptr(int64(48453))))
				Expect(createExecutionGatewayDeviceActionOptionsModel.Workflow).To(Equal(core.StringPtr("delete_transit_connection")))
				Expect(createExecutionGatewayDeviceActionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateExecutionGatewayDeviceCommandsOptions successfully`, func() {
				// Construct an instance of the CreateExecutionGatewayDeviceCommandsOptions model
				id := "testString"
				createExecutionGatewayDeviceCommandsOptionsCommand := "list_gateways"
				createExecutionGatewayDeviceCommandsOptionsModel := transitGatewayApisService.NewCreateExecutionGatewayDeviceCommandsOptions(id, createExecutionGatewayDeviceCommandsOptionsCommand)
				createExecutionGatewayDeviceCommandsOptionsModel.SetID("testString")
				createExecutionGatewayDeviceCommandsOptionsModel.SetCommand("list_gateways")
				createExecutionGatewayDeviceCommandsOptionsModel.SetNexthopIp("10.10.0.1")
				createExecutionGatewayDeviceCommandsOptionsModel.SetTimeInterval(int64(60))
				createExecutionGatewayDeviceCommandsOptionsModel.SetVrfID("HUB-123-SPOKE-456")
				createExecutionGatewayDeviceCommandsOptionsModel.SetVrfsCountLimit(int64(10))
				createExecutionGatewayDeviceCommandsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createExecutionGatewayDeviceCommandsOptionsModel).ToNot(BeNil())
				Expect(createExecutionGatewayDeviceCommandsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(createExecutionGatewayDeviceCommandsOptionsModel.Command).To(Equal(core.StringPtr("list_gateways")))
				Expect(createExecutionGatewayDeviceCommandsOptionsModel.NexthopIp).To(Equal(core.StringPtr("10.10.0.1")))
				Expect(createExecutionGatewayDeviceCommandsOptionsModel.TimeInterval).To(Equal(core.Int64Ptr(int64(60))))
				Expect(createExecutionGatewayDeviceCommandsOptionsModel.VrfID).To(Equal(core.StringPtr("HUB-123-SPOKE-456")))
				Expect(createExecutionGatewayDeviceCommandsOptionsModel.VrfsCountLimit).To(Equal(core.Int64Ptr(int64(10))))
				Expect(createExecutionGatewayDeviceCommandsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateFeatureOptions successfully`, func() {
				// Construct an instance of the CreateFeatureOptions model
				createFeatureOptionsName := "gateway_v2"
				createFeatureOptionsModel := transitGatewayApisService.NewCreateFeatureOptions(createFeatureOptionsName)
				createFeatureOptionsModel.SetName("gateway_v2")
				createFeatureOptionsModel.SetGenerallyAvailable(false)
				createFeatureOptionsModel.SetInclude("testString")
				createFeatureOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createFeatureOptionsModel).ToNot(BeNil())
				Expect(createFeatureOptionsModel.Name).To(Equal(core.StringPtr("gateway_v2")))
				Expect(createFeatureOptionsModel.GenerallyAvailable).To(Equal(core.BoolPtr(false)))
				Expect(createFeatureOptionsModel.Include).To(Equal(core.StringPtr("testString")))
				Expect(createFeatureOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateGatewayDeviceAuditOptions successfully`, func() {
				// Construct an instance of the CreateGatewayDeviceAuditOptions model
				id := "testString"
				createGatewayDeviceAuditOptionsModel := transitGatewayApisService.NewCreateGatewayDeviceAuditOptions(id)
				createGatewayDeviceAuditOptionsModel.SetID("testString")
				createGatewayDeviceAuditOptionsModel.SetAuditType("full")
				createGatewayDeviceAuditOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createGatewayDeviceAuditOptionsModel).ToNot(BeNil())
				Expect(createGatewayDeviceAuditOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(createGatewayDeviceAuditOptionsModel.AuditType).To(Equal(core.StringPtr("full")))
				Expect(createGatewayDeviceAuditOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateGatewayDeviceOptions successfully`, func() {
				// Construct an instance of the CreateGatewayDeviceOptions model
				createGatewayDeviceOptionsDataCenter := "dal10"
				createGatewayDeviceOptionsGatewayLocation := "us-south"
				createGatewayDeviceOptionsHostname := "tsr01dal01.softlayer.local"
				createGatewayDeviceOptionsModel := transitGatewayApisService.NewCreateGatewayDeviceOptions(createGatewayDeviceOptionsDataCenter, createGatewayDeviceOptionsGatewayLocation, createGatewayDeviceOptionsHostname)
				createGatewayDeviceOptionsModel.SetDataCenter("dal10")
				createGatewayDeviceOptionsModel.SetGatewayLocation("us-south")
				createGatewayDeviceOptionsModel.SetHostname("tsr01dal01.softlayer.local")
				createGatewayDeviceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createGatewayDeviceOptionsModel).ToNot(BeNil())
				Expect(createGatewayDeviceOptionsModel.DataCenter).To(Equal(core.StringPtr("dal10")))
				Expect(createGatewayDeviceOptionsModel.GatewayLocation).To(Equal(core.StringPtr("us-south")))
				Expect(createGatewayDeviceOptionsModel.Hostname).To(Equal(core.StringPtr("tsr01dal01.softlayer.local")))
				Expect(createGatewayDeviceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateGatewayDevicePlacementTagOpsOptions successfully`, func() {
				// Construct an instance of the CreateGatewayDevicePlacementTagOpsOptions model
				id := "testString"
				createGatewayDevicePlacementTagOpsOptionsName := "Full"
				createGatewayDevicePlacementTagOpsOptionsModel := transitGatewayApisService.NewCreateGatewayDevicePlacementTagOpsOptions(id, createGatewayDevicePlacementTagOpsOptionsName)
				createGatewayDevicePlacementTagOpsOptionsModel.SetID("testString")
				createGatewayDevicePlacementTagOpsOptionsModel.SetName("Full")
				createGatewayDevicePlacementTagOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createGatewayDevicePlacementTagOpsOptionsModel).ToNot(BeNil())
				Expect(createGatewayDevicePlacementTagOpsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(createGatewayDevicePlacementTagOpsOptionsModel.Name).To(Equal(core.StringPtr("Full")))
				Expect(createGatewayDevicePlacementTagOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateGatewayLocationLocalLocationOptions successfully`, func() {
				// Construct an instance of the CreateGatewayLocationLocalLocationOptions model
				locationName := "testString"
				createGatewayLocationLocalLocationOptionsDisplayName := "Dallas"
				createGatewayLocationLocalLocationOptionsName := "us-south"
				createGatewayLocationLocalLocationOptionsSupportedConnectionTypes := []string{"classic", "vpc", "directlink", "gre_tunnel", "power_virtual_server", "unbound_gre_tunnel"}
				createGatewayLocationLocalLocationOptionsType := "region"
				createGatewayLocationLocalLocationOptionsModel := transitGatewayApisService.NewCreateGatewayLocationLocalLocationOptions(locationName, createGatewayLocationLocalLocationOptionsDisplayName, createGatewayLocationLocalLocationOptionsName, createGatewayLocationLocalLocationOptionsSupportedConnectionTypes, createGatewayLocationLocalLocationOptionsType)
				createGatewayLocationLocalLocationOptionsModel.SetLocationName("testString")
				createGatewayLocationLocalLocationOptionsModel.SetDisplayName("Dallas")
				createGatewayLocationLocalLocationOptionsModel.SetName("us-south")
				createGatewayLocationLocalLocationOptionsModel.SetSupportedConnectionTypes([]string{"classic", "vpc", "directlink", "gre_tunnel", "power_virtual_server", "unbound_gre_tunnel"})
				createGatewayLocationLocalLocationOptionsModel.SetType("region")
				createGatewayLocationLocalLocationOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createGatewayLocationLocalLocationOptionsModel).ToNot(BeNil())
				Expect(createGatewayLocationLocalLocationOptionsModel.LocationName).To(Equal(core.StringPtr("testString")))
				Expect(createGatewayLocationLocalLocationOptionsModel.DisplayName).To(Equal(core.StringPtr("Dallas")))
				Expect(createGatewayLocationLocalLocationOptionsModel.Name).To(Equal(core.StringPtr("us-south")))
				Expect(createGatewayLocationLocalLocationOptionsModel.SupportedConnectionTypes).To(Equal([]string{"classic", "vpc", "directlink", "gre_tunnel", "power_virtual_server", "unbound_gre_tunnel"}))
				Expect(createGatewayLocationLocalLocationOptionsModel.Type).To(Equal(core.StringPtr("region")))
				Expect(createGatewayLocationLocalLocationOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateGatewayLocationOptions successfully`, func() {
				// Construct an instance of the CreateGatewayLocationOptions model
				createGatewayLocationOptionsBillingLocation := "us"
				createGatewayLocationOptionsName := "us-south"
				createGatewayLocationOptionsType := "region"
				createGatewayLocationOptionsModel := transitGatewayApisService.NewCreateGatewayLocationOptions(createGatewayLocationOptionsBillingLocation, createGatewayLocationOptionsName, createGatewayLocationOptionsType)
				createGatewayLocationOptionsModel.SetBillingLocation("us")
				createGatewayLocationOptionsModel.SetName("us-south")
				createGatewayLocationOptionsModel.SetType("region")
				createGatewayLocationOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createGatewayLocationOptionsModel).ToNot(BeNil())
				Expect(createGatewayLocationOptionsModel.BillingLocation).To(Equal(core.StringPtr("us")))
				Expect(createGatewayLocationOptionsModel.Name).To(Equal(core.StringPtr("us-south")))
				Expect(createGatewayLocationOptionsModel.Type).To(Equal(core.StringPtr("region")))
				Expect(createGatewayLocationOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateTransitAccountActionsOpsOptions successfully`, func() {
				// Construct an instance of the CreateTransitAccountActionsOpsOptions model
				customerAccountID := "testString"
				createTransitAccountActionsOpsOptionsAction := "audit"
				createTransitAccountActionsOpsOptionsModel := transitGatewayApisService.NewCreateTransitAccountActionsOpsOptions(customerAccountID, createTransitAccountActionsOpsOptionsAction)
				createTransitAccountActionsOpsOptionsModel.SetCustomerAccountID("testString")
				createTransitAccountActionsOpsOptionsModel.SetAction("audit")
				createTransitAccountActionsOpsOptionsModel.SetEntryCrn("crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4")
				createTransitAccountActionsOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createTransitAccountActionsOpsOptionsModel).ToNot(BeNil())
				Expect(createTransitAccountActionsOpsOptionsModel.CustomerAccountID).To(Equal(core.StringPtr("testString")))
				Expect(createTransitAccountActionsOpsOptionsModel.Action).To(Equal(core.StringPtr("audit")))
				Expect(createTransitAccountActionsOpsOptionsModel.EntryCrn).To(Equal(core.StringPtr("crn:v1:bluemix:public:transit:dal03:a/57a7d05f36894e3cb9b46a43556d903e::gateway:ef4dcb1a-fee4-41c7-9e11-9cd99e65c1f4")))
				Expect(createTransitAccountActionsOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateTransitGatewayActionsOpsOptions successfully`, func() {
				// Construct an instance of the CreateTransitGatewayActionsOpsOptions model
				id := "testString"
				createTransitGatewayActionsOpsOptionsAction := "suspend"
				createTransitGatewayActionsOpsOptionsModel := transitGatewayApisService.NewCreateTransitGatewayActionsOpsOptions(id, createTransitGatewayActionsOpsOptionsAction)
				createTransitGatewayActionsOpsOptionsModel.SetID("testString")
				createTransitGatewayActionsOpsOptionsModel.SetAction("suspend")
				createTransitGatewayActionsOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createTransitGatewayActionsOpsOptionsModel).ToNot(BeNil())
				Expect(createTransitGatewayActionsOpsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(createTransitGatewayActionsOpsOptionsModel.Action).To(Equal(core.StringPtr("suspend")))
				Expect(createTransitGatewayActionsOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateTransitGatewayConnectionActionsOptions successfully`, func() {
				// Construct an instance of the CreateTransitGatewayConnectionActionsOptions model
				transitGatewayID := "testString"
				id := "testString"
				createTransitGatewayConnectionActionsOptionsAction := "approve"
				createTransitGatewayConnectionActionsOptionsModel := transitGatewayApisService.NewCreateTransitGatewayConnectionActionsOptions(transitGatewayID, id, createTransitGatewayConnectionActionsOptionsAction)
				createTransitGatewayConnectionActionsOptionsModel.SetTransitGatewayID("testString")
				createTransitGatewayConnectionActionsOptionsModel.SetID("testString")
				createTransitGatewayConnectionActionsOptionsModel.SetAction("approve")
				createTransitGatewayConnectionActionsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createTransitGatewayConnectionActionsOptionsModel).ToNot(BeNil())
				Expect(createTransitGatewayConnectionActionsOptionsModel.TransitGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(createTransitGatewayConnectionActionsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(createTransitGatewayConnectionActionsOptionsModel.Action).To(Equal(core.StringPtr("approve")))
				Expect(createTransitGatewayConnectionActionsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateTransitGatewayConnectionDeviceMappingOptions successfully`, func() {
				// Construct an instance of the CreateTransitGatewayConnectionDeviceMappingOptions model
				transitGatewayID := "testString"
				id := "testString"
				createTransitGatewayConnectionDeviceMappingOptionsDeviceID := "0a06fb9b-820f-4c44-8a31-77f1f0806d28"
				createTransitGatewayConnectionDeviceMappingOptionsModel := transitGatewayApisService.NewCreateTransitGatewayConnectionDeviceMappingOptions(transitGatewayID, id, createTransitGatewayConnectionDeviceMappingOptionsDeviceID)
				createTransitGatewayConnectionDeviceMappingOptionsModel.SetTransitGatewayID("testString")
				createTransitGatewayConnectionDeviceMappingOptionsModel.SetID("testString")
				createTransitGatewayConnectionDeviceMappingOptionsModel.SetDeviceID("0a06fb9b-820f-4c44-8a31-77f1f0806d28")
				createTransitGatewayConnectionDeviceMappingOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createTransitGatewayConnectionDeviceMappingOptionsModel).ToNot(BeNil())
				Expect(createTransitGatewayConnectionDeviceMappingOptionsModel.TransitGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(createTransitGatewayConnectionDeviceMappingOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(createTransitGatewayConnectionDeviceMappingOptionsModel.DeviceID).To(Equal(core.StringPtr("0a06fb9b-820f-4c44-8a31-77f1f0806d28")))
				Expect(createTransitGatewayConnectionDeviceMappingOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateTransitGatewayConnectionOptions successfully`, func() {
				// Construct an instance of the TransitGatewayConnectionPrefixFilter model
				transitGatewayConnectionPrefixFilterModel := new(transitgatewayapisv1.TransitGatewayConnectionPrefixFilter)
				Expect(transitGatewayConnectionPrefixFilterModel).ToNot(BeNil())
				transitGatewayConnectionPrefixFilterModel.Action = core.StringPtr("permit")
				transitGatewayConnectionPrefixFilterModel.Ge = core.Int64Ptr(int64(0))
				transitGatewayConnectionPrefixFilterModel.Le = core.Int64Ptr(int64(32))
				transitGatewayConnectionPrefixFilterModel.Prefix = core.StringPtr("192.168.100.0/24")
				Expect(transitGatewayConnectionPrefixFilterModel.Action).To(Equal(core.StringPtr("permit")))
				Expect(transitGatewayConnectionPrefixFilterModel.Ge).To(Equal(core.Int64Ptr(int64(0))))
				Expect(transitGatewayConnectionPrefixFilterModel.Le).To(Equal(core.Int64Ptr(int64(32))))
				Expect(transitGatewayConnectionPrefixFilterModel.Prefix).To(Equal(core.StringPtr("192.168.100.0/24")))

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(transitgatewayapisv1.ZoneIdentityByName)
				Expect(zoneIdentityModel).ToNot(BeNil())
				zoneIdentityModel.Name = core.StringPtr("us-south-1")
				Expect(zoneIdentityModel.Name).To(Equal(core.StringPtr("us-south-1")))

				// Construct an instance of the TransitGatewayConnectionTemplateTransitGatewayConnectionNonRedundantGRETemplate model
				transitGatewayConnectionTemplateModel := new(transitgatewayapisv1.TransitGatewayConnectionTemplateTransitGatewayConnectionNonRedundantGRETemplate)
				Expect(transitGatewayConnectionTemplateModel).ToNot(BeNil())
				transitGatewayConnectionTemplateModel.BaseConnectionID = core.StringPtr("975f58c1-afe7-469a-9727-7f3d720f2d32")
				transitGatewayConnectionTemplateModel.BaseNetworkType = core.StringPtr("classic")
				transitGatewayConnectionTemplateModel.LocalGatewayIp = core.StringPtr("192.168.100.1")
				transitGatewayConnectionTemplateModel.LocalTunnelIp = core.StringPtr("192.168.129.2")
				transitGatewayConnectionTemplateModel.Name = core.StringPtr("Transit_Service_BWTN_SJ_DL")
				transitGatewayConnectionTemplateModel.NetworkAccountID = core.StringPtr("28e4d90ac7504be694471ee66e70d0d5")
				transitGatewayConnectionTemplateModel.NetworkID = core.StringPtr("crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b")
				transitGatewayConnectionTemplateModel.NetworkType = core.StringPtr("vpc")
				transitGatewayConnectionTemplateModel.PrefixFilters = []transitgatewayapisv1.TransitGatewayConnectionPrefixFilter{*transitGatewayConnectionPrefixFilterModel}
				transitGatewayConnectionTemplateModel.PrefixFiltersDefault = core.StringPtr("permit")
				transitGatewayConnectionTemplateModel.RemoteBgpAsn = core.Int64Ptr(int64(65010))
				transitGatewayConnectionTemplateModel.RemoteGatewayIp = core.StringPtr("10.242.63.12")
				transitGatewayConnectionTemplateModel.RemoteTunnelIp = core.StringPtr("192.168.129.1")
				transitGatewayConnectionTemplateModel.Zone = zoneIdentityModel
				Expect(transitGatewayConnectionTemplateModel.BaseConnectionID).To(Equal(core.StringPtr("975f58c1-afe7-469a-9727-7f3d720f2d32")))
				Expect(transitGatewayConnectionTemplateModel.BaseNetworkType).To(Equal(core.StringPtr("classic")))
				Expect(transitGatewayConnectionTemplateModel.LocalGatewayIp).To(Equal(core.StringPtr("192.168.100.1")))
				Expect(transitGatewayConnectionTemplateModel.LocalTunnelIp).To(Equal(core.StringPtr("192.168.129.2")))
				Expect(transitGatewayConnectionTemplateModel.Name).To(Equal(core.StringPtr("Transit_Service_BWTN_SJ_DL")))
				Expect(transitGatewayConnectionTemplateModel.NetworkAccountID).To(Equal(core.StringPtr("28e4d90ac7504be694471ee66e70d0d5")))
				Expect(transitGatewayConnectionTemplateModel.NetworkID).To(Equal(core.StringPtr("crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b")))
				Expect(transitGatewayConnectionTemplateModel.NetworkType).To(Equal(core.StringPtr("vpc")))
				Expect(transitGatewayConnectionTemplateModel.PrefixFilters).To(Equal([]transitgatewayapisv1.TransitGatewayConnectionPrefixFilter{*transitGatewayConnectionPrefixFilterModel}))
				Expect(transitGatewayConnectionTemplateModel.PrefixFiltersDefault).To(Equal(core.StringPtr("permit")))
				Expect(transitGatewayConnectionTemplateModel.RemoteBgpAsn).To(Equal(core.Int64Ptr(int64(65010))))
				Expect(transitGatewayConnectionTemplateModel.RemoteGatewayIp).To(Equal(core.StringPtr("10.242.63.12")))
				Expect(transitGatewayConnectionTemplateModel.RemoteTunnelIp).To(Equal(core.StringPtr("192.168.129.1")))
				Expect(transitGatewayConnectionTemplateModel.Zone).To(Equal(zoneIdentityModel))

				// Construct an instance of the CreateTransitGatewayConnectionOptions model
				transitGatewayID := "testString"
				var transitGatewayConnectionTemplate transitgatewayapisv1.TransitGatewayConnectionTemplateIntf = nil
				createTransitGatewayConnectionOptionsModel := transitGatewayApisService.NewCreateTransitGatewayConnectionOptions(transitGatewayID, transitGatewayConnectionTemplate)
				createTransitGatewayConnectionOptionsModel.SetTransitGatewayID("testString")
				createTransitGatewayConnectionOptionsModel.SetTransitGatewayConnectionTemplate(transitGatewayConnectionTemplateModel)
				createTransitGatewayConnectionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createTransitGatewayConnectionOptionsModel).ToNot(BeNil())
				Expect(createTransitGatewayConnectionOptionsModel.TransitGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(createTransitGatewayConnectionOptionsModel.TransitGatewayConnectionTemplate).To(Equal(transitGatewayConnectionTemplateModel))
				Expect(createTransitGatewayConnectionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateTransitGatewayConnectionPrefixFilterOptions successfully`, func() {
				// Construct an instance of the CreateTransitGatewayConnectionPrefixFilterOptions model
				transitGatewayID := "testString"
				id := "testString"
				createTransitGatewayConnectionPrefixFilterOptionsAction := "permit"
				createTransitGatewayConnectionPrefixFilterOptionsPrefix := "192.168.100.0/24"
				createTransitGatewayConnectionPrefixFilterOptionsModel := transitGatewayApisService.NewCreateTransitGatewayConnectionPrefixFilterOptions(transitGatewayID, id, createTransitGatewayConnectionPrefixFilterOptionsAction, createTransitGatewayConnectionPrefixFilterOptionsPrefix)
				createTransitGatewayConnectionPrefixFilterOptionsModel.SetTransitGatewayID("testString")
				createTransitGatewayConnectionPrefixFilterOptionsModel.SetID("testString")
				createTransitGatewayConnectionPrefixFilterOptionsModel.SetAction("permit")
				createTransitGatewayConnectionPrefixFilterOptionsModel.SetPrefix("192.168.100.0/24")
				createTransitGatewayConnectionPrefixFilterOptionsModel.SetBefore("1a15dcab-7e40-45e1-b7c5-bc690eaa9782")
				createTransitGatewayConnectionPrefixFilterOptionsModel.SetGe(int64(0))
				createTransitGatewayConnectionPrefixFilterOptionsModel.SetLe(int64(32))
				createTransitGatewayConnectionPrefixFilterOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createTransitGatewayConnectionPrefixFilterOptionsModel).ToNot(BeNil())
				Expect(createTransitGatewayConnectionPrefixFilterOptionsModel.TransitGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(createTransitGatewayConnectionPrefixFilterOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(createTransitGatewayConnectionPrefixFilterOptionsModel.Action).To(Equal(core.StringPtr("permit")))
				Expect(createTransitGatewayConnectionPrefixFilterOptionsModel.Prefix).To(Equal(core.StringPtr("192.168.100.0/24")))
				Expect(createTransitGatewayConnectionPrefixFilterOptionsModel.Before).To(Equal(core.StringPtr("1a15dcab-7e40-45e1-b7c5-bc690eaa9782")))
				Expect(createTransitGatewayConnectionPrefixFilterOptionsModel.Ge).To(Equal(core.Int64Ptr(int64(0))))
				Expect(createTransitGatewayConnectionPrefixFilterOptionsModel.Le).To(Equal(core.Int64Ptr(int64(32))))
				Expect(createTransitGatewayConnectionPrefixFilterOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateTransitGatewayDeviceMappingOptions successfully`, func() {
				// Construct an instance of the CreateTransitGatewayDeviceMappingOptions model
				id := "testString"
				createTransitGatewayDeviceMappingOptionsDeviceID := "0a06fb9b-820f-4c44-8a31-77f1f0806d28"
				createTransitGatewayDeviceMappingOptionsModel := transitGatewayApisService.NewCreateTransitGatewayDeviceMappingOptions(id, createTransitGatewayDeviceMappingOptionsDeviceID)
				createTransitGatewayDeviceMappingOptionsModel.SetID("testString")
				createTransitGatewayDeviceMappingOptionsModel.SetDeviceID("0a06fb9b-820f-4c44-8a31-77f1f0806d28")
				createTransitGatewayDeviceMappingOptionsModel.SetForce(true)
				createTransitGatewayDeviceMappingOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createTransitGatewayDeviceMappingOptionsModel).ToNot(BeNil())
				Expect(createTransitGatewayDeviceMappingOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(createTransitGatewayDeviceMappingOptionsModel.DeviceID).To(Equal(core.StringPtr("0a06fb9b-820f-4c44-8a31-77f1f0806d28")))
				Expect(createTransitGatewayDeviceMappingOptionsModel.Force).To(Equal(core.BoolPtr(true)))
				Expect(createTransitGatewayDeviceMappingOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateTransitGatewayNetworksActionsOpsOptions successfully`, func() {
				// Construct an instance of the CreateTransitGatewayNetworksActionsOpsOptions model
				networkType := "testString"
				networkID := "testString"
				createTransitGatewayNetworksActionsOpsOptionsAction := "validate_configuration"
				createTransitGatewayNetworksActionsOpsOptionsModel := transitGatewayApisService.NewCreateTransitGatewayNetworksActionsOpsOptions(networkType, networkID, createTransitGatewayNetworksActionsOpsOptionsAction)
				createTransitGatewayNetworksActionsOpsOptionsModel.SetNetworkType("testString")
				createTransitGatewayNetworksActionsOpsOptionsModel.SetNetworkID("testString")
				createTransitGatewayNetworksActionsOpsOptionsModel.SetAction("validate_configuration")
				createTransitGatewayNetworksActionsOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createTransitGatewayNetworksActionsOpsOptionsModel).ToNot(BeNil())
				Expect(createTransitGatewayNetworksActionsOpsOptionsModel.NetworkType).To(Equal(core.StringPtr("testString")))
				Expect(createTransitGatewayNetworksActionsOpsOptionsModel.NetworkID).To(Equal(core.StringPtr("testString")))
				Expect(createTransitGatewayNetworksActionsOpsOptionsModel.Action).To(Equal(core.StringPtr("validate_configuration")))
				Expect(createTransitGatewayNetworksActionsOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateTransitGatewayOptions successfully`, func() {
				// Construct an instance of the ResourceGroupIdentity model
				resourceGroupIdentityModel := new(transitgatewayapisv1.ResourceGroupIdentity)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("56969d6043e9465c883cb9f7363e78e8")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("56969d6043e9465c883cb9f7363e78e8")))

				// Construct an instance of the CreateTransitGatewayOptions model
				createTransitGatewayOptionsLocation := "us-south"
				createTransitGatewayOptionsName := "Transit_Service_BWTN_SJ_DL"
				createTransitGatewayOptionsModel := transitGatewayApisService.NewCreateTransitGatewayOptions(createTransitGatewayOptionsLocation, createTransitGatewayOptionsName)
				createTransitGatewayOptionsModel.SetLocation("us-south")
				createTransitGatewayOptionsModel.SetName("Transit_Service_BWTN_SJ_DL")
				createTransitGatewayOptionsModel.SetGlobal(true)
				createTransitGatewayOptionsModel.SetResourceGroup(resourceGroupIdentityModel)
				createTransitGatewayOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createTransitGatewayOptionsModel).ToNot(BeNil())
				Expect(createTransitGatewayOptionsModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(createTransitGatewayOptionsModel.Name).To(Equal(core.StringPtr("Transit_Service_BWTN_SJ_DL")))
				Expect(createTransitGatewayOptionsModel.Global).To(Equal(core.BoolPtr(true)))
				Expect(createTransitGatewayOptionsModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(createTransitGatewayOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateTransitGatewayRouteReportOptions successfully`, func() {
				// Construct an instance of the CreateTransitGatewayRouteReportOptions model
				transitGatewayID := "testString"
				createTransitGatewayRouteReportOptionsModel := transitGatewayApisService.NewCreateTransitGatewayRouteReportOptions(transitGatewayID)
				createTransitGatewayRouteReportOptionsModel.SetTransitGatewayID("testString")
				createTransitGatewayRouteReportOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createTransitGatewayRouteReportOptionsModel).ToNot(BeNil())
				Expect(createTransitGatewayRouteReportOptionsModel.TransitGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(createTransitGatewayRouteReportOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateTransitGatewaysConnectionsActionsOpsOptions successfully`, func() {
				// Construct an instance of the CreateTransitGatewaysConnectionsActionsOpsOptions model
				transitGatewayID := "testString"
				id := "testString"
				createTransitGatewaysConnectionsActionsOpsOptionsAction := "suspend"
				createTransitGatewaysConnectionsActionsOpsOptionsModel := transitGatewayApisService.NewCreateTransitGatewaysConnectionsActionsOpsOptions(transitGatewayID, id, createTransitGatewaysConnectionsActionsOpsOptionsAction)
				createTransitGatewaysConnectionsActionsOpsOptionsModel.SetTransitGatewayID("testString")
				createTransitGatewaysConnectionsActionsOpsOptionsModel.SetID("testString")
				createTransitGatewaysConnectionsActionsOpsOptionsModel.SetAction("suspend")
				createTransitGatewaysConnectionsActionsOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createTransitGatewaysConnectionsActionsOpsOptionsModel).ToNot(BeNil())
				Expect(createTransitGatewaysConnectionsActionsOpsOptionsModel.TransitGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(createTransitGatewaysConnectionsActionsOpsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(createTransitGatewaysConnectionsActionsOpsOptionsModel.Action).To(Equal(core.StringPtr("suspend")))
				Expect(createTransitGatewaysConnectionsActionsOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateZoneOpsOptions successfully`, func() {
				// Construct an instance of the CreateZoneOpsOptions model
				locationName := "testString"
				createZoneOpsOptionsHidden := false
				createZoneOpsOptionsName := "us-south-1"
				createZoneOpsOptionsTgrBgpAsn := int64(4201065540)
				createZoneOpsOptionsModel := transitGatewayApisService.NewCreateZoneOpsOptions(locationName, createZoneOpsOptionsHidden, createZoneOpsOptionsName, createZoneOpsOptionsTgrBgpAsn)
				createZoneOpsOptionsModel.SetLocationName("testString")
				createZoneOpsOptionsModel.SetHidden(false)
				createZoneOpsOptionsModel.SetName("us-south-1")
				createZoneOpsOptionsModel.SetTgrBgpAsn(int64(4201065540))
				createZoneOpsOptionsModel.SetTargetDeviceQuantity(int64(2))
				createZoneOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createZoneOpsOptionsModel).ToNot(BeNil())
				Expect(createZoneOpsOptionsModel.LocationName).To(Equal(core.StringPtr("testString")))
				Expect(createZoneOpsOptionsModel.Hidden).To(Equal(core.BoolPtr(false)))
				Expect(createZoneOpsOptionsModel.Name).To(Equal(core.StringPtr("us-south-1")))
				Expect(createZoneOpsOptionsModel.TgrBgpAsn).To(Equal(core.Int64Ptr(int64(4201065540))))
				Expect(createZoneOpsOptionsModel.TargetDeviceQuantity).To(Equal(core.Int64Ptr(int64(2))))
				Expect(createZoneOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteAsnOpsOptions successfully`, func() {
				// Construct an instance of the DeleteAsnOpsOptions model
				id := "testString"
				deleteAsnOpsOptionsModel := transitGatewayApisService.NewDeleteAsnOpsOptions(id)
				deleteAsnOpsOptionsModel.SetID("testString")
				deleteAsnOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteAsnOpsOptionsModel).ToNot(BeNil())
				Expect(deleteAsnOpsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteAsnOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteDataCenterOpsOptions successfully`, func() {
				// Construct an instance of the DeleteDataCenterOpsOptions model
				locationName := "testString"
				dataCenterName := "testString"
				deleteDataCenterOpsOptionsModel := transitGatewayApisService.NewDeleteDataCenterOpsOptions(locationName, dataCenterName)
				deleteDataCenterOpsOptionsModel.SetLocationName("testString")
				deleteDataCenterOpsOptionsModel.SetDataCenterName("testString")
				deleteDataCenterOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteDataCenterOpsOptionsModel).ToNot(BeNil())
				Expect(deleteDataCenterOpsOptionsModel.LocationName).To(Equal(core.StringPtr("testString")))
				Expect(deleteDataCenterOpsOptionsModel.DataCenterName).To(Equal(core.StringPtr("testString")))
				Expect(deleteDataCenterOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteFeatureAccountOptions successfully`, func() {
				// Construct an instance of the DeleteFeatureAccountOptions model
				featureName := "testString"
				accountID := "testString"
				deleteFeatureAccountOptionsModel := transitGatewayApisService.NewDeleteFeatureAccountOptions(featureName, accountID)
				deleteFeatureAccountOptionsModel.SetFeatureName("testString")
				deleteFeatureAccountOptionsModel.SetAccountID("testString")
				deleteFeatureAccountOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteFeatureAccountOptionsModel).ToNot(BeNil())
				Expect(deleteFeatureAccountOptionsModel.FeatureName).To(Equal(core.StringPtr("testString")))
				Expect(deleteFeatureAccountOptionsModel.AccountID).To(Equal(core.StringPtr("testString")))
				Expect(deleteFeatureAccountOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteFeatureDenylistAccountOptions successfully`, func() {
				// Construct an instance of the DeleteFeatureDenylistAccountOptions model
				featureName := "testString"
				accountID := "testString"
				deleteFeatureDenylistAccountOptionsModel := transitGatewayApisService.NewDeleteFeatureDenylistAccountOptions(featureName, accountID)
				deleteFeatureDenylistAccountOptionsModel.SetFeatureName("testString")
				deleteFeatureDenylistAccountOptionsModel.SetAccountID("testString")
				deleteFeatureDenylistAccountOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteFeatureDenylistAccountOptionsModel).ToNot(BeNil())
				Expect(deleteFeatureDenylistAccountOptionsModel.FeatureName).To(Equal(core.StringPtr("testString")))
				Expect(deleteFeatureDenylistAccountOptionsModel.AccountID).To(Equal(core.StringPtr("testString")))
				Expect(deleteFeatureDenylistAccountOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteFeatureOptions successfully`, func() {
				// Construct an instance of the DeleteFeatureOptions model
				featureName := "testString"
				deleteFeatureOptionsModel := transitGatewayApisService.NewDeleteFeatureOptions(featureName)
				deleteFeatureOptionsModel.SetFeatureName("testString")
				deleteFeatureOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteFeatureOptionsModel).ToNot(BeNil())
				Expect(deleteFeatureOptionsModel.FeatureName).To(Equal(core.StringPtr("testString")))
				Expect(deleteFeatureOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteGatewayDeviceAuditOptions successfully`, func() {
				// Construct an instance of the DeleteGatewayDeviceAuditOptions model
				id := "testString"
				auditID := "testString"
				deleteGatewayDeviceAuditOptionsModel := transitGatewayApisService.NewDeleteGatewayDeviceAuditOptions(id, auditID)
				deleteGatewayDeviceAuditOptionsModel.SetID("testString")
				deleteGatewayDeviceAuditOptionsModel.SetAuditID("testString")
				deleteGatewayDeviceAuditOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteGatewayDeviceAuditOptionsModel).ToNot(BeNil())
				Expect(deleteGatewayDeviceAuditOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteGatewayDeviceAuditOptionsModel.AuditID).To(Equal(core.StringPtr("testString")))
				Expect(deleteGatewayDeviceAuditOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteGatewayDeviceOptions successfully`, func() {
				// Construct an instance of the DeleteGatewayDeviceOptions model
				id := "testString"
				deleteGatewayDeviceOptionsModel := transitGatewayApisService.NewDeleteGatewayDeviceOptions(id)
				deleteGatewayDeviceOptionsModel.SetID("testString")
				deleteGatewayDeviceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteGatewayDeviceOptionsModel).ToNot(BeNil())
				Expect(deleteGatewayDeviceOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteGatewayDeviceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteGatewayDevicePlacementTagOpsOptions successfully`, func() {
				// Construct an instance of the DeleteGatewayDevicePlacementTagOpsOptions model
				id := "testString"
				placementTagID := "testString"
				deleteGatewayDevicePlacementTagOpsOptionsModel := transitGatewayApisService.NewDeleteGatewayDevicePlacementTagOpsOptions(id, placementTagID)
				deleteGatewayDevicePlacementTagOpsOptionsModel.SetID("testString")
				deleteGatewayDevicePlacementTagOpsOptionsModel.SetPlacementTagID("testString")
				deleteGatewayDevicePlacementTagOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteGatewayDevicePlacementTagOpsOptionsModel).ToNot(BeNil())
				Expect(deleteGatewayDevicePlacementTagOpsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteGatewayDevicePlacementTagOpsOptionsModel.PlacementTagID).To(Equal(core.StringPtr("testString")))
				Expect(deleteGatewayDevicePlacementTagOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteGatewayLocationLocalLocationOptions successfully`, func() {
				// Construct an instance of the DeleteGatewayLocationLocalLocationOptions model
				locationName := "testString"
				localLocationName := "testString"
				deleteGatewayLocationLocalLocationOptionsModel := transitGatewayApisService.NewDeleteGatewayLocationLocalLocationOptions(locationName, localLocationName)
				deleteGatewayLocationLocalLocationOptionsModel.SetLocationName("testString")
				deleteGatewayLocationLocalLocationOptionsModel.SetLocalLocationName("testString")
				deleteGatewayLocationLocalLocationOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteGatewayLocationLocalLocationOptionsModel).ToNot(BeNil())
				Expect(deleteGatewayLocationLocalLocationOptionsModel.LocationName).To(Equal(core.StringPtr("testString")))
				Expect(deleteGatewayLocationLocalLocationOptionsModel.LocalLocationName).To(Equal(core.StringPtr("testString")))
				Expect(deleteGatewayLocationLocalLocationOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteGatewayLocationOptions successfully`, func() {
				// Construct an instance of the DeleteGatewayLocationOptions model
				locationName := "testString"
				deleteGatewayLocationOptionsModel := transitGatewayApisService.NewDeleteGatewayLocationOptions(locationName)
				deleteGatewayLocationOptionsModel.SetLocationName("testString")
				deleteGatewayLocationOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteGatewayLocationOptionsModel).ToNot(BeNil())
				Expect(deleteGatewayLocationOptionsModel.LocationName).To(Equal(core.StringPtr("testString")))
				Expect(deleteGatewayLocationOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteRouteDistinguisherOpsOptions successfully`, func() {
				// Construct an instance of the DeleteRouteDistinguisherOpsOptions model
				rtrd := "testString"
				deleteRouteDistinguisherOpsOptionsModel := transitGatewayApisService.NewDeleteRouteDistinguisherOpsOptions(rtrd)
				deleteRouteDistinguisherOpsOptionsModel.SetRtrd("testString")
				deleteRouteDistinguisherOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteRouteDistinguisherOpsOptionsModel).ToNot(BeNil())
				Expect(deleteRouteDistinguisherOpsOptionsModel.Rtrd).To(Equal(core.StringPtr("testString")))
				Expect(deleteRouteDistinguisherOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteTransitGatewayConnectionDeviceMappingOptions successfully`, func() {
				// Construct an instance of the DeleteTransitGatewayConnectionDeviceMappingOptions model
				transitGatewayID := "testString"
				id := "testString"
				mappingID := "testString"
				deleteTransitGatewayConnectionDeviceMappingOptionsModel := transitGatewayApisService.NewDeleteTransitGatewayConnectionDeviceMappingOptions(transitGatewayID, id, mappingID)
				deleteTransitGatewayConnectionDeviceMappingOptionsModel.SetTransitGatewayID("testString")
				deleteTransitGatewayConnectionDeviceMappingOptionsModel.SetID("testString")
				deleteTransitGatewayConnectionDeviceMappingOptionsModel.SetMappingID("testString")
				deleteTransitGatewayConnectionDeviceMappingOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteTransitGatewayConnectionDeviceMappingOptionsModel).ToNot(BeNil())
				Expect(deleteTransitGatewayConnectionDeviceMappingOptionsModel.TransitGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(deleteTransitGatewayConnectionDeviceMappingOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteTransitGatewayConnectionDeviceMappingOptionsModel.MappingID).To(Equal(core.StringPtr("testString")))
				Expect(deleteTransitGatewayConnectionDeviceMappingOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteTransitGatewayConnectionOptions successfully`, func() {
				// Construct an instance of the DeleteTransitGatewayConnectionOptions model
				transitGatewayID := "testString"
				id := "testString"
				deleteTransitGatewayConnectionOptionsModel := transitGatewayApisService.NewDeleteTransitGatewayConnectionOptions(transitGatewayID, id)
				deleteTransitGatewayConnectionOptionsModel.SetTransitGatewayID("testString")
				deleteTransitGatewayConnectionOptionsModel.SetID("testString")
				deleteTransitGatewayConnectionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteTransitGatewayConnectionOptionsModel).ToNot(BeNil())
				Expect(deleteTransitGatewayConnectionOptionsModel.TransitGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(deleteTransitGatewayConnectionOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteTransitGatewayConnectionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteTransitGatewayConnectionPrefixFilterOptions successfully`, func() {
				// Construct an instance of the DeleteTransitGatewayConnectionPrefixFilterOptions model
				transitGatewayID := "testString"
				id := "testString"
				filterID := "testString"
				deleteTransitGatewayConnectionPrefixFilterOptionsModel := transitGatewayApisService.NewDeleteTransitGatewayConnectionPrefixFilterOptions(transitGatewayID, id, filterID)
				deleteTransitGatewayConnectionPrefixFilterOptionsModel.SetTransitGatewayID("testString")
				deleteTransitGatewayConnectionPrefixFilterOptionsModel.SetID("testString")
				deleteTransitGatewayConnectionPrefixFilterOptionsModel.SetFilterID("testString")
				deleteTransitGatewayConnectionPrefixFilterOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteTransitGatewayConnectionPrefixFilterOptionsModel).ToNot(BeNil())
				Expect(deleteTransitGatewayConnectionPrefixFilterOptionsModel.TransitGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(deleteTransitGatewayConnectionPrefixFilterOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteTransitGatewayConnectionPrefixFilterOptionsModel.FilterID).To(Equal(core.StringPtr("testString")))
				Expect(deleteTransitGatewayConnectionPrefixFilterOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteTransitGatewayDeviceMappingOptions successfully`, func() {
				// Construct an instance of the DeleteTransitGatewayDeviceMappingOptions model
				id := "testString"
				mappingID := "testString"
				deleteTransitGatewayDeviceMappingOptionsModel := transitGatewayApisService.NewDeleteTransitGatewayDeviceMappingOptions(id, mappingID)
				deleteTransitGatewayDeviceMappingOptionsModel.SetID("testString")
				deleteTransitGatewayDeviceMappingOptionsModel.SetMappingID("testString")
				deleteTransitGatewayDeviceMappingOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteTransitGatewayDeviceMappingOptionsModel).ToNot(BeNil())
				Expect(deleteTransitGatewayDeviceMappingOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteTransitGatewayDeviceMappingOptionsModel.MappingID).To(Equal(core.StringPtr("testString")))
				Expect(deleteTransitGatewayDeviceMappingOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteTransitGatewayOpsOptions successfully`, func() {
				// Construct an instance of the DeleteTransitGatewayOpsOptions model
				id := "testString"
				deleteTransitGatewayOpsOptionsModel := transitGatewayApisService.NewDeleteTransitGatewayOpsOptions(id)
				deleteTransitGatewayOpsOptionsModel.SetID("testString")
				deleteTransitGatewayOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteTransitGatewayOpsOptionsModel).ToNot(BeNil())
				Expect(deleteTransitGatewayOpsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteTransitGatewayOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteTransitGatewayOptions successfully`, func() {
				// Construct an instance of the DeleteTransitGatewayOptions model
				id := "testString"
				deleteTransitGatewayOptionsModel := transitGatewayApisService.NewDeleteTransitGatewayOptions(id)
				deleteTransitGatewayOptionsModel.SetID("testString")
				deleteTransitGatewayOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteTransitGatewayOptionsModel).ToNot(BeNil())
				Expect(deleteTransitGatewayOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteTransitGatewayOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteTransitGatewayRouteReportOptions successfully`, func() {
				// Construct an instance of the DeleteTransitGatewayRouteReportOptions model
				transitGatewayID := "testString"
				id := "testString"
				deleteTransitGatewayRouteReportOptionsModel := transitGatewayApisService.NewDeleteTransitGatewayRouteReportOptions(transitGatewayID, id)
				deleteTransitGatewayRouteReportOptionsModel.SetTransitGatewayID("testString")
				deleteTransitGatewayRouteReportOptionsModel.SetID("testString")
				deleteTransitGatewayRouteReportOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteTransitGatewayRouteReportOptionsModel).ToNot(BeNil())
				Expect(deleteTransitGatewayRouteReportOptionsModel.TransitGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(deleteTransitGatewayRouteReportOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteTransitGatewayRouteReportOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteTransitGatewaysConnectionsOpsOptions successfully`, func() {
				// Construct an instance of the DeleteTransitGatewaysConnectionsOpsOptions model
				transitGatewayID := "testString"
				id := "testString"
				deleteTransitGatewaysConnectionsOpsOptionsModel := transitGatewayApisService.NewDeleteTransitGatewaysConnectionsOpsOptions(transitGatewayID, id)
				deleteTransitGatewaysConnectionsOpsOptionsModel.SetTransitGatewayID("testString")
				deleteTransitGatewaysConnectionsOpsOptionsModel.SetID("testString")
				deleteTransitGatewaysConnectionsOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteTransitGatewaysConnectionsOpsOptionsModel).ToNot(BeNil())
				Expect(deleteTransitGatewaysConnectionsOpsOptionsModel.TransitGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(deleteTransitGatewaysConnectionsOpsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteTransitGatewaysConnectionsOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteUnderlayConnectionOpsOptions successfully`, func() {
				// Construct an instance of the DeleteUnderlayConnectionOpsOptions model
				id := "testString"
				deleteUnderlayConnectionOpsOptionsModel := transitGatewayApisService.NewDeleteUnderlayConnectionOpsOptions(id)
				deleteUnderlayConnectionOpsOptionsModel.SetID("testString")
				deleteUnderlayConnectionOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteUnderlayConnectionOpsOptionsModel).ToNot(BeNil())
				Expect(deleteUnderlayConnectionOpsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteUnderlayConnectionOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteVpcTransitGatewayConnectionsOptions successfully`, func() {
				// Construct an instance of the DeleteVpcTransitGatewayConnectionsOptions model
				vpcCrn := "testString"
				deleteVpcTransitGatewayConnectionsOptionsModel := transitGatewayApisService.NewDeleteVpcTransitGatewayConnectionsOptions(vpcCrn)
				deleteVpcTransitGatewayConnectionsOptionsModel.SetVpcCrn("testString")
				deleteVpcTransitGatewayConnectionsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteVpcTransitGatewayConnectionsOptionsModel).ToNot(BeNil())
				Expect(deleteVpcTransitGatewayConnectionsOptionsModel.VpcCrn).To(Equal(core.StringPtr("testString")))
				Expect(deleteVpcTransitGatewayConnectionsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteZoneOpsOptions successfully`, func() {
				// Construct an instance of the DeleteZoneOpsOptions model
				locationName := "testString"
				zoneName := "testString"
				deleteZoneOpsOptionsModel := transitGatewayApisService.NewDeleteZoneOpsOptions(locationName, zoneName)
				deleteZoneOpsOptionsModel.SetLocationName("testString")
				deleteZoneOpsOptionsModel.SetZoneName("testString")
				deleteZoneOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteZoneOpsOptionsModel).ToNot(BeNil())
				Expect(deleteZoneOpsOptionsModel.LocationName).To(Equal(core.StringPtr("testString")))
				Expect(deleteZoneOpsOptionsModel.ZoneName).To(Equal(core.StringPtr("testString")))
				Expect(deleteZoneOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetCustomerAccountsOpsOptions successfully`, func() {
				// Construct an instance of the GetCustomerAccountsOpsOptions model
				customerAccountID := "testString"
				getCustomerAccountsOpsOptionsModel := transitGatewayApisService.NewGetCustomerAccountsOpsOptions(customerAccountID)
				getCustomerAccountsOpsOptionsModel.SetCustomerAccountID("testString")
				getCustomerAccountsOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getCustomerAccountsOpsOptionsModel).ToNot(BeNil())
				Expect(getCustomerAccountsOpsOptionsModel.CustomerAccountID).To(Equal(core.StringPtr("testString")))
				Expect(getCustomerAccountsOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetFeatureAccountOptions successfully`, func() {
				// Construct an instance of the GetFeatureAccountOptions model
				featureName := "testString"
				accountID := "testString"
				getFeatureAccountOptionsModel := transitGatewayApisService.NewGetFeatureAccountOptions(featureName, accountID)
				getFeatureAccountOptionsModel.SetFeatureName("testString")
				getFeatureAccountOptionsModel.SetAccountID("testString")
				getFeatureAccountOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getFeatureAccountOptionsModel).ToNot(BeNil())
				Expect(getFeatureAccountOptionsModel.FeatureName).To(Equal(core.StringPtr("testString")))
				Expect(getFeatureAccountOptionsModel.AccountID).To(Equal(core.StringPtr("testString")))
				Expect(getFeatureAccountOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetFeatureOptions successfully`, func() {
				// Construct an instance of the GetFeatureOptions model
				featureName := "testString"
				getFeatureOptionsModel := transitGatewayApisService.NewGetFeatureOptions(featureName)
				getFeatureOptionsModel.SetFeatureName("testString")
				getFeatureOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getFeatureOptionsModel).ToNot(BeNil())
				Expect(getFeatureOptionsModel.FeatureName).To(Equal(core.StringPtr("testString")))
				Expect(getFeatureOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetGatewayDeviceAuditOptions successfully`, func() {
				// Construct an instance of the GetGatewayDeviceAuditOptions model
				id := "testString"
				auditID := "testString"
				getGatewayDeviceAuditOptionsModel := transitGatewayApisService.NewGetGatewayDeviceAuditOptions(id, auditID)
				getGatewayDeviceAuditOptionsModel.SetID("testString")
				getGatewayDeviceAuditOptionsModel.SetAuditID("testString")
				getGatewayDeviceAuditOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getGatewayDeviceAuditOptionsModel).ToNot(BeNil())
				Expect(getGatewayDeviceAuditOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getGatewayDeviceAuditOptionsModel.AuditID).To(Equal(core.StringPtr("testString")))
				Expect(getGatewayDeviceAuditOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetGatewayDeviceDetailsOptions successfully`, func() {
				// Construct an instance of the GetGatewayDeviceDetailsOptions model
				id := "testString"
				getGatewayDeviceDetailsOptionsModel := transitGatewayApisService.NewGetGatewayDeviceDetailsOptions(id)
				getGatewayDeviceDetailsOptionsModel.SetID("testString")
				getGatewayDeviceDetailsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getGatewayDeviceDetailsOptionsModel).ToNot(BeNil())
				Expect(getGatewayDeviceDetailsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getGatewayDeviceDetailsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetGatewayDevicePlacementTagOpsOptions successfully`, func() {
				// Construct an instance of the GetGatewayDevicePlacementTagOpsOptions model
				id := "testString"
				placementTagID := "testString"
				getGatewayDevicePlacementTagOpsOptionsModel := transitGatewayApisService.NewGetGatewayDevicePlacementTagOpsOptions(id, placementTagID)
				getGatewayDevicePlacementTagOpsOptionsModel.SetID("testString")
				getGatewayDevicePlacementTagOpsOptionsModel.SetPlacementTagID("testString")
				getGatewayDevicePlacementTagOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getGatewayDevicePlacementTagOpsOptionsModel).ToNot(BeNil())
				Expect(getGatewayDevicePlacementTagOpsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getGatewayDevicePlacementTagOpsOptionsModel.PlacementTagID).To(Equal(core.StringPtr("testString")))
				Expect(getGatewayDevicePlacementTagOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetGatewayLocationLocalLocationOptions successfully`, func() {
				// Construct an instance of the GetGatewayLocationLocalLocationOptions model
				locationName := "testString"
				localLocationName := "testString"
				getGatewayLocationLocalLocationOptionsModel := transitGatewayApisService.NewGetGatewayLocationLocalLocationOptions(locationName, localLocationName)
				getGatewayLocationLocalLocationOptionsModel.SetLocationName("testString")
				getGatewayLocationLocalLocationOptionsModel.SetLocalLocationName("testString")
				getGatewayLocationLocalLocationOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getGatewayLocationLocalLocationOptionsModel).ToNot(BeNil())
				Expect(getGatewayLocationLocalLocationOptionsModel.LocationName).To(Equal(core.StringPtr("testString")))
				Expect(getGatewayLocationLocalLocationOptionsModel.LocalLocationName).To(Equal(core.StringPtr("testString")))
				Expect(getGatewayLocationLocalLocationOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetGatewayLocationOpsOptions successfully`, func() {
				// Construct an instance of the GetGatewayLocationOpsOptions model
				locationName := "testString"
				getGatewayLocationOpsOptionsModel := transitGatewayApisService.NewGetGatewayLocationOpsOptions(locationName)
				getGatewayLocationOpsOptionsModel.SetLocationName("testString")
				getGatewayLocationOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getGatewayLocationOpsOptionsModel).ToNot(BeNil())
				Expect(getGatewayLocationOpsOptionsModel.LocationName).To(Equal(core.StringPtr("testString")))
				Expect(getGatewayLocationOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetGatewayLocationOptions successfully`, func() {
				// Construct an instance of the GetGatewayLocationOptions model
				name := "testString"
				getGatewayLocationOptionsModel := transitGatewayApisService.NewGetGatewayLocationOptions(name)
				getGatewayLocationOptionsModel.SetName("testString")
				getGatewayLocationOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getGatewayLocationOptionsModel).ToNot(BeNil())
				Expect(getGatewayLocationOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(getGatewayLocationOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetProvisionTestResultOpsOptions successfully`, func() {
				// Construct an instance of the GetProvisionTestResultOpsOptions model
				id := "testString"
				getProvisionTestResultOpsOptionsModel := transitGatewayApisService.NewGetProvisionTestResultOpsOptions(id)
				getProvisionTestResultOpsOptionsModel.SetID("testString")
				getProvisionTestResultOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getProvisionTestResultOpsOptionsModel).ToNot(BeNil())
				Expect(getProvisionTestResultOpsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getProvisionTestResultOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetTransitGatewayConnectionOptions successfully`, func() {
				// Construct an instance of the GetTransitGatewayConnectionOptions model
				transitGatewayID := "testString"
				id := "testString"
				getTransitGatewayConnectionOptionsModel := transitGatewayApisService.NewGetTransitGatewayConnectionOptions(transitGatewayID, id)
				getTransitGatewayConnectionOptionsModel.SetTransitGatewayID("testString")
				getTransitGatewayConnectionOptionsModel.SetID("testString")
				getTransitGatewayConnectionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getTransitGatewayConnectionOptionsModel).ToNot(BeNil())
				Expect(getTransitGatewayConnectionOptionsModel.TransitGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(getTransitGatewayConnectionOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getTransitGatewayConnectionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetTransitGatewayConnectionPrefixFilterOptions successfully`, func() {
				// Construct an instance of the GetTransitGatewayConnectionPrefixFilterOptions model
				transitGatewayID := "testString"
				id := "testString"
				filterID := "testString"
				getTransitGatewayConnectionPrefixFilterOptionsModel := transitGatewayApisService.NewGetTransitGatewayConnectionPrefixFilterOptions(transitGatewayID, id, filterID)
				getTransitGatewayConnectionPrefixFilterOptionsModel.SetTransitGatewayID("testString")
				getTransitGatewayConnectionPrefixFilterOptionsModel.SetID("testString")
				getTransitGatewayConnectionPrefixFilterOptionsModel.SetFilterID("testString")
				getTransitGatewayConnectionPrefixFilterOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getTransitGatewayConnectionPrefixFilterOptionsModel).ToNot(BeNil())
				Expect(getTransitGatewayConnectionPrefixFilterOptionsModel.TransitGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(getTransitGatewayConnectionPrefixFilterOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getTransitGatewayConnectionPrefixFilterOptionsModel.FilterID).To(Equal(core.StringPtr("testString")))
				Expect(getTransitGatewayConnectionPrefixFilterOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetTransitGatewayConnectionsOpsOptions successfully`, func() {
				// Construct an instance of the GetTransitGatewayConnectionsOpsOptions model
				id := "testString"
				getTransitGatewayConnectionsOpsOptionsModel := transitGatewayApisService.NewGetTransitGatewayConnectionsOpsOptions(id)
				getTransitGatewayConnectionsOpsOptionsModel.SetID("testString")
				getTransitGatewayConnectionsOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getTransitGatewayConnectionsOpsOptionsModel).ToNot(BeNil())
				Expect(getTransitGatewayConnectionsOpsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getTransitGatewayConnectionsOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetTransitGatewayNetworksOpsOptions successfully`, func() {
				// Construct an instance of the GetTransitGatewayNetworksOpsOptions model
				networkType := "testString"
				networkID := "testString"
				getTransitGatewayNetworksOpsOptionsModel := transitGatewayApisService.NewGetTransitGatewayNetworksOpsOptions(networkType, networkID)
				getTransitGatewayNetworksOpsOptionsModel.SetNetworkType("testString")
				getTransitGatewayNetworksOpsOptionsModel.SetNetworkID("testString")
				getTransitGatewayNetworksOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getTransitGatewayNetworksOpsOptionsModel).ToNot(BeNil())
				Expect(getTransitGatewayNetworksOpsOptionsModel.NetworkType).To(Equal(core.StringPtr("testString")))
				Expect(getTransitGatewayNetworksOpsOptionsModel.NetworkID).To(Equal(core.StringPtr("testString")))
				Expect(getTransitGatewayNetworksOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetTransitGatewayOptions successfully`, func() {
				// Construct an instance of the GetTransitGatewayOptions model
				id := "testString"
				getTransitGatewayOptionsModel := transitGatewayApisService.NewGetTransitGatewayOptions(id)
				getTransitGatewayOptionsModel.SetID("testString")
				getTransitGatewayOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getTransitGatewayOptionsModel).ToNot(BeNil())
				Expect(getTransitGatewayOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getTransitGatewayOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetTransitGatewayRouteReportOptions successfully`, func() {
				// Construct an instance of the GetTransitGatewayRouteReportOptions model
				transitGatewayID := "testString"
				id := "testString"
				getTransitGatewayRouteReportOptionsModel := transitGatewayApisService.NewGetTransitGatewayRouteReportOptions(transitGatewayID, id)
				getTransitGatewayRouteReportOptionsModel.SetTransitGatewayID("testString")
				getTransitGatewayRouteReportOptionsModel.SetID("testString")
				getTransitGatewayRouteReportOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getTransitGatewayRouteReportOptionsModel).ToNot(BeNil())
				Expect(getTransitGatewayRouteReportOptionsModel.TransitGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(getTransitGatewayRouteReportOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getTransitGatewayRouteReportOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetTransitGatewayUserQuotasOpsOptions successfully`, func() {
				// Construct an instance of the GetTransitGatewayUserQuotasOpsOptions model
				customerAccountID := "testString"
				getTransitGatewayUserQuotasOpsOptionsModel := transitGatewayApisService.NewGetTransitGatewayUserQuotasOpsOptions(customerAccountID)
				getTransitGatewayUserQuotasOpsOptionsModel.SetCustomerAccountID("testString")
				getTransitGatewayUserQuotasOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getTransitGatewayUserQuotasOpsOptionsModel).ToNot(BeNil())
				Expect(getTransitGatewayUserQuotasOpsOptionsModel.CustomerAccountID).To(Equal(core.StringPtr("testString")))
				Expect(getTransitGatewayUserQuotasOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetTransitGatewaysConnectionsOpsOptions successfully`, func() {
				// Construct an instance of the GetTransitGatewaysConnectionsOpsOptions model
				transitGatewayID := "testString"
				id := "testString"
				getTransitGatewaysConnectionsOpsOptionsModel := transitGatewayApisService.NewGetTransitGatewaysConnectionsOpsOptions(transitGatewayID, id)
				getTransitGatewaysConnectionsOpsOptionsModel.SetTransitGatewayID("testString")
				getTransitGatewaysConnectionsOpsOptionsModel.SetID("testString")
				getTransitGatewaysConnectionsOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getTransitGatewaysConnectionsOpsOptionsModel).ToNot(BeNil())
				Expect(getTransitGatewaysConnectionsOpsOptionsModel.TransitGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(getTransitGatewaysConnectionsOpsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getTransitGatewaysConnectionsOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetTransitGatewaysOpsOptions successfully`, func() {
				// Construct an instance of the GetTransitGatewaysOpsOptions model
				id := "testString"
				getTransitGatewaysOpsOptionsModel := transitGatewayApisService.NewGetTransitGatewaysOpsOptions(id)
				getTransitGatewaysOpsOptionsModel.SetID("testString")
				getTransitGatewaysOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getTransitGatewaysOpsOptionsModel).ToNot(BeNil())
				Expect(getTransitGatewaysOpsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getTransitGatewaysOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetUnderlayConnectionOpsOptions successfully`, func() {
				// Construct an instance of the GetUnderlayConnectionOpsOptions model
				id := "testString"
				getUnderlayConnectionOpsOptionsModel := transitGatewayApisService.NewGetUnderlayConnectionOpsOptions(id)
				getUnderlayConnectionOpsOptionsModel.SetID("testString")
				getUnderlayConnectionOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getUnderlayConnectionOpsOptionsModel).ToNot(BeNil())
				Expect(getUnderlayConnectionOpsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getUnderlayConnectionOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListAsnsOpsOptions successfully`, func() {
				// Construct an instance of the ListAsnsOpsOptions model
				listAsnsOpsOptionsModel := transitGatewayApisService.NewListAsnsOpsOptions()
				listAsnsOpsOptionsModel.SetStart("testString")
				listAsnsOpsOptionsModel.SetLimit(int64(10))
				listAsnsOpsOptionsModel.SetIsAssociated(true)
				listAsnsOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listAsnsOpsOptionsModel).ToNot(BeNil())
				Expect(listAsnsOpsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listAsnsOpsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(10))))
				Expect(listAsnsOpsOptionsModel.IsAssociated).To(Equal(core.BoolPtr(true)))
				Expect(listAsnsOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListConnectionsInternalOptions successfully`, func() {
				// Construct an instance of the ListConnectionsInternalOptions model
				networkID := "testString"
				listConnectionsInternalOptionsModel := transitGatewayApisService.NewListConnectionsInternalOptions(networkID)
				listConnectionsInternalOptionsModel.SetNetworkID("testString")
				listConnectionsInternalOptionsModel.SetLimit(int64(10))
				listConnectionsInternalOptionsModel.SetStart("testString")
				listConnectionsInternalOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listConnectionsInternalOptionsModel).ToNot(BeNil())
				Expect(listConnectionsInternalOptionsModel.NetworkID).To(Equal(core.StringPtr("testString")))
				Expect(listConnectionsInternalOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(10))))
				Expect(listConnectionsInternalOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listConnectionsInternalOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListConnectionsOptions successfully`, func() {
				// Construct an instance of the ListConnectionsOptions model
				listConnectionsOptionsModel := transitGatewayApisService.NewListConnectionsOptions()
				listConnectionsOptionsModel.SetLimit(int64(10))
				listConnectionsOptionsModel.SetStart("testString")
				listConnectionsOptionsModel.SetNetworkID("testString")
				listConnectionsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listConnectionsOptionsModel).ToNot(BeNil())
				Expect(listConnectionsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(10))))
				Expect(listConnectionsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listConnectionsOptionsModel.NetworkID).To(Equal(core.StringPtr("testString")))
				Expect(listConnectionsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListCustomerAccountsFeaturesOptions successfully`, func() {
				// Construct an instance of the ListCustomerAccountsFeaturesOptions model
				customerAccountID := "testString"
				listCustomerAccountsFeaturesOptionsModel := transitGatewayApisService.NewListCustomerAccountsFeaturesOptions(customerAccountID)
				listCustomerAccountsFeaturesOptionsModel.SetCustomerAccountID("testString")
				listCustomerAccountsFeaturesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listCustomerAccountsFeaturesOptionsModel).ToNot(BeNil())
				Expect(listCustomerAccountsFeaturesOptionsModel.CustomerAccountID).To(Equal(core.StringPtr("testString")))
				Expect(listCustomerAccountsFeaturesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListCustomerAccountsOpsOptions successfully`, func() {
				// Construct an instance of the ListCustomerAccountsOpsOptions model
				listCustomerAccountsOpsOptionsModel := transitGatewayApisService.NewListCustomerAccountsOpsOptions()
				listCustomerAccountsOpsOptionsModel.SetStart("testString")
				listCustomerAccountsOpsOptionsModel.SetLimit(int64(50))
				listCustomerAccountsOpsOptionsModel.SetLocationName("testString")
				listCustomerAccountsOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listCustomerAccountsOpsOptionsModel).ToNot(BeNil())
				Expect(listCustomerAccountsOpsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listCustomerAccountsOpsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(50))))
				Expect(listCustomerAccountsOpsOptionsModel.LocationName).To(Equal(core.StringPtr("testString")))
				Expect(listCustomerAccountsOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListDataCentersOpsOptions successfully`, func() {
				// Construct an instance of the ListDataCentersOpsOptions model
				locationName := "testString"
				listDataCentersOpsOptionsModel := transitGatewayApisService.NewListDataCentersOpsOptions(locationName)
				listDataCentersOpsOptionsModel.SetLocationName("testString")
				listDataCentersOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listDataCentersOpsOptionsModel).ToNot(BeNil())
				Expect(listDataCentersOpsOptionsModel.LocationName).To(Equal(core.StringPtr("testString")))
				Expect(listDataCentersOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListFeatureAllowlistedAccountsOptions successfully`, func() {
				// Construct an instance of the ListFeatureAllowlistedAccountsOptions model
				featureName := "testString"
				listFeatureAllowlistedAccountsOptionsModel := transitGatewayApisService.NewListFeatureAllowlistedAccountsOptions(featureName)
				listFeatureAllowlistedAccountsOptionsModel.SetFeatureName("testString")
				listFeatureAllowlistedAccountsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listFeatureAllowlistedAccountsOptionsModel).ToNot(BeNil())
				Expect(listFeatureAllowlistedAccountsOptionsModel.FeatureName).To(Equal(core.StringPtr("testString")))
				Expect(listFeatureAllowlistedAccountsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListFeaturesOptions successfully`, func() {
				// Construct an instance of the ListFeaturesOptions model
				listFeaturesOptionsModel := transitGatewayApisService.NewListFeaturesOptions()
				listFeaturesOptionsModel.SetInclude("testString")
				listFeaturesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listFeaturesOptionsModel).ToNot(BeNil())
				Expect(listFeaturesOptionsModel.Include).To(Equal(core.StringPtr("testString")))
				Expect(listFeaturesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListGatewayDeviceAuditOptions successfully`, func() {
				// Construct an instance of the ListGatewayDeviceAuditOptions model
				id := "testString"
				listGatewayDeviceAuditOptionsModel := transitGatewayApisService.NewListGatewayDeviceAuditOptions(id)
				listGatewayDeviceAuditOptionsModel.SetID("testString")
				listGatewayDeviceAuditOptionsModel.SetAuditType("testString")
				listGatewayDeviceAuditOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listGatewayDeviceAuditOptionsModel).ToNot(BeNil())
				Expect(listGatewayDeviceAuditOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(listGatewayDeviceAuditOptionsModel.AuditType).To(Equal(core.StringPtr("testString")))
				Expect(listGatewayDeviceAuditOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListGatewayDeviceConnectionsOptions successfully`, func() {
				// Construct an instance of the ListGatewayDeviceConnectionsOptions model
				id := "testString"
				listGatewayDeviceConnectionsOptionsModel := transitGatewayApisService.NewListGatewayDeviceConnectionsOptions(id)
				listGatewayDeviceConnectionsOptionsModel.SetID("testString")
				listGatewayDeviceConnectionsOptionsModel.SetNetworkType("testString")
				listGatewayDeviceConnectionsOptionsModel.SetStart("testString")
				listGatewayDeviceConnectionsOptionsModel.SetLimit(int64(10))
				listGatewayDeviceConnectionsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listGatewayDeviceConnectionsOptionsModel).ToNot(BeNil())
				Expect(listGatewayDeviceConnectionsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(listGatewayDeviceConnectionsOptionsModel.NetworkType).To(Equal(core.StringPtr("testString")))
				Expect(listGatewayDeviceConnectionsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listGatewayDeviceConnectionsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(10))))
				Expect(listGatewayDeviceConnectionsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListGatewayDeviceGatewaysOptions successfully`, func() {
				// Construct an instance of the ListGatewayDeviceGatewaysOptions model
				id := "testString"
				listGatewayDeviceGatewaysOptionsModel := transitGatewayApisService.NewListGatewayDeviceGatewaysOptions(id)
				listGatewayDeviceGatewaysOptionsModel.SetID("testString")
				listGatewayDeviceGatewaysOptionsModel.SetStart("testString")
				listGatewayDeviceGatewaysOptionsModel.SetLimit(int64(10))
				listGatewayDeviceGatewaysOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listGatewayDeviceGatewaysOptionsModel).ToNot(BeNil())
				Expect(listGatewayDeviceGatewaysOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(listGatewayDeviceGatewaysOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listGatewayDeviceGatewaysOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(10))))
				Expect(listGatewayDeviceGatewaysOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListGatewayDevicePlacementTagOpsOptions successfully`, func() {
				// Construct an instance of the ListGatewayDevicePlacementTagOpsOptions model
				id := "testString"
				listGatewayDevicePlacementTagOpsOptionsModel := transitGatewayApisService.NewListGatewayDevicePlacementTagOpsOptions(id)
				listGatewayDevicePlacementTagOpsOptionsModel.SetID("testString")
				listGatewayDevicePlacementTagOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listGatewayDevicePlacementTagOpsOptionsModel).ToNot(BeNil())
				Expect(listGatewayDevicePlacementTagOpsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(listGatewayDevicePlacementTagOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListGatewayDevicesAuditsOpsOptions successfully`, func() {
				// Construct an instance of the ListGatewayDevicesAuditsOpsOptions model
				listGatewayDevicesAuditsOpsOptionsModel := transitGatewayApisService.NewListGatewayDevicesAuditsOpsOptions()
				listGatewayDevicesAuditsOpsOptionsModel.SetStart("testString")
				listGatewayDevicesAuditsOpsOptionsModel.SetLimit(int64(10))
				listGatewayDevicesAuditsOpsOptionsModel.SetAuditType("testString")
				listGatewayDevicesAuditsOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listGatewayDevicesAuditsOpsOptionsModel).ToNot(BeNil())
				Expect(listGatewayDevicesAuditsOpsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listGatewayDevicesAuditsOpsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(10))))
				Expect(listGatewayDevicesAuditsOpsOptionsModel.AuditType).To(Equal(core.StringPtr("testString")))
				Expect(listGatewayDevicesAuditsOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListGatewayDevicesOptions successfully`, func() {
				// Construct an instance of the ListGatewayDevicesOptions model
				listGatewayDevicesOptionsModel := transitGatewayApisService.NewListGatewayDevicesOptions()
				listGatewayDevicesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listGatewayDevicesOptionsModel).ToNot(BeNil())
				Expect(listGatewayDevicesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListGatewayLocationDevicesOptions successfully`, func() {
				// Construct an instance of the ListGatewayLocationDevicesOptions model
				locationName := "testString"
				listGatewayLocationDevicesOptionsModel := transitGatewayApisService.NewListGatewayLocationDevicesOptions(locationName)
				listGatewayLocationDevicesOptionsModel.SetLocationName("testString")
				listGatewayLocationDevicesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listGatewayLocationDevicesOptionsModel).ToNot(BeNil())
				Expect(listGatewayLocationDevicesOptionsModel.LocationName).To(Equal(core.StringPtr("testString")))
				Expect(listGatewayLocationDevicesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListGatewayLocationsOpsOptions successfully`, func() {
				// Construct an instance of the ListGatewayLocationsOpsOptions model
				listGatewayLocationsOpsOptionsModel := transitGatewayApisService.NewListGatewayLocationsOpsOptions()
				listGatewayLocationsOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listGatewayLocationsOpsOptionsModel).ToNot(BeNil())
				Expect(listGatewayLocationsOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListGatewayLocationsOptions successfully`, func() {
				// Construct an instance of the ListGatewayLocationsOptions model
				listGatewayLocationsOptionsModel := transitGatewayApisService.NewListGatewayLocationsOptions()
				listGatewayLocationsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listGatewayLocationsOptionsModel).ToNot(BeNil())
				Expect(listGatewayLocationsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListLocationLocalConnectionLocationsOpsOptions successfully`, func() {
				// Construct an instance of the ListLocationLocalConnectionLocationsOpsOptions model
				locationName := "testString"
				listLocationLocalConnectionLocationsOpsOptionsModel := transitGatewayApisService.NewListLocationLocalConnectionLocationsOpsOptions(locationName)
				listLocationLocalConnectionLocationsOpsOptionsModel.SetLocationName("testString")
				listLocationLocalConnectionLocationsOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listLocationLocalConnectionLocationsOpsOptionsModel).ToNot(BeNil())
				Expect(listLocationLocalConnectionLocationsOpsOptionsModel.LocationName).To(Equal(core.StringPtr("testString")))
				Expect(listLocationLocalConnectionLocationsOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListProvisionTestResultsOpsOptions successfully`, func() {
				// Construct an instance of the ListProvisionTestResultsOpsOptions model
				listProvisionTestResultsOpsOptionsModel := transitGatewayApisService.NewListProvisionTestResultsOpsOptions()
				listProvisionTestResultsOpsOptionsModel.SetControlPlaneLocation("testString")
				listProvisionTestResultsOpsOptionsModel.SetVpcLocation("testString")
				listProvisionTestResultsOpsOptionsModel.SetCreatedAt("testString")
				listProvisionTestResultsOpsOptionsModel.SetUpdatedAt("testString")
				listProvisionTestResultsOpsOptionsModel.SetStatus("testString")
				listProvisionTestResultsOpsOptionsModel.SetStart("testString")
				listProvisionTestResultsOpsOptionsModel.SetLimit(int64(10))
				listProvisionTestResultsOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listProvisionTestResultsOpsOptionsModel).ToNot(BeNil())
				Expect(listProvisionTestResultsOpsOptionsModel.ControlPlaneLocation).To(Equal(core.StringPtr("testString")))
				Expect(listProvisionTestResultsOpsOptionsModel.VpcLocation).To(Equal(core.StringPtr("testString")))
				Expect(listProvisionTestResultsOpsOptionsModel.CreatedAt).To(Equal(core.StringPtr("testString")))
				Expect(listProvisionTestResultsOpsOptionsModel.UpdatedAt).To(Equal(core.StringPtr("testString")))
				Expect(listProvisionTestResultsOpsOptionsModel.Status).To(Equal(core.StringPtr("testString")))
				Expect(listProvisionTestResultsOpsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listProvisionTestResultsOpsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(10))))
				Expect(listProvisionTestResultsOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListRouteDistinguishersOpsOptions successfully`, func() {
				// Construct an instance of the ListRouteDistinguishersOpsOptions model
				listRouteDistinguishersOpsOptionsModel := transitGatewayApisService.NewListRouteDistinguishersOpsOptions()
				listRouteDistinguishersOpsOptionsModel.SetStart("testString")
				listRouteDistinguishersOpsOptionsModel.SetLimit(int64(10))
				listRouteDistinguishersOpsOptionsModel.SetDecommissioned(true)
				listRouteDistinguishersOpsOptionsModel.SetDecommissionedAt("testString")
				listRouteDistinguishersOpsOptionsModel.SetIsAssociated(true)
				listRouteDistinguishersOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listRouteDistinguishersOpsOptionsModel).ToNot(BeNil())
				Expect(listRouteDistinguishersOpsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listRouteDistinguishersOpsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(10))))
				Expect(listRouteDistinguishersOpsOptionsModel.Decommissioned).To(Equal(core.BoolPtr(true)))
				Expect(listRouteDistinguishersOpsOptionsModel.DecommissionedAt).To(Equal(core.StringPtr("testString")))
				Expect(listRouteDistinguishersOpsOptionsModel.IsAssociated).To(Equal(core.BoolPtr(true)))
				Expect(listRouteDistinguishersOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListTransitGatewayAlertsOpsOptions successfully`, func() {
				// Construct an instance of the ListTransitGatewayAlertsOpsOptions model
				listTransitGatewayAlertsOpsOptionsModel := transitGatewayApisService.NewListTransitGatewayAlertsOpsOptions()
				listTransitGatewayAlertsOpsOptionsModel.SetCreatedAt("testString")
				listTransitGatewayAlertsOpsOptionsModel.SetUpdatedAt("testString")
				listTransitGatewayAlertsOpsOptionsModel.SetGatewayID("testString")
				listTransitGatewayAlertsOpsOptionsModel.SetConnectionID("testString")
				listTransitGatewayAlertsOpsOptionsModel.SetStatus("testString")
				listTransitGatewayAlertsOpsOptionsModel.SetSituation("testString")
				listTransitGatewayAlertsOpsOptionsModel.SetRootCause("testString")
				listTransitGatewayAlertsOpsOptionsModel.SetDeviceID("testString")
				listTransitGatewayAlertsOpsOptionsModel.SetStart("testString")
				listTransitGatewayAlertsOpsOptionsModel.SetLimit(int64(10))
				listTransitGatewayAlertsOpsOptionsModel.SetDatabaseID("testString")
				listTransitGatewayAlertsOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listTransitGatewayAlertsOpsOptionsModel).ToNot(BeNil())
				Expect(listTransitGatewayAlertsOpsOptionsModel.CreatedAt).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewayAlertsOpsOptionsModel.UpdatedAt).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewayAlertsOpsOptionsModel.GatewayID).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewayAlertsOpsOptionsModel.ConnectionID).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewayAlertsOpsOptionsModel.Status).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewayAlertsOpsOptionsModel.Situation).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewayAlertsOpsOptionsModel.RootCause).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewayAlertsOpsOptionsModel.DeviceID).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewayAlertsOpsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewayAlertsOpsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(10))))
				Expect(listTransitGatewayAlertsOpsOptionsModel.DatabaseID).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewayAlertsOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListTransitGatewayConnectionPrefixFiltersOpsOptions successfully`, func() {
				// Construct an instance of the ListTransitGatewayConnectionPrefixFiltersOpsOptions model
				transitGatewayID := "testString"
				id := "testString"
				listTransitGatewayConnectionPrefixFiltersOpsOptionsModel := transitGatewayApisService.NewListTransitGatewayConnectionPrefixFiltersOpsOptions(transitGatewayID, id)
				listTransitGatewayConnectionPrefixFiltersOpsOptionsModel.SetTransitGatewayID("testString")
				listTransitGatewayConnectionPrefixFiltersOpsOptionsModel.SetID("testString")
				listTransitGatewayConnectionPrefixFiltersOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listTransitGatewayConnectionPrefixFiltersOpsOptionsModel).ToNot(BeNil())
				Expect(listTransitGatewayConnectionPrefixFiltersOpsOptionsModel.TransitGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewayConnectionPrefixFiltersOpsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewayConnectionPrefixFiltersOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListTransitGatewayConnectionPrefixFiltersOptions successfully`, func() {
				// Construct an instance of the ListTransitGatewayConnectionPrefixFiltersOptions model
				transitGatewayID := "testString"
				id := "testString"
				listTransitGatewayConnectionPrefixFiltersOptionsModel := transitGatewayApisService.NewListTransitGatewayConnectionPrefixFiltersOptions(transitGatewayID, id)
				listTransitGatewayConnectionPrefixFiltersOptionsModel.SetTransitGatewayID("testString")
				listTransitGatewayConnectionPrefixFiltersOptionsModel.SetID("testString")
				listTransitGatewayConnectionPrefixFiltersOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listTransitGatewayConnectionPrefixFiltersOptionsModel).ToNot(BeNil())
				Expect(listTransitGatewayConnectionPrefixFiltersOptionsModel.TransitGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewayConnectionPrefixFiltersOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewayConnectionPrefixFiltersOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListTransitGatewayConnectionsBaseOpsOptions successfully`, func() {
				// Construct an instance of the ListTransitGatewayConnectionsBaseOpsOptions model
				listTransitGatewayConnectionsBaseOpsOptionsModel := transitGatewayApisService.NewListTransitGatewayConnectionsBaseOpsOptions()
				listTransitGatewayConnectionsBaseOpsOptionsModel.SetAccountID("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.SetRouteTarget("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.SetStatus("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.SetName("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.SetTemplateVersion("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.SetStart("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.SetLimit(int64(10))
				listTransitGatewayConnectionsBaseOpsOptionsModel.SetLocation("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.SetIsDeletable(true)
				listTransitGatewayConnectionsBaseOpsOptionsModel.SetCreatedAt("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.SetUpdatedAt("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.SetIsBilling(true)
				listTransitGatewayConnectionsBaseOpsOptionsModel.SetNetworkAccountID("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.SetNetworkID("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.SetNetworkType("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.SetBaseConnectionID("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.SetDataCenter("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.SetUnderlayConnectionID("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.SetLeakRouteDistinguisher("testString")
				listTransitGatewayConnectionsBaseOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listTransitGatewayConnectionsBaseOpsOptionsModel).ToNot(BeNil())
				Expect(listTransitGatewayConnectionsBaseOpsOptionsModel.AccountID).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewayConnectionsBaseOpsOptionsModel.RouteTarget).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewayConnectionsBaseOpsOptionsModel.Status).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewayConnectionsBaseOpsOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewayConnectionsBaseOpsOptionsModel.TemplateVersion).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewayConnectionsBaseOpsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewayConnectionsBaseOpsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(10))))
				Expect(listTransitGatewayConnectionsBaseOpsOptionsModel.Location).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewayConnectionsBaseOpsOptionsModel.IsDeletable).To(Equal(core.BoolPtr(true)))
				Expect(listTransitGatewayConnectionsBaseOpsOptionsModel.CreatedAt).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewayConnectionsBaseOpsOptionsModel.UpdatedAt).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewayConnectionsBaseOpsOptionsModel.IsBilling).To(Equal(core.BoolPtr(true)))
				Expect(listTransitGatewayConnectionsBaseOpsOptionsModel.NetworkAccountID).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewayConnectionsBaseOpsOptionsModel.NetworkID).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewayConnectionsBaseOpsOptionsModel.NetworkType).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewayConnectionsBaseOpsOptionsModel.BaseConnectionID).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewayConnectionsBaseOpsOptionsModel.DataCenter).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewayConnectionsBaseOpsOptionsModel.UnderlayConnectionID).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewayConnectionsBaseOpsOptionsModel.LeakRouteDistinguisher).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewayConnectionsBaseOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListTransitGatewayConnectionsOptions successfully`, func() {
				// Construct an instance of the ListTransitGatewayConnectionsOptions model
				transitGatewayID := "testString"
				listTransitGatewayConnectionsOptionsModel := transitGatewayApisService.NewListTransitGatewayConnectionsOptions(transitGatewayID)
				listTransitGatewayConnectionsOptionsModel.SetTransitGatewayID("testString")
				listTransitGatewayConnectionsOptionsModel.SetStart("testString")
				listTransitGatewayConnectionsOptionsModel.SetLimit(int64(10))
				listTransitGatewayConnectionsOptionsModel.SetName("testString")
				listTransitGatewayConnectionsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listTransitGatewayConnectionsOptionsModel).ToNot(BeNil())
				Expect(listTransitGatewayConnectionsOptionsModel.TransitGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewayConnectionsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewayConnectionsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(10))))
				Expect(listTransitGatewayConnectionsOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewayConnectionsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListTransitGatewayMetricsOpsOptions successfully`, func() {
				// Construct an instance of the ListTransitGatewayMetricsOpsOptions model
				listTransitGatewayMetricsOpsOptionsModel := transitGatewayApisService.NewListTransitGatewayMetricsOpsOptions()
				listTransitGatewayMetricsOpsOptionsModel.SetLastReportedTimestamp("testString")
				listTransitGatewayMetricsOpsOptionsModel.SetLastCollectedTimestamp("testString")
				listTransitGatewayMetricsOpsOptionsModel.SetAccountID("testString")
				listTransitGatewayMetricsOpsOptionsModel.SetStart("testString")
				listTransitGatewayMetricsOpsOptionsModel.SetLimit(int64(10))
				listTransitGatewayMetricsOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listTransitGatewayMetricsOpsOptionsModel).ToNot(BeNil())
				Expect(listTransitGatewayMetricsOpsOptionsModel.LastReportedTimestamp).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewayMetricsOpsOptionsModel.LastCollectedTimestamp).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewayMetricsOpsOptionsModel.AccountID).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewayMetricsOpsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewayMetricsOpsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(10))))
				Expect(listTransitGatewayMetricsOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListTransitGatewayRouteReportsOpsOptions successfully`, func() {
				// Construct an instance of the ListTransitGatewayRouteReportsOpsOptions model
				transitGatewayID := "testString"
				listTransitGatewayRouteReportsOpsOptionsModel := transitGatewayApisService.NewListTransitGatewayRouteReportsOpsOptions(transitGatewayID)
				listTransitGatewayRouteReportsOpsOptionsModel.SetTransitGatewayID("testString")
				listTransitGatewayRouteReportsOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listTransitGatewayRouteReportsOpsOptionsModel).ToNot(BeNil())
				Expect(listTransitGatewayRouteReportsOpsOptionsModel.TransitGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewayRouteReportsOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListTransitGatewayRouteReportsOptions successfully`, func() {
				// Construct an instance of the ListTransitGatewayRouteReportsOptions model
				transitGatewayID := "testString"
				listTransitGatewayRouteReportsOptionsModel := transitGatewayApisService.NewListTransitGatewayRouteReportsOptions(transitGatewayID)
				listTransitGatewayRouteReportsOptionsModel.SetTransitGatewayID("testString")
				listTransitGatewayRouteReportsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listTransitGatewayRouteReportsOptionsModel).ToNot(BeNil())
				Expect(listTransitGatewayRouteReportsOptionsModel.TransitGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewayRouteReportsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListTransitGatewaysConnectionDeviceMappingsOptions successfully`, func() {
				// Construct an instance of the ListTransitGatewaysConnectionDeviceMappingsOptions model
				transitGatewayID := "testString"
				id := "testString"
				listTransitGatewaysConnectionDeviceMappingsOptionsModel := transitGatewayApisService.NewListTransitGatewaysConnectionDeviceMappingsOptions(transitGatewayID, id)
				listTransitGatewaysConnectionDeviceMappingsOptionsModel.SetTransitGatewayID("testString")
				listTransitGatewaysConnectionDeviceMappingsOptionsModel.SetID("testString")
				listTransitGatewaysConnectionDeviceMappingsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listTransitGatewaysConnectionDeviceMappingsOptionsModel).ToNot(BeNil())
				Expect(listTransitGatewaysConnectionDeviceMappingsOptionsModel.TransitGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewaysConnectionDeviceMappingsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewaysConnectionDeviceMappingsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListTransitGatewaysConnectionsNetworksOpsOptions successfully`, func() {
				// Construct an instance of the ListTransitGatewaysConnectionsNetworksOpsOptions model
				transitGatewayID := "testString"
				id := "testString"
				listTransitGatewaysConnectionsNetworksOpsOptionsModel := transitGatewayApisService.NewListTransitGatewaysConnectionsNetworksOpsOptions(transitGatewayID, id)
				listTransitGatewaysConnectionsNetworksOpsOptionsModel.SetTransitGatewayID("testString")
				listTransitGatewaysConnectionsNetworksOpsOptionsModel.SetID("testString")
				listTransitGatewaysConnectionsNetworksOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listTransitGatewaysConnectionsNetworksOpsOptionsModel).ToNot(BeNil())
				Expect(listTransitGatewaysConnectionsNetworksOpsOptionsModel.TransitGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewaysConnectionsNetworksOpsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewaysConnectionsNetworksOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListTransitGatewaysConnectionsOpsOptions successfully`, func() {
				// Construct an instance of the ListTransitGatewaysConnectionsOpsOptions model
				transitGatewayID := "testString"
				listTransitGatewaysConnectionsOpsOptionsModel := transitGatewayApisService.NewListTransitGatewaysConnectionsOpsOptions(transitGatewayID)
				listTransitGatewaysConnectionsOpsOptionsModel.SetTransitGatewayID("testString")
				listTransitGatewaysConnectionsOpsOptionsModel.SetStart("testString")
				listTransitGatewaysConnectionsOpsOptionsModel.SetLimit(int64(10))
				listTransitGatewaysConnectionsOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listTransitGatewaysConnectionsOpsOptionsModel).ToNot(BeNil())
				Expect(listTransitGatewaysConnectionsOpsOptionsModel.TransitGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewaysConnectionsOpsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewaysConnectionsOpsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(10))))
				Expect(listTransitGatewaysConnectionsOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListTransitGatewaysDeviceMappingsOptions successfully`, func() {
				// Construct an instance of the ListTransitGatewaysDeviceMappingsOptions model
				id := "testString"
				listTransitGatewaysDeviceMappingsOptionsModel := transitGatewayApisService.NewListTransitGatewaysDeviceMappingsOptions(id)
				listTransitGatewaysDeviceMappingsOptionsModel.SetID("testString")
				listTransitGatewaysDeviceMappingsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listTransitGatewaysDeviceMappingsOptionsModel).ToNot(BeNil())
				Expect(listTransitGatewaysDeviceMappingsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewaysDeviceMappingsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListTransitGatewaysMetricsOpsOptions successfully`, func() {
				// Construct an instance of the ListTransitGatewaysMetricsOpsOptions model
				transitGatewayID := "testString"
				listTransitGatewaysMetricsOpsOptionsModel := transitGatewayApisService.NewListTransitGatewaysMetricsOpsOptions(transitGatewayID)
				listTransitGatewaysMetricsOpsOptionsModel.SetTransitGatewayID("testString")
				listTransitGatewaysMetricsOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listTransitGatewaysMetricsOpsOptionsModel).ToNot(BeNil())
				Expect(listTransitGatewaysMetricsOpsOptionsModel.TransitGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewaysMetricsOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListTransitGatewaysOpsOptions successfully`, func() {
				// Construct an instance of the ListTransitGatewaysOpsOptions model
				listTransitGatewaysOpsOptionsModel := transitGatewayApisService.NewListTransitGatewaysOpsOptions()
				listTransitGatewaysOpsOptionsModel.SetAccountID("testString")
				listTransitGatewaysOpsOptionsModel.SetRouteTarget("testString")
				listTransitGatewaysOpsOptionsModel.SetStatus("testString")
				listTransitGatewaysOpsOptionsModel.SetName("testString")
				listTransitGatewaysOpsOptionsModel.SetTemplateVersion("testString")
				listTransitGatewaysOpsOptionsModel.SetStart("testString")
				listTransitGatewaysOpsOptionsModel.SetLimit(int64(10))
				listTransitGatewaysOpsOptionsModel.SetLocation("testString")
				listTransitGatewaysOpsOptionsModel.SetIsDeletable(true)
				listTransitGatewaysOpsOptionsModel.SetCreatedAt("testString")
				listTransitGatewaysOpsOptionsModel.SetUpdatedAt("testString")
				listTransitGatewaysOpsOptionsModel.SetIsBilling(true)
				listTransitGatewaysOpsOptionsModel.SetLeakRouteDistinguisher("testString")
				listTransitGatewaysOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listTransitGatewaysOpsOptionsModel).ToNot(BeNil())
				Expect(listTransitGatewaysOpsOptionsModel.AccountID).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewaysOpsOptionsModel.RouteTarget).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewaysOpsOptionsModel.Status).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewaysOpsOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewaysOpsOptionsModel.TemplateVersion).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewaysOpsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewaysOpsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(10))))
				Expect(listTransitGatewaysOpsOptionsModel.Location).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewaysOpsOptionsModel.IsDeletable).To(Equal(core.BoolPtr(true)))
				Expect(listTransitGatewaysOpsOptionsModel.CreatedAt).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewaysOpsOptionsModel.UpdatedAt).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewaysOpsOptionsModel.IsBilling).To(Equal(core.BoolPtr(true)))
				Expect(listTransitGatewaysOpsOptionsModel.LeakRouteDistinguisher).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewaysOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListTransitGatewaysOptions successfully`, func() {
				// Construct an instance of the ListTransitGatewaysOptions model
				listTransitGatewaysOptionsModel := transitGatewayApisService.NewListTransitGatewaysOptions()
				listTransitGatewaysOptionsModel.SetLimit(int64(10))
				listTransitGatewaysOptionsModel.SetStart("testString")
				listTransitGatewaysOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listTransitGatewaysOptionsModel).ToNot(BeNil())
				Expect(listTransitGatewaysOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(10))))
				Expect(listTransitGatewaysOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listTransitGatewaysOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListUnderlayConnectionsOpsOptions successfully`, func() {
				// Construct an instance of the ListUnderlayConnectionsOpsOptions model
				listUnderlayConnectionsOpsOptionsModel := transitGatewayApisService.NewListUnderlayConnectionsOpsOptions()
				listUnderlayConnectionsOpsOptionsModel.SetStart("testString")
				listUnderlayConnectionsOpsOptionsModel.SetLimit(int64(10))
				listUnderlayConnectionsOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listUnderlayConnectionsOpsOptionsModel).ToNot(BeNil())
				Expect(listUnderlayConnectionsOpsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listUnderlayConnectionsOpsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(10))))
				Expect(listUnderlayConnectionsOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListZonesOpsOptions successfully`, func() {
				// Construct an instance of the ListZonesOpsOptions model
				locationName := "testString"
				listZonesOpsOptionsModel := transitGatewayApisService.NewListZonesOpsOptions(locationName)
				listZonesOpsOptionsModel.SetLocationName("testString")
				listZonesOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listZonesOpsOptionsModel).ToNot(BeNil())
				Expect(listZonesOpsOptionsModel.LocationName).To(Equal(core.StringPtr("testString")))
				Expect(listZonesOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPrefixFilterPut successfully`, func() {
				action := "permit"
				prefix := "192.168.100.0/24"
				_model, err := transitGatewayApisService.NewPrefixFilterPut(action, prefix)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewReplaceFeatureAccountOptions successfully`, func() {
				// Construct an instance of the ReplaceFeatureAccountOptions model
				featureName := "testString"
				accountID := "testString"
				replaceFeatureAccountOptionsModel := transitGatewayApisService.NewReplaceFeatureAccountOptions(featureName, accountID)
				replaceFeatureAccountOptionsModel.SetFeatureName("testString")
				replaceFeatureAccountOptionsModel.SetAccountID("testString")
				replaceFeatureAccountOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceFeatureAccountOptionsModel).ToNot(BeNil())
				Expect(replaceFeatureAccountOptionsModel.FeatureName).To(Equal(core.StringPtr("testString")))
				Expect(replaceFeatureAccountOptionsModel.AccountID).To(Equal(core.StringPtr("testString")))
				Expect(replaceFeatureAccountOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReplaceFeatureDenylistAccountOptions successfully`, func() {
				// Construct an instance of the ReplaceFeatureDenylistAccountOptions model
				featureName := "testString"
				accountID := "testString"
				replaceFeatureDenylistAccountOptionsModel := transitGatewayApisService.NewReplaceFeatureDenylistAccountOptions(featureName, accountID)
				replaceFeatureDenylistAccountOptionsModel.SetFeatureName("testString")
				replaceFeatureDenylistAccountOptionsModel.SetAccountID("testString")
				replaceFeatureDenylistAccountOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceFeatureDenylistAccountOptionsModel).ToNot(BeNil())
				Expect(replaceFeatureDenylistAccountOptionsModel.FeatureName).To(Equal(core.StringPtr("testString")))
				Expect(replaceFeatureDenylistAccountOptionsModel.AccountID).To(Equal(core.StringPtr("testString")))
				Expect(replaceFeatureDenylistAccountOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReplaceTransitGatewayConnectionPrefixFilterOptions successfully`, func() {
				// Construct an instance of the PrefixFilterPut model
				prefixFilterPutModel := new(transitgatewayapisv1.PrefixFilterPut)
				Expect(prefixFilterPutModel).ToNot(BeNil())
				prefixFilterPutModel.Action = core.StringPtr("permit")
				prefixFilterPutModel.Ge = core.Int64Ptr(int64(0))
				prefixFilterPutModel.Le = core.Int64Ptr(int64(32))
				prefixFilterPutModel.Prefix = core.StringPtr("192.168.100.0/24")
				Expect(prefixFilterPutModel.Action).To(Equal(core.StringPtr("permit")))
				Expect(prefixFilterPutModel.Ge).To(Equal(core.Int64Ptr(int64(0))))
				Expect(prefixFilterPutModel.Le).To(Equal(core.Int64Ptr(int64(32))))
				Expect(prefixFilterPutModel.Prefix).To(Equal(core.StringPtr("192.168.100.0/24")))

				// Construct an instance of the ReplaceTransitGatewayConnectionPrefixFilterOptions model
				transitGatewayID := "testString"
				id := "testString"
				replaceTransitGatewayConnectionPrefixFilterOptionsPrefixFilters := []transitgatewayapisv1.PrefixFilterPut{}
				replaceTransitGatewayConnectionPrefixFilterOptionsModel := transitGatewayApisService.NewReplaceTransitGatewayConnectionPrefixFilterOptions(transitGatewayID, id, replaceTransitGatewayConnectionPrefixFilterOptionsPrefixFilters)
				replaceTransitGatewayConnectionPrefixFilterOptionsModel.SetTransitGatewayID("testString")
				replaceTransitGatewayConnectionPrefixFilterOptionsModel.SetID("testString")
				replaceTransitGatewayConnectionPrefixFilterOptionsModel.SetPrefixFilters([]transitgatewayapisv1.PrefixFilterPut{*prefixFilterPutModel})
				replaceTransitGatewayConnectionPrefixFilterOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceTransitGatewayConnectionPrefixFilterOptionsModel).ToNot(BeNil())
				Expect(replaceTransitGatewayConnectionPrefixFilterOptionsModel.TransitGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(replaceTransitGatewayConnectionPrefixFilterOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(replaceTransitGatewayConnectionPrefixFilterOptionsModel.PrefixFilters).To(Equal([]transitgatewayapisv1.PrefixFilterPut{*prefixFilterPutModel}))
				Expect(replaceTransitGatewayConnectionPrefixFilterOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewResourceGroupIdentity successfully`, func() {
				id := "56969d6043e9465c883cb9f7363e78e8"
				_model, err := transitGatewayApisService.NewResourceGroupIdentity(id)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewTransitGatewayConnectionPrefixFilter successfully`, func() {
				action := "permit"
				prefix := "192.168.100.0/24"
				_model, err := transitGatewayApisService.NewTransitGatewayConnectionPrefixFilter(action, prefix)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewTransitGatewayGRETunnelTemplate successfully`, func() {
				name := "gre1"
				localGatewayIp := "10.242.63.12"
				localTunnelIp := "192.168.100.20"
				remoteGatewayIp := "10.242.33.22"
				remoteTunnelIp := "192.168.129.1"
				var zone transitgatewayapisv1.ZoneIdentityIntf = nil
				_, err := transitGatewayApisService.NewTransitGatewayGRETunnelTemplate(name, localGatewayIp, localTunnelIp, remoteGatewayIp, remoteTunnelIp, zone)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewUpdateDataCenterOpsOptions successfully`, func() {
				// Construct an instance of the UpdateDataCenterOpsOptions model
				locationName := "testString"
				dataCenterName := "testString"
				updateDataCenterOpsOptionsModel := transitGatewayApisService.NewUpdateDataCenterOpsOptions(locationName, dataCenterName)
				updateDataCenterOpsOptionsModel.SetLocationName("testString")
				updateDataCenterOpsOptionsModel.SetDataCenterName("testString")
				updateDataCenterOpsOptionsModel.SetHidden(false)
				updateDataCenterOpsOptionsModel.SetTargetDeviceQuantity(int64(2))
				updateDataCenterOpsOptionsModel.SetTgrBgpAsn(int64(4201065540))
				updateDataCenterOpsOptionsModel.SetZoneName("us-south-1")
				updateDataCenterOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateDataCenterOpsOptionsModel).ToNot(BeNil())
				Expect(updateDataCenterOpsOptionsModel.LocationName).To(Equal(core.StringPtr("testString")))
				Expect(updateDataCenterOpsOptionsModel.DataCenterName).To(Equal(core.StringPtr("testString")))
				Expect(updateDataCenterOpsOptionsModel.Hidden).To(Equal(core.BoolPtr(false)))
				Expect(updateDataCenterOpsOptionsModel.TargetDeviceQuantity).To(Equal(core.Int64Ptr(int64(2))))
				Expect(updateDataCenterOpsOptionsModel.TgrBgpAsn).To(Equal(core.Int64Ptr(int64(4201065540))))
				Expect(updateDataCenterOpsOptionsModel.ZoneName).To(Equal(core.StringPtr("us-south-1")))
				Expect(updateDataCenterOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateFeatureOptions successfully`, func() {
				// Construct an instance of the UpdateFeatureOptions model
				featureName := "testString"
				updateFeatureOptionsModel := transitGatewayApisService.NewUpdateFeatureOptions(featureName)
				updateFeatureOptionsModel.SetFeatureName("testString")
				updateFeatureOptionsModel.SetGenerallyAvailable(true)
				updateFeatureOptionsModel.SetName("gateway_v2")
				updateFeatureOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateFeatureOptionsModel).ToNot(BeNil())
				Expect(updateFeatureOptionsModel.FeatureName).To(Equal(core.StringPtr("testString")))
				Expect(updateFeatureOptionsModel.GenerallyAvailable).To(Equal(core.BoolPtr(true)))
				Expect(updateFeatureOptionsModel.Name).To(Equal(core.StringPtr("gateway_v2")))
				Expect(updateFeatureOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateGatewayDeviceOptions successfully`, func() {
				// Construct an instance of the UpdateGatewayDeviceOptions model
				id := "testString"
				updateGatewayDeviceOptionsModel := transitGatewayApisService.NewUpdateGatewayDeviceOptions(id)
				updateGatewayDeviceOptionsModel.SetID("testString")
				updateGatewayDeviceOptionsModel.SetDataCenter("dal10")
				updateGatewayDeviceOptionsModel.SetGatewayLocation("us-south")
				updateGatewayDeviceOptionsModel.SetHostname("tsr01dal01.softlayer.local")
				updateGatewayDeviceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateGatewayDeviceOptionsModel).ToNot(BeNil())
				Expect(updateGatewayDeviceOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateGatewayDeviceOptionsModel.DataCenter).To(Equal(core.StringPtr("dal10")))
				Expect(updateGatewayDeviceOptionsModel.GatewayLocation).To(Equal(core.StringPtr("us-south")))
				Expect(updateGatewayDeviceOptionsModel.Hostname).To(Equal(core.StringPtr("tsr01dal01.softlayer.local")))
				Expect(updateGatewayDeviceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateGatewayDevicePlacementTagOpsOptions successfully`, func() {
				// Construct an instance of the UpdateGatewayDevicePlacementTagOpsOptions model
				id := "testString"
				placementTagID := "testString"
				updateGatewayDevicePlacementTagOpsOptionsName := "Full"
				updateGatewayDevicePlacementTagOpsOptionsModel := transitGatewayApisService.NewUpdateGatewayDevicePlacementTagOpsOptions(id, placementTagID, updateGatewayDevicePlacementTagOpsOptionsName)
				updateGatewayDevicePlacementTagOpsOptionsModel.SetID("testString")
				updateGatewayDevicePlacementTagOpsOptionsModel.SetPlacementTagID("testString")
				updateGatewayDevicePlacementTagOpsOptionsModel.SetName("Full")
				updateGatewayDevicePlacementTagOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateGatewayDevicePlacementTagOpsOptionsModel).ToNot(BeNil())
				Expect(updateGatewayDevicePlacementTagOpsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateGatewayDevicePlacementTagOpsOptionsModel.PlacementTagID).To(Equal(core.StringPtr("testString")))
				Expect(updateGatewayDevicePlacementTagOpsOptionsModel.Name).To(Equal(core.StringPtr("Full")))
				Expect(updateGatewayDevicePlacementTagOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateGatewayLocationLocalLocationOptions successfully`, func() {
				// Construct an instance of the UpdateGatewayLocationLocalLocationOptions model
				locationName := "testString"
				localLocationName := "testString"
				updateGatewayLocationLocalLocationOptionsModel := transitGatewayApisService.NewUpdateGatewayLocationLocalLocationOptions(locationName, localLocationName)
				updateGatewayLocationLocalLocationOptionsModel.SetLocationName("testString")
				updateGatewayLocationLocalLocationOptionsModel.SetLocalLocationName("testString")
				updateGatewayLocationLocalLocationOptionsModel.SetDisplayName("Dallas")
				updateGatewayLocationLocalLocationOptionsModel.SetName("us-south")
				updateGatewayLocationLocalLocationOptionsModel.SetSupportedConnectionTypes([]string{"classic", "vpc", "directlink", "gre_tunnel", "power_virtual_server", "unbound_gre_tunnel"})
				updateGatewayLocationLocalLocationOptionsModel.SetType("region")
				updateGatewayLocationLocalLocationOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateGatewayLocationLocalLocationOptionsModel).ToNot(BeNil())
				Expect(updateGatewayLocationLocalLocationOptionsModel.LocationName).To(Equal(core.StringPtr("testString")))
				Expect(updateGatewayLocationLocalLocationOptionsModel.LocalLocationName).To(Equal(core.StringPtr("testString")))
				Expect(updateGatewayLocationLocalLocationOptionsModel.DisplayName).To(Equal(core.StringPtr("Dallas")))
				Expect(updateGatewayLocationLocalLocationOptionsModel.Name).To(Equal(core.StringPtr("us-south")))
				Expect(updateGatewayLocationLocalLocationOptionsModel.SupportedConnectionTypes).To(Equal([]string{"classic", "vpc", "directlink", "gre_tunnel", "power_virtual_server", "unbound_gre_tunnel"}))
				Expect(updateGatewayLocationLocalLocationOptionsModel.Type).To(Equal(core.StringPtr("region")))
				Expect(updateGatewayLocationLocalLocationOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateGatewayLocationOptions successfully`, func() {
				// Construct an instance of the UpdateGatewayLocationOptions model
				locationName := "testString"
				updateGatewayLocationOptionsModel := transitGatewayApisService.NewUpdateGatewayLocationOptions(locationName)
				updateGatewayLocationOptionsModel.SetLocationName("testString")
				updateGatewayLocationOptionsModel.SetBillingLocation("us")
				updateGatewayLocationOptionsModel.SetHidden(false)
				updateGatewayLocationOptionsModel.SetName("us-south")
				updateGatewayLocationOptionsModel.SetType("region")
				updateGatewayLocationOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateGatewayLocationOptionsModel).ToNot(BeNil())
				Expect(updateGatewayLocationOptionsModel.LocationName).To(Equal(core.StringPtr("testString")))
				Expect(updateGatewayLocationOptionsModel.BillingLocation).To(Equal(core.StringPtr("us")))
				Expect(updateGatewayLocationOptionsModel.Hidden).To(Equal(core.BoolPtr(false)))
				Expect(updateGatewayLocationOptionsModel.Name).To(Equal(core.StringPtr("us-south")))
				Expect(updateGatewayLocationOptionsModel.Type).To(Equal(core.StringPtr("region")))
				Expect(updateGatewayLocationOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateTransitGatewayConnectionOptions successfully`, func() {
				// Construct an instance of the UpdateTransitGatewayConnectionOptions model
				transitGatewayID := "testString"
				id := "testString"
				updateTransitGatewayConnectionOptionsModel := transitGatewayApisService.NewUpdateTransitGatewayConnectionOptions(transitGatewayID, id)
				updateTransitGatewayConnectionOptionsModel.SetTransitGatewayID("testString")
				updateTransitGatewayConnectionOptionsModel.SetID("testString")
				updateTransitGatewayConnectionOptionsModel.SetName("Transit_Service_BWTN_SJ_DL")
				updateTransitGatewayConnectionOptionsModel.SetPrefixFiltersDefault("permit")
				updateTransitGatewayConnectionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateTransitGatewayConnectionOptionsModel).ToNot(BeNil())
				Expect(updateTransitGatewayConnectionOptionsModel.TransitGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(updateTransitGatewayConnectionOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateTransitGatewayConnectionOptionsModel.Name).To(Equal(core.StringPtr("Transit_Service_BWTN_SJ_DL")))
				Expect(updateTransitGatewayConnectionOptionsModel.PrefixFiltersDefault).To(Equal(core.StringPtr("permit")))
				Expect(updateTransitGatewayConnectionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateTransitGatewayConnectionPrefixFilterOptions successfully`, func() {
				// Construct an instance of the UpdateTransitGatewayConnectionPrefixFilterOptions model
				transitGatewayID := "testString"
				id := "testString"
				filterID := "testString"
				updateTransitGatewayConnectionPrefixFilterOptionsModel := transitGatewayApisService.NewUpdateTransitGatewayConnectionPrefixFilterOptions(transitGatewayID, id, filterID)
				updateTransitGatewayConnectionPrefixFilterOptionsModel.SetTransitGatewayID("testString")
				updateTransitGatewayConnectionPrefixFilterOptionsModel.SetID("testString")
				updateTransitGatewayConnectionPrefixFilterOptionsModel.SetFilterID("testString")
				updateTransitGatewayConnectionPrefixFilterOptionsModel.SetAction("permit")
				updateTransitGatewayConnectionPrefixFilterOptionsModel.SetBefore("1a15dcab-7e40-45e1-b7c5-bc690eaa9782")
				updateTransitGatewayConnectionPrefixFilterOptionsModel.SetGe(int64(0))
				updateTransitGatewayConnectionPrefixFilterOptionsModel.SetLe(int64(32))
				updateTransitGatewayConnectionPrefixFilterOptionsModel.SetPrefix("192.168.100.0/24")
				updateTransitGatewayConnectionPrefixFilterOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateTransitGatewayConnectionPrefixFilterOptionsModel).ToNot(BeNil())
				Expect(updateTransitGatewayConnectionPrefixFilterOptionsModel.TransitGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(updateTransitGatewayConnectionPrefixFilterOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateTransitGatewayConnectionPrefixFilterOptionsModel.FilterID).To(Equal(core.StringPtr("testString")))
				Expect(updateTransitGatewayConnectionPrefixFilterOptionsModel.Action).To(Equal(core.StringPtr("permit")))
				Expect(updateTransitGatewayConnectionPrefixFilterOptionsModel.Before).To(Equal(core.StringPtr("1a15dcab-7e40-45e1-b7c5-bc690eaa9782")))
				Expect(updateTransitGatewayConnectionPrefixFilterOptionsModel.Ge).To(Equal(core.Int64Ptr(int64(0))))
				Expect(updateTransitGatewayConnectionPrefixFilterOptionsModel.Le).To(Equal(core.Int64Ptr(int64(32))))
				Expect(updateTransitGatewayConnectionPrefixFilterOptionsModel.Prefix).To(Equal(core.StringPtr("192.168.100.0/24")))
				Expect(updateTransitGatewayConnectionPrefixFilterOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateTransitGatewayOpsOptions successfully`, func() {
				// Construct an instance of the UpdateTransitGatewayOpsOptions model
				id := "testString"
				updateTransitGatewayOpsOptionsModel := transitGatewayApisService.NewUpdateTransitGatewayOpsOptions(id)
				updateTransitGatewayOpsOptionsModel.SetID("testString")
				updateTransitGatewayOpsOptionsModel.SetIsDeletable(true)
				updateTransitGatewayOpsOptionsModel.SetTemplateVersion("v1")
				updateTransitGatewayOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateTransitGatewayOpsOptionsModel).ToNot(BeNil())
				Expect(updateTransitGatewayOpsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateTransitGatewayOpsOptionsModel.IsDeletable).To(Equal(core.BoolPtr(true)))
				Expect(updateTransitGatewayOpsOptionsModel.TemplateVersion).To(Equal(core.StringPtr("v1")))
				Expect(updateTransitGatewayOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateTransitGatewayOptions successfully`, func() {
				// Construct an instance of the UpdateTransitGatewayOptions model
				id := "testString"
				updateTransitGatewayOptionsModel := transitGatewayApisService.NewUpdateTransitGatewayOptions(id)
				updateTransitGatewayOptionsModel.SetID("testString")
				updateTransitGatewayOptionsModel.SetGlobal(true)
				updateTransitGatewayOptionsModel.SetName("my-transit-gateway")
				updateTransitGatewayOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateTransitGatewayOptionsModel).ToNot(BeNil())
				Expect(updateTransitGatewayOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateTransitGatewayOptionsModel.Global).To(Equal(core.BoolPtr(true)))
				Expect(updateTransitGatewayOptionsModel.Name).To(Equal(core.StringPtr("my-transit-gateway")))
				Expect(updateTransitGatewayOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateTransitGatewayUserQuotasOpsOptions successfully`, func() {
				// Construct an instance of the TSLocationQuotaPatch model
				tsLocationQuotaPatchModel := new(transitgatewayapisv1.TSLocationQuotaPatch)
				Expect(tsLocationQuotaPatchModel).ToNot(BeNil())
				tsLocationQuotaPatchModel.Name = core.StringPtr("us-south")
				tsLocationQuotaPatchModel.Value = core.Int64Ptr(int64(1))
				Expect(tsLocationQuotaPatchModel.Name).To(Equal(core.StringPtr("us-south")))
				Expect(tsLocationQuotaPatchModel.Value).To(Equal(core.Int64Ptr(int64(1))))

				// Construct an instance of the UpdateTransitGatewayUserQuotasOpsOptions model
				customerAccountID := "testString"
				updateTransitGatewayUserQuotasOpsOptionsModel := transitGatewayApisService.NewUpdateTransitGatewayUserQuotasOpsOptions(customerAccountID)
				updateTransitGatewayUserQuotasOpsOptionsModel.SetCustomerAccountID("testString")
				updateTransitGatewayUserQuotasOpsOptionsModel.SetAddressPrefixesPerClassicConnection(int64(120))
				updateTransitGatewayUserQuotasOpsOptionsModel.SetAddressPrefixesPerDirectlinkConnection(int64(120))
				updateTransitGatewayUserQuotasOpsOptionsModel.SetAddressPrefixesPerGreConnection(int64(120))
				updateTransitGatewayUserQuotasOpsOptionsModel.SetAddressPrefixesPerPowerVirtualServerConnection(int64(120))
				updateTransitGatewayUserQuotasOpsOptionsModel.SetClassicConnectionsPerGateway(int64(1))
				updateTransitGatewayUserQuotasOpsOptionsModel.SetConnectionsPerNetwork(int64(1))
				updateTransitGatewayUserQuotasOpsOptionsModel.SetConnectionsWithFiltersPerGateway(int64(1))
				updateTransitGatewayUserQuotasOpsOptionsModel.SetDirectlinkConnectionsPerGateway(int64(1))
				updateTransitGatewayUserQuotasOpsOptionsModel.SetGatewaysPerAccount(int64(1))
				updateTransitGatewayUserQuotasOpsOptionsModel.SetGatewaysPerLocation([]transitgatewayapisv1.TSLocationQuotaPatch{*tsLocationQuotaPatchModel})
				updateTransitGatewayUserQuotasOpsOptionsModel.SetGreConnectionsPerGateway(int64(1))
				updateTransitGatewayUserQuotasOpsOptionsModel.SetPowerVirtualServerConnectionsPerGateway(int64(1))
				updateTransitGatewayUserQuotasOpsOptionsModel.SetPrefixFiltersPerConnection(int64(1))
				updateTransitGatewayUserQuotasOpsOptionsModel.SetUniqueUnboundGreBaseNetworks(int64(1))
				updateTransitGatewayUserQuotasOpsOptionsModel.SetVpcConnectionsPerGateway(int64(1))
				updateTransitGatewayUserQuotasOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateTransitGatewayUserQuotasOpsOptionsModel).ToNot(BeNil())
				Expect(updateTransitGatewayUserQuotasOpsOptionsModel.CustomerAccountID).To(Equal(core.StringPtr("testString")))
				Expect(updateTransitGatewayUserQuotasOpsOptionsModel.AddressPrefixesPerClassicConnection).To(Equal(core.Int64Ptr(int64(120))))
				Expect(updateTransitGatewayUserQuotasOpsOptionsModel.AddressPrefixesPerDirectlinkConnection).To(Equal(core.Int64Ptr(int64(120))))
				Expect(updateTransitGatewayUserQuotasOpsOptionsModel.AddressPrefixesPerGreConnection).To(Equal(core.Int64Ptr(int64(120))))
				Expect(updateTransitGatewayUserQuotasOpsOptionsModel.AddressPrefixesPerPowerVirtualServerConnection).To(Equal(core.Int64Ptr(int64(120))))
				Expect(updateTransitGatewayUserQuotasOpsOptionsModel.ClassicConnectionsPerGateway).To(Equal(core.Int64Ptr(int64(1))))
				Expect(updateTransitGatewayUserQuotasOpsOptionsModel.ConnectionsPerNetwork).To(Equal(core.Int64Ptr(int64(1))))
				Expect(updateTransitGatewayUserQuotasOpsOptionsModel.ConnectionsWithFiltersPerGateway).To(Equal(core.Int64Ptr(int64(1))))
				Expect(updateTransitGatewayUserQuotasOpsOptionsModel.DirectlinkConnectionsPerGateway).To(Equal(core.Int64Ptr(int64(1))))
				Expect(updateTransitGatewayUserQuotasOpsOptionsModel.GatewaysPerAccount).To(Equal(core.Int64Ptr(int64(1))))
				Expect(updateTransitGatewayUserQuotasOpsOptionsModel.GatewaysPerLocation).To(Equal([]transitgatewayapisv1.TSLocationQuotaPatch{*tsLocationQuotaPatchModel}))
				Expect(updateTransitGatewayUserQuotasOpsOptionsModel.GreConnectionsPerGateway).To(Equal(core.Int64Ptr(int64(1))))
				Expect(updateTransitGatewayUserQuotasOpsOptionsModel.PowerVirtualServerConnectionsPerGateway).To(Equal(core.Int64Ptr(int64(1))))
				Expect(updateTransitGatewayUserQuotasOpsOptionsModel.PrefixFiltersPerConnection).To(Equal(core.Int64Ptr(int64(1))))
				Expect(updateTransitGatewayUserQuotasOpsOptionsModel.UniqueUnboundGreBaseNetworks).To(Equal(core.Int64Ptr(int64(1))))
				Expect(updateTransitGatewayUserQuotasOpsOptionsModel.VpcConnectionsPerGateway).To(Equal(core.Int64Ptr(int64(1))))
				Expect(updateTransitGatewayUserQuotasOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateTransitGatewaysConnectionsOpsOptions successfully`, func() {
				// Construct an instance of the UpdateTransitGatewaysConnectionsOpsOptions model
				transitGatewayID := "testString"
				id := "testString"
				updateTransitGatewaysConnectionsOpsOptionsModel := transitGatewayApisService.NewUpdateTransitGatewaysConnectionsOpsOptions(transitGatewayID, id)
				updateTransitGatewaysConnectionsOpsOptionsModel.SetTransitGatewayID("testString")
				updateTransitGatewaysConnectionsOpsOptionsModel.SetID("testString")
				updateTransitGatewaysConnectionsOpsOptionsModel.SetIsDeletable(false)
				updateTransitGatewaysConnectionsOpsOptionsModel.SetTemplateVersion("v1")
				updateTransitGatewaysConnectionsOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateTransitGatewaysConnectionsOpsOptionsModel).ToNot(BeNil())
				Expect(updateTransitGatewaysConnectionsOpsOptionsModel.TransitGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(updateTransitGatewaysConnectionsOpsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateTransitGatewaysConnectionsOpsOptionsModel.IsDeletable).To(Equal(core.BoolPtr(false)))
				Expect(updateTransitGatewaysConnectionsOpsOptionsModel.TemplateVersion).To(Equal(core.StringPtr("v1")))
				Expect(updateTransitGatewaysConnectionsOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateZoneOpsOptions successfully`, func() {
				// Construct an instance of the UpdateZoneOpsOptions model
				locationName := "testString"
				zoneName := "testString"
				updateZoneOpsOptionsModel := transitGatewayApisService.NewUpdateZoneOpsOptions(locationName, zoneName)
				updateZoneOpsOptionsModel.SetLocationName("testString")
				updateZoneOpsOptionsModel.SetZoneName("testString")
				updateZoneOpsOptionsModel.SetHidden(false)
				updateZoneOpsOptionsModel.SetTargetDeviceQuantity(int64(2))
				updateZoneOpsOptionsModel.SetTgrBgpAsn(int64(4201065540))
				updateZoneOpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateZoneOpsOptionsModel).ToNot(BeNil())
				Expect(updateZoneOpsOptionsModel.LocationName).To(Equal(core.StringPtr("testString")))
				Expect(updateZoneOpsOptionsModel.ZoneName).To(Equal(core.StringPtr("testString")))
				Expect(updateZoneOpsOptionsModel.Hidden).To(Equal(core.BoolPtr(false)))
				Expect(updateZoneOpsOptionsModel.TargetDeviceQuantity).To(Equal(core.Int64Ptr(int64(2))))
				Expect(updateZoneOpsOptionsModel.TgrBgpAsn).To(Equal(core.Int64Ptr(int64(4201065540))))
				Expect(updateZoneOpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewTransitGatewayConnectionTemplateTransitGatewayConnectionNonRedundantGRETemplate successfully`, func() {
				networkType := "vpc"
				_model, err := transitGatewayApisService.NewTransitGatewayConnectionTemplateTransitGatewayConnectionNonRedundantGRETemplate(networkType)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewTransitGatewayConnectionTemplateTransitGatewayConnectionRedundantGRETemplate successfully`, func() {
				name := "Transit_Service_BWTN_SJ_DL"
				networkType := "redundant_gre"
				baseNetworkType := "vpc"
				tunnels := []transitgatewayapisv1.TransitGatewayGRETunnelTemplate{}
				_model, err := transitGatewayApisService.NewTransitGatewayConnectionTemplateTransitGatewayConnectionRedundantGRETemplate(name, networkType, baseNetworkType, tunnels)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
		})
	})
	Describe(`Utility function tests`, func() {
		It(`Invoke CreateMockByteArray() successfully`, func() {
			mockByteArray := CreateMockByteArray("This is a test")
			Expect(mockByteArray).ToNot(BeNil())
		})
		It(`Invoke CreateMockUUID() successfully`, func() {
			mockUUID := CreateMockUUID("9fab83da-98cb-4f18-a7ba-b6f0435c9673")
			Expect(mockUUID).ToNot(BeNil())
		})
		It(`Invoke CreateMockReader() successfully`, func() {
			mockReader := CreateMockReader("This is a test.")
			Expect(mockReader).ToNot(BeNil())
		})
		It(`Invoke CreateMockDate() successfully`, func() {
			mockDate := CreateMockDate("2019-01-01")
			Expect(mockDate).ToNot(BeNil())
		})
		It(`Invoke CreateMockDateTime() successfully`, func() {
			mockDateTime := CreateMockDateTime("2019-01-01T12:00:00.000Z")
			Expect(mockDateTime).ToNot(BeNil())
		})
	})
})

//
// Utility functions used by the generated test code
//

func CreateMockByteArray(mockData string) *[]byte {
	ba := make([]byte, 0)
	ba = append(ba, mockData...)
	return &ba
}

func CreateMockUUID(mockData string) *strfmt.UUID {
	uuid := strfmt.UUID(mockData)
	return &uuid
}

func CreateMockReader(mockData string) io.ReadCloser {
	return io.NopCloser(bytes.NewReader([]byte(mockData)))
}

func CreateMockDate(mockData string) *strfmt.Date {
	d, err := core.ParseDate(mockData)
	if err != nil {
		return nil
	}
	return &d
}

func CreateMockDateTime(mockData string) *strfmt.DateTime {
	d, err := core.ParseDateTime(mockData)
	if err != nil {
		return nil
	}
	return &d
}

func SetTestEnvironment(testEnvironment map[string]string) {
	for key, value := range testEnvironment {
		os.Setenv(key, value)
	}
}

func ClearTestEnvironment(testEnvironment map[string]string) {
	for key := range testEnvironment {
		os.Unsetenv(key)
	}
}
